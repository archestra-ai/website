{
  "dxt_version": "0.1.0",
  "name": "nyxn-ai__nyxdocs",
  "display_name": "NyxDocs",
  "version": "1.0.0",
  "description": "Cryptocurrency Documentation MCP Server - AI-powered documentation collection and management system for blockchain projects",
  "author": {
    "name": "nyxn-ai"
  },
  "server": {
    "type": "python",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "unknown",
      "args": [],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "# NyxDocs - Cryptocurrency Documentation MCP Server\n\n[![Python](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)\n[![MCP](https://img.shields.io/badge/MCP-compatible-green.svg)](https://modelcontextprotocol.io)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n\nNyxDocs is a specialized Model Context Protocol (MCP) server that provides comprehensive documentation management for cryptocurrency projects. Built with Python and inspired by Context7's architecture, it offers real-time access to crypto project documentation, blockchain information, and development resources.\n\n## 🚀 Features\n\n### Core Capabilities\n- **Multi-Blockchain Support**: Ethereum, BSC, Polygon, Solana, and more\n- **Real-time Documentation**: Automatically discovers and updates project docs\n- **Smart Search**: Find projects by name, category, or blockchain\n- **Content Extraction**: Supports GitHub, GitBook, Notion, and official websites\n- **Update Monitoring**: Tracks documentation changes automatically\n\n### MCP Tools\n- `search_crypto_projects`: Search cryptocurrency projects by various criteria\n- `get_project_info`: Detailed project information with blockchain context\n- `get_documentation`: Retrieve actual documentation content\n- `list_blockchains`: Available blockchain networks\n- `check_updates`: Recent documentation updates\n\n## 🏗️ Architecture\n\n```\n┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐\n│   Data Sources  │    │   NyxDocs Core   │    │   MCP Client    │\n│                 │    │                  │    │                 │\n│ • CoinGecko API │────│ • Project DB     │────│ • Claude        │\n│ • GitHub API    │    │ • Doc Scraper    │    │ • Cursor        │\n│ • GitBook       │    │ • Update Monitor │    │ • VS Code       │\n│ • Notion        │    │ • MCP Server     │    │ • Other Clients │\n└─────────────────┘    └──────────────────┘    └─────────────────┘\n```\n\n### Key Components\n\n1. **MCP Server Core**: FastMCP-based server handling protocol communication\n2. **Data Collectors**: Modules for gathering project information from various APIs\n3. **Documentation Scrapers**: Intelligent content extraction from different sources\n4. **Database Layer**: SQLite/PostgreSQL for storing projects and documentation\n5. **Update Monitors**: Background tasks for tracking documentation changes\n\n## 📦 Installation\n\n### Prerequisites\n- Python 3.11+\n- uv (recommended) or pip\n\n### Quick Start\n\n```bash\n# Clone the repository\ngit clone https://github.com/nyxn-ai/NyxDocs.git\ncd NyxDocs\n\n# Install with uv (recommended)\nuv sync\n\n# Or install with pip\npip install -e .\n\n# Set up environment\ncp .env.example .env\n# Edit .env with your API keys\n\n# Initialize database\nuv run python -m nyxdocs.database.init\n\n# Start the server\nuv run python -m nyxdocs.server\n```\n\n### MCP Client Configuration\n\n#### Cursor\n```json\n{\n  \"mcpServers\": {\n    \"nyxdocs\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"python\", \"-m\", \"nyxdocs.server\"]\n    }\n  }\n}\n```\n\n#### Claude Desktop\n```json\n{\n  \"mcpServers\": {\n    \"nyxdocs\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"python\", \"-m\", \"nyxdocs.server\"]\n    }\n  }\n}\n```\n\n## 🔧 Configuration\n\n### Environment Variables\n\n```env\n# API Keys\nCOINGECKO_API_KEY=your_coingecko_api_key\nGITHUB_TOKEN=your_github_token\n\n# Database\nDATABASE_URL=sqlite:///nyxdocs.db\n# Or for PostgreSQL: postgresql://user:pass@localhost/nyxdocs\n\n# Server Settings\nLOG_LEVEL=INFO\nUPDATE_INTERVAL=3600  # seconds\nMAX_CONCURRENT_SCRAPES=5\n```\n\n### Supported Data Sources\n\n- **CoinGecko**: Market data and project information\n- **GitHub**: Repository documentation and README files\n- **GitBook**: Hosted documentation platforms\n- **Notion**: Project documentation pages\n- **Official Websites**: Direct documentation scraping\n\n## 🛠️ Usage Examples\n\n### Search for DeFi Projects\n```python\n# In your MCP client\nsearch_crypto_projects(query=\"uniswap\", category=\"DeFi\", blockchain=\"ethereum\")\n```\n\n### Get Project Documentation\n```python\nget_documentation(project=\"uniswap\", format=\"markdown\")\n```\n\n### Monitor Updates\n```python\ncheck_updates(since=\"2024-01-01\", limit=10)\n```\n\n## 🧪 Development\n\n### Project Structure\n```\nNyxDocs/\n├── nyxdocs/\n│   ├── __init__.py\n│   ├── server.py              # Main MCP server\n│   ├── collectors/            # Data collection modules\n│   ├── scrapers/              # Documentation scrapers\n│   ├── database/              # Database models and operations\n│   ├── tools/                 # MCP tool implementations\n│   └── utils/                 # Utility functions\n├── tests/                     # Test suite\n├── docs/                      # Documentation\n├── pyproject.toml            # Project configuration\n└── README.md\n```\n\n### Running Tests\n```bash\nuv run pytest\n```\n\n### Code Quality\n```bash\nuv run ruff check\nuv run mypy nyxdocs\n```\n\n## 📚 Documentation\n\n- [API Reference](docs/api.md)\n- [Configuration Guide](docs/configuration.md)\n- [Development Setup](docs/development.md)\n- [Contributing Guidelines](CONTRIBUTING.md)\n\n## 🤝 Contributing\n\nWe welcome contributions! Please see our [Contributing Guidelines](CONTRIBUTING.md) for details.\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- Inspired by [Context7](https://github.com/upstash/context7) by Upstash\n- Built with [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)\n- Cryptocurrency data provided by CoinGecko API\n\n---\n\n**NyxDocs** - Making cryptocurrency project documentation accessible and up-to-date for AI assistants.\n",
  "category": "Finance",
  "quality_score": 35,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {
        "nyxdocs": {
          "command": "uv",
          "args": ["run", "python", "-m", "nyxdocs.server"],
          "env": {}
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "nyxn-ai",
    "repo": "NyxDocs",
    "url": "https://github.com/nyxn-ai/NyxDocs",
    "name": "NyxDocs",
    "path": null,
    "stars": 3,
    "contributors": 1,
    "issues": 0,
    "releases": false,
    "ci_cd": false,
    "latest_commit_hash": "ca76dd1df42d35c3f6be9e26fcba06d66efe841c"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-08-03T20:27:49.574Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": true,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "fastapi",
      "importance": 10
    },
    {
      "name": "uvicorn",
      "importance": 9
    },
    {
      "name": "httpx",
      "importance": 7
    },
    {
      "name": "beautifulsoup4",
      "importance": 8
    },
    {
      "name": "lxml",
      "importance": 8
    },
    {
      "name": "sqlalchemy",
      "importance": 9
    },
    {
      "name": "alembic",
      "importance": 8
    },
    {
      "name": "pydantic",
      "importance": 8
    },
    {
      "name": "pydantic-settings",
      "importance": 7
    },
    {
      "name": "python-dotenv",
      "importance": 5
    },
    {
      "name": "aiofiles",
      "importance": 6
    },
    {
      "name": "asyncio-throttle",
      "importance": 7
    },
    {
      "name": "tenacity",
      "importance": 6
    },
    {
      "name": "rich",
      "importance": 4
    },
    {
      "name": "typer",
      "importance": 5
    },
    {
      "name": "structlog",
      "importance": 6
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"NyxDocs\"\nversion = \"0.1.6\"\ndescription = \"Cryptocurrency Documentation MCP Server\"\nreadme = \"README.md\"\nlicense = \"MIT\"\nauthors = [\n    { name = \"nyxn-ai\", email = \"info@nyxn.ai\" }\n]\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n    \"Topic :: Office/Business :: Financial\",\n]\nkeywords = [\n    \"mcp\",\n    \"cryptocurrency\",\n    \"documentation\",\n    \"blockchain\",\n    \"ai\",\n    \"context\",\n    \"protocol\"\n]\nrequires-python = \">=3.11\"\ndependencies = [\n    \"mcp>=1.9.0\",\n    \"fastapi>=0.104.0\",\n    \"uvicorn>=0.24.0\",\n    \"httpx>=0.25.0\",\n    \"beautifulsoup4>=4.12.0\",\n    \"lxml>=4.9.0\",\n    \"sqlalchemy>=2.0.0\",\n    \"alembic>=1.12.0\",\n    \"pydantic>=2.5.0\",\n    \"pydantic-settings>=2.1.0\",\n    \"python-dotenv>=1.0.0\",\n    \"aiofiles>=23.2.0\",\n    \"asyncio-throttle>=1.0.0\",\n    \"tenacity>=8.2.0\",\n    \"rich>=13.7.0\",\n    \"typer>=0.9.0\",\n    \"structlog>=23.2.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest>=7.4.0\",\n    \"pytest-asyncio>=0.21.0\",\n    \"pytest-cov>=4.1.0\",\n    \"pytest-mock>=3.12.0\",\n    \"ruff>=0.1.0\",\n    \"mypy>=1.7.0\",\n    \"black>=23.11.0\",\n    \"isort>=5.12.0\",\n    \"pre-commit>=3.5.0\",\n]\npostgres = [\n    \"asyncpg>=0.29.0\",\n    \"psycopg2-binary>=2.9.0\",\n]\nmonitoring = [\n    \"prometheus-client>=0.19.0\",\n    \"sentry-sdk>=1.38.0\",\n]\n\n[project.urls]\nHomepage = \"https://github.com/nyxn-ai/NyxDocs\"\nRepository = \"https://github.com/nyxn-ai/NyxDocs\"\nIssues = \"https://github.com/nyxn-ai/NyxDocs/issues\"\nDocumentation = \"https://github.com/nyxn-ai/NyxDocs/blob/main/README.md\"\n\n[project.scripts]\nnyxdocs = \"nyxdocs.cli:main\"\n\n[tool.hatch.build.targets.wheel]\npackages = [\"nyxdocs\"]\n\n[tool.ruff]\ntarget-version = \"py311\"\nline-length = 88\nselect = [\n    \"E\",  # pycodestyle errors\n    \"W\",  # pycodestyle warnings\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"B\",  # flake8-bugbear\n    \"C4\", # flake8-comprehensions\n    \"UP\", # pyupgrade\n]\nignore = [\n    \"E501\",  # line too long, handled by black\n    \"B008\",  # do not perform function calls in argument defaults\n    \"C901\",  # too complex\n]\n\n[tool.ruff.per-file-ignores]\n\"__init__.py\" = [\"F401\"]\n\"tests/**/*\" = [\"B011\"]\n\n[tool.mypy]\npython_version = \"3.11\"\ncheck_untyped_defs = true\ndisallow_any_generics = true\ndisallow_incomplete_defs = true\ndisallow_untyped_defs = true\nno_implicit_optional = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true\nwarn_return_any = true\nstrict_equality = true\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"beautifulsoup4.*\",\n    \"lxml.*\",\n    \"asyncio_throttle.*\",\n]\nignore_missing_imports = true\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_classes = [\"Test*\"]\npython_functions = [\"test_*\"]\naddopts = [\n    \"--strict-markers\",\n    \"--strict-config\",\n    \"--cov=nyxdocs\",\n    \"--cov-report=term-missing\",\n    \"--cov-report=html\",\n    \"--cov-report=xml\",\n]\nmarkers = [\n    \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')\",\n    \"integration: marks tests as integration tests\",\n    \"unit: marks tests as unit tests\",\n]\nasyncio_mode = \"auto\"\n\n[tool.coverage.run]\nsource = [\"nyxdocs\"]\nomit = [\n    \"*/tests/*\",\n    \"*/test_*\",\n    \"*/__pycache__/*\",\n    \"*/migrations/*\",\n]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"if self.debug:\",\n    \"if settings.DEBUG\",\n    \"raise AssertionError\",\n    \"raise NotImplementedError\",\n    \"if 0:\",\n    \"if __name__ == .__main__.:\",\n    \"class .*\\\\bProtocol\\\\):\",\n    \"@(abc\\\\.)?abstractmethod\",\n]\n\n[tool.black]\ntarget-version = ['py311']\nline-length = 88\ninclude = '\\.pyi?$'\nextend-exclude = '''\n/(\n  # directories\n  \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | build\n  | dist\n)/\n'''\n\n[tool.isort]\nprofile = \"black\"\nmulti_line_output = 3\ninclude_trailing_comma = true\nforce_grid_wrap = 0\nuse_parentheses = true\nensure_newline_before_comments = true\nline_length = 88\n"
}
