{
  "dxt_version": "0.1.0",
  "name": "qainsights__jmeter-mcp-server",
  "display_name": "jmeter-mcp-server",
  "version": "1.0.0",
  "description": "✨ JMeter Meets AI Workflows: Introducing the JMeter MCP Server! 🤯 ",
  "author": {
    "name": "QAInsights"
  },
  "server": {
    "command": "uv",
    "args": ["--directory", "${__dirname}", "run", "jmeter_server.py"],
    "env": {
      "JMETER_HOME": "${user_config.jmeter_home}",
      "JMETER_BIN": "${user_config.jmeter_bin}",
      "JMETER_JAVA_OPTS": "${user_config.jmeter_java_opts}"
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "jmeter_home": {
      "type": "directory",
      "title": "JMeter Home Directory",
      "description": "Path to your Apache JMeter installation directory (e.g., /path/to/apache-jmeter-5.6.3)",
      "required": true
    },
    "jmeter_bin": {
      "type": "file",
      "title": "JMeter Executable Path",
      "description": "Full path to the JMeter executable (e.g., /path/to/apache-jmeter-5.6.3/bin/jmeter)",
      "required": true,
      "default": "${user_config.jmeter_home}/bin/jmeter"
    },
    "jmeter_java_opts": {
      "type": "string",
      "title": "JMeter Java Options",
      "description": "Optional Java options for JMeter (e.g., -Xms1g -Xmx2g)",
      "required": false,
      "default": "-Xms1g -Xmx2g"
    }
  },
  "readme": "# 🚀 JMeter MCP Server\n\nThis is a Model Context Protocol (MCP) server that allows executing JMeter tests through MCP-compatible clients and analyzing test results.\n\n> [!IMPORTANT]\n> 📢 Looking for an AI Assistant inside JMeter? 🚀\n> Check out [Feather Wand](https://jmeter.ai)\n\n![Anthropic](./images/Anthropic-MCP.png)\n![Cursor](./images/Cursor.png)\n![Windsurf](./images/Windsurf.png)\n\n## 📋 Features\n\n### JMeter Execution\n- 📊 Execute JMeter tests in non-GUI mode\n- 🖥️ Launch JMeter in GUI mode\n- 📝 Capture and return execution output\n- 📊 Generate JMeter report dashboard\n\n### Test Results Analysis\n- 📈 Parse and analyze JMeter test results (JTL files)\n- 📊 Calculate comprehensive performance metrics\n- 🔍 Identify performance bottlenecks automatically\n- 💡 Generate actionable insights and recommendations\n- 📊 Create visualizations of test results\n- 📑 Generate HTML reports with analysis results\n\n## 🛠️ Installation\n\n### Local Installation\n\n1. Install [`uv`](https://github.com/astral-sh/uv):\n\n2. Ensure JMeter is installed on your system and accessible via the command line.\n\n⚠️ **Important**: Make sure JMeter is executable. You can do this by running:\n\n```bash\nchmod +x /path/to/jmeter/bin/jmeter\n```\n\n3. Install required Python dependencies:\n\n```bash\npip install numpy matplotlib\n```\n\n4. Configure the `.env` file, refer to the `.env.example` file for details.\n\n```bash\n# JMeter Configuration\nJMETER_HOME=/path/to/apache-jmeter-5.6.3\nJMETER_BIN=${JMETER_HOME}/bin/jmeter\n\n# Optional: JMeter Java options\nJMETER_JAVA_OPTS=\"-Xms1g -Xmx2g\"\n```\n\n### 💻 MCP Usage\n\n1. Connect to the server using an MCP-compatible client (e.g., Claude Desktop, Cursor, Windsurf)\n\n2. Send a prompt to the server:\n\n```\nRun JMeter test /path/to/test.jmx\n```\n\n3. MCP compatible client will use the available tools:\n\n#### JMeter Execution Tools\n- 🖥️ `execute_jmeter_test`: Launches JMeter in GUI mode, but doesn't execute test as per the JMeter design\n- 🚀 `execute_jmeter_test_non_gui`: Execute a JMeter test in non-GUI mode (default mode for better performance)\n\n#### Test Results Analysis Tools\n- 📊 `analyze_jmeter_results`: Analyze JMeter test results and provide a summary of key metrics and insights\n- 🔍 `identify_performance_bottlenecks`: Identify performance bottlenecks in JMeter test results\n- 💡 `get_performance_insights`: Get insights and recommendations for improving performance\n- 📈 `generate_visualization`: Generate visualizations of JMeter test results\n\n## 🏗️ MCP Configuration\n\nAdd the following configuration to your MCP client config:\n\n```json\n{\n    \"mcpServers\": {\n      \"jmeter\": {\n        \"command\": \"/path/to/uv\",\n        \"args\": [\n          \"--directory\",\n          \"/path/to/jmeter-mcp-server\",\n          \"run\",\n          \"jmeter_server.py\"\n        ]\n      }\n    }\n}\n```\n\n## ✨ Use Cases\n\n### Test Execution\n- Run JMeter tests in non-GUI mode for better performance\n- Launch JMeter in GUI mode for test development\n- Generate JMeter report dashboards\n\n### Test Results Analysis\n- Analyze JTL files to understand performance characteristics\n- Identify performance bottlenecks and their severity\n- Get actionable recommendations for performance improvements\n- Generate visualizations for better understanding of results\n- Create comprehensive HTML reports for sharing with stakeholders\n\n## 🛑 Error Handling\n\nThe server will:\n\n- Validate that the test file exists\n- Check that the file has a .jmx extension\n- Validate that JTL files exist and have valid formats\n- Capture and return any execution or analysis errors\n\n## 📊 Test Results Analyzer\n\nThe Test Results Analyzer is a powerful feature that helps you understand your JMeter test results better. It consists of several components:\n\n### Parser Module\n- Supports both XML and CSV JTL formats\n- Efficiently processes large files with streaming parsers\n- Validates file formats and handles errors gracefully\n\n### Metrics Calculator\n- Calculates overall performance metrics (average, median, percentiles)\n- Provides endpoint-specific metrics for detailed analysis\n- Generates time series metrics to track performance over time\n- Compares metrics with benchmarks for context\n\n### Bottleneck Analyzer\n- Identifies slow endpoints based on response times\n- Detects error-prone endpoints with high error rates\n- Finds response time anomalies and outliers\n- Analyzes the impact of concurrency on performance\n\n### Insights Generator\n- Provides specific recommendations for addressing bottlenecks\n- Analyzes error patterns and suggests solutions\n- Generates insights on scaling behavior and capacity limits\n- Prioritizes recommendations based on potential impact\n\n### Visualization Engine\n- Creates time series graphs showing performance over time\n- Generates distribution graphs for response time analysis\n- Produces endpoint comparison charts for identifying issues\n- Creates comprehensive HTML reports with all analysis results\n\n## 📝 Example Usage\n\n```\n# Run a JMeter test and generate a results file\nRun JMeter test sample_test.jmx in non-GUI mode and save results to results.jtl\n\n# Analyze the results\nAnalyze the JMeter test results in results.jtl and provide detailed insights\n\n# Identify bottlenecks\nWhat are the performance bottlenecks in the results.jtl file?\n\n# Get recommendations\nWhat recommendations do you have for improving performance based on results.jtl?\n\n# Generate visualizations\nCreate a time series graph of response times from results.jtl\n```",
  "category": "Development",
  "quality_score": 60,
  "archestra_config": {
    "client_config_permutations": {
      "jmeter": {
        "command": "/path/to/uv",
        "args": ["--directory", "/path/to/jmeter-mcp-server", "run", "jmeter_server.py"],
        "env": {}
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "QAInsights",
    "repo": "jmeter-mcp-server",
    "url": "https://github.com/QAInsights/jmeter-mcp-server",
    "name": "qainsights__jmeter-mcp-server",
    "path": null,
    "stars": 44,
    "contributors": 1,
    "issues": 3,
    "releases": false,
    "ci_cd": false,
    "latest_commit_hash": "c448d777266176abbeb048c7aed3dd1437035fb2"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:05:41.093Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": true,
    "implementing_resources": true,
    "implementing_sampling": true,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "httpx",
      "importance": 8
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"jmeter-mcp-server\"\nversion = \"0.1.0\"\ndescription = \"JMeter MCP Server\"\nreadme = \"README.md\"\nrequires-python = \">=3.13\"\ndependencies = [\n    \"httpx>=0.28.1\",\n    \"mcp[cli]>=1.6.0\",\n]\n\n\n=== requirements.txt ===\nmcp[cli]<1.6.0\n"
}
