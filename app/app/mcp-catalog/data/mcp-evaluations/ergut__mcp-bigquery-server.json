{
  "dxt_version": "0.1.0",
  "name": "ergut__mcp-bigquery-server",
  "display_name": "mcp-bigquery-server",
  "version": "1.0.0",
  "description": "A Model Context Protocol (MCP) server that provides secure, read-only access to BigQuery datasets. Enables Large Language Models (LLMs) to safely query and analyze data through a standardized interface.",
  "author": {
    "name": "ergut"
  },
  "server": {
    "command": "npx",
    "args": [
      "-y",
      "@ergut/mcp-bigquery-server",
      "--project-id",
      "${user_config.project_id}",
      "--location",
      "${user_config.location}",
      "--key-file",
      "${user_config.key_file}"
    ],
    "env": {}
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "project_id": {
      "type": "string",
      "title": "Google Cloud Project ID",
      "description": "Your Google Cloud project ID where BigQuery is enabled.",
      "required": true,
      "sensitive": false
    },
    "location": {
      "type": "string",
      "title": "BigQuery Location",
      "description": "The BigQuery dataset location (e.g., us-central1, europe-west1).",
      "required": false,
      "default": "us-central1",
      "sensitive": false
    },
    "key_file": {
      "type": "file",
      "title": "Service Account Key File",
      "description": "Path to your Google Cloud service account key JSON file. Leave blank to use gcloud CLI authentication.",
      "required": false,
      "sensitive": true
    }
  },
  "readme": "# BigQuery MCP Server\n[![smithery badge](https://smithery.ai/badge/@ergut/mcp-bigquery-server)](https://smithery.ai/protocol/@ergut/mcp-bigquery-server)\n<div align=\"center\">\n  <img src=\"assets/mcp-bigquery-server-logo.png\" alt=\"BigQuery MCP Server Logo\" width=\"400\"/>\n</div>\n\n## What is this? ü§î\n\nThis is a server that lets your LLMs (like Claude) talk directly to your BigQuery data! Think of it as a friendly translator that sits between your AI assistant and your database, making sure they can chat securely and efficiently.\n\n### Quick Example\n```text\nYou: \"What were our top 10 customers last month?\"\nClaude: *queries your BigQuery database and gives you the answer in plain English*\n```\n\nNo more writing SQL queries by hand - just chat naturally with your data!\n\n## How Does It Work? üõ†Ô∏è\n\nThis server uses the Model Context Protocol (MCP), which is like a universal translator for AI-database communication. While MCP is designed to work with any AI model, right now it's available as a developer preview in Claude Desktop.\n\nHere's all you need to do:\n1. Set up authentication (see below)\n2. Add your project details to Claude Desktop's config file\n3. Start chatting with your BigQuery data naturally!\n\n### What Can It Do? üìä\n\n- Run SQL queries by just asking questions in plain English\n- Access both tables and materialized views in your datasets\n- Explore dataset schemas with clear labeling of resource types (tables vs views)\n- Analyze data within safe limits (1GB query limit by default)\n- Keep your data secure (read-only access)\n\n## Quick Start üöÄ\n\n### Prerequisites\n- Node.js 14 or higher\n- Google Cloud project with BigQuery enabled\n- Either Google Cloud CLI installed or a service account key file\n- Claude Desktop (currently the only supported LLM interface)\n\n### Option 1: Quick Install via Smithery (Recommended)\nTo install BigQuery MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/@ergut/mcp-bigquery-server), run this command in your terminal:\n\n```bash\nnpx @smithery/cli install @ergut/mcp-bigquery-server --client claude\n```\nThe installer will prompt you for:\n\n- Your Google Cloud project ID\n- BigQuery location (defaults to us-central1)\n\nOnce configured, Smithery will automatically update your Claude Desktop configuration and restart the application.\n\n### Option 2: Manual Setup\nIf you prefer manual configuration or need more control:\n\n1. **Authenticate with Google Cloud** (choose one method):\n   - Using Google Cloud CLI (great for development):\n     ```bash\n     gcloud auth application-default login\n     ```\n   - Using a service account (recommended for production):\n     ```bash\n     # Save your service account key file and use --key-file parameter\n     # Remember to keep your service account key file secure and never commit it to version control\n     ```\n\n2. **Add to your Claude Desktop config**\n   Add this to your `claude_desktop_config.json`:\n\n   - Basic configuration:\n     ```json\n     {\n       \"mcpServers\": {\n         \"bigquery\": {\n           \"command\": \"npx\",\n           \"args\": [\n             \"-y\",\n             \"@ergut/mcp-bigquery-server\",\n             \"--project-id\",\n             \"your-project-id\",\n             \"--location\",\n             \"us-central1\"\n           ]\n         }\n       }\n     }\n     ```\n\n   - With service account:\n     ```json\n     {\n       \"mcpServers\": {\n         \"bigquery\": {\n           \"command\": \"npx\",\n           \"args\": [\n             \"-y\",\n             \"@ergut/mcp-bigquery-server\",\n             \"--project-id\",\n             \"your-project-id\",\n             \"--location\",\n             \"us-central1\",\n             \"--key-file\",\n             \"/path/to/service-account-key.json\"\n           ]\n         }\n       }\n     }\n     ```\n     \n\n3. **Start chatting!** \n   Open Claude Desktop and start asking questions about your data.\n\n### Command Line Arguments\n\nThe server accepts the following arguments:\n- `--project-id`: (Required) Your Google Cloud project ID\n- `--location`: (Optional) BigQuery location, defaults to 'us-central1'\n- `--key-file`: (Optional) Path to service account key JSON file\n\nExample using service account:\n```bash\nnpx @ergut/mcp-bigquery-server --project-id your-project-id --location europe-west1 --key-file /path/to/key.json\n```\n\n### Permissions Needed\n\nYou'll need one of these:\n- `roles/bigquery.user` (recommended)\n- OR both:\n  - `roles/bigquery.dataViewer`\n  - `roles/bigquery.jobUser`\n\n## Developer Setup (Optional) üîß\n\nWant to customize or contribute? Here's how to set it up locally:\n\n```bash\n# Clone and install\ngit clone https://github.com/ergut/mcp-bigquery-server\ncd mcp-bigquery-server\nnpm install\n\n# Build\nnpm run build\n```\n\nThen update your Claude Desktop config to point to your local build:\n```json\n{\n  \"mcpServers\": {\n    \"bigquery\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/your/clone/mcp-bigquery-server/dist/index.js\",\n        \"--project-id\",\n        \"your-project-id\",\n        \"--location\",\n        \"us-central1\",\n        \"--key-file\",\n        \"/path/to/service-account-key.json\"\n      ]\n    }\n  }\n}\n```\n\n## Current Limitations ‚ö†Ô∏è\n\n- MCP support is currently only available in Claude Desktop (developer preview)\n- Connections are limited to local MCP servers running on the same machine\n- Queries are read-only with a 1GB processing limit\n- While both tables and views are supported, some complex view types might have limitations\n\n## Support & Resources üí¨\n\n- üêõ [Report issues](https://github.com/ergut/mcp-bigquery-server/issues)\n- üí° [Feature requests](https://github.com/ergut/mcp-bigquery-server/issues)\n- üìñ [Documentation](https://github.com/ergut/mcp-bigquery-server)\n\n## License üìù\n\nMIT License - See [LICENSE](LICENSE) file for details.\n\n## Author ‚úçÔ∏è \n\nSalih Erg√ºt\n\n## Sponsorship\n\nThis project is proudly sponsored by:\n\n<div align=\"center\">\n  <a href=\"https://www.oredata.com\">\n    <img src=\"assets/oredata-logo-nobg.png\" alt=\"OREDATA\" width=\"300\"/>\n  </a>\n</div>\n\n## Version History üìã\n\nSee [CHANGELOG.md](CHANGELOG.md) for updates and version history.",
  "category": "AI Tools",
  "quality_score": 68,
  "archestra_config": {
    "client_config_permutations": {
      "ergut-mcp-bigquery-server": {
        "command": "npx",
        "args": [
          "-y",
          "@ergut/mcp-bigquery-server",
          "--project-id",
          "your-project-id",
          "--location",
          "us-central1"
        ],
        "env": {}
      },
      "ergut-mcp-bigquery-server-with-config": {
        "command": "npx",
        "args": [
          "-y",
          "@ergut/mcp-bigquery-server",
          "--project-id",
          "your-project-id",
          "--location",
          "us-central1",
          "--key-file",
          "/path/to/service-account-key.json"
        ],
        "env": {}
      },
      "ergut-mcp-bigquery-server-cli-configured": {
        "command": "npx",
        "args": [
          "@ergut/mcp-bigquery-server",
          "--project-id",
          "your-project-id",
          "--location",
          "europe-west1",
          "--key-file",
          "/path/to/key.json"
        ],
        "env": {}
      },
      "ergut-mcp-bigquery-server-local-dev": {
        "command": "node",
        "args": [
          "/path/to/your/clone/mcp-bigquery-server/dist/index.js",
          "--project-id",
          "your-project-id",
          "--location",
          "us-central1",
          "--key-file",
          "/path/to/service-account-key.json"
        ],
        "env": {}
      }
    },
    "oauth": {
      "provider": "google",
      "required": true
    }
  },
  "github_info": {
    "owner": "ergut",
    "repo": "mcp-bigquery-server",
    "url": "https://github.com/ergut/mcp-bigquery-server",
    "name": "ergut__mcp-bigquery-server",
    "path": null,
    "stars": 120,
    "contributors": 4,
    "issues": 6,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "36cebb115f9101363c24042b87ae68b7d38039e1"
  },
  "programming_language": "JavaScript",
  "framework": null,
  "last_scraped_at": "2025-09-07T22:14:14.775Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "@google-cloud/bigquery",
      "importance": 9
    },
    {
      "name": "@modelcontextprotocol/sdk",
      "importance": 10
    }
  ],
  "raw_dependencies": "=== package.json ===\n{\n  \"name\": \"@ergut/mcp-bigquery-server\",\n  \"version\": \"1.0.3\",\n  \"description\": \"MCP server for interacting with BigQuery databases\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://oredata.com\",\n  \"type\": \"module\",\n  \"bin\": {\n    \"mcp-server-bigquery\": \"dist/index.js\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"postbuild\": \"shx chmod +x dist/index.js\",\n    \"prepare\": \"npm run build\",\n    \"dev\": \"tsc --watch\",\n    \"clean\": \"shx rm -rf dist\"\n  },\n  \"dependencies\": {\n    \"@google-cloud/bigquery\": \"^7.3.0\",\n    \"@modelcontextprotocol/sdk\": \"0.6.0\"\n  },\n  \"devDependencies\": {\n    \"shx\": \"^0.3.4\",\n    \"typescript\": \"^5.6.2\"\n  },\n  \"engines\": {\n    \"node\": \">=14.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ergut/mcp-bigquery-server\"\n  }\n}\n"
}
