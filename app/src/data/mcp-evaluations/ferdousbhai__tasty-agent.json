{
  "name": "tasty agent",
  "slug": "ferdousbhai__tasty-agent",
  "description": "Let Claude manage your tastytrade portfolio.",
  "readme": "# tasty-agent: A TastyTrade MCP Server\n\nA Model Context Protocol server for TastyTrade brokerage accounts. Enables LLMs to monitor portfolios, analyze positions, and execute trades.\n\n## Installation\n\n```bash\nuvx tasty-agent\n```\n\n### Authentication\n\nSet up credentials (stored in system keyring):\n```bash\nuvx tasty-agent setup\n```\n\nOr use environment variables:\n- `TASTYTRADE_USERNAME`\n- `TASTYTRADE_PASSWORD`\n- `TASTYTRADE_ACCOUNT_ID` (optional)\n\n## MCP Tools\n\n### Account & Portfolio\n- **`get_balances()`** - Account balances and buying power\n- **`get_positions()`** - All open positions with current values\n- **`get_net_liquidating_value_history(time_back='1y')`** - Portfolio value history ('1d', '1m', '3m', '6m', '1y', 'all')\n- **`get_history(start_date=None)`** - Transaction history (format: YYYY-MM-DD, default: last 90 days)\n\n### Market Data & Research\n- **`get_quote(symbol, option_type=None, strike_price=None, expiration_date=None, timeout=10.0)`** - Real-time quotes for stocks and options via DXLink streaming\n- **`get_market_metrics(symbols)`** - IV rank, percentile, beta, liquidity for multiple symbols\n- **`market_status(exchanges=['Equity'])`** - Market hours and status ('Equity', 'CME', 'CFE', 'Smalls')\n- **`search_symbols(symbol)`** - Search for symbols by name/ticker\n\n### Order Management\n- **`get_live_orders()`** - Currently active orders\n- **`place_order(symbol, order_type, action, quantity, price, strike_price=None, expiration_date=None, time_in_force='Day', dry_run=False)`** - Simplified order placement for stocks and options\n- **`delete_order(order_id)`** - Cancel orders by ID\n\n### Watchlist Management\n- **`get_public_watchlists(name=None)`** - Get public watchlists (all watchlists if name=None, specific watchlist if name provided)\n- **`get_private_watchlists(name=None)`** - Get private watchlists (all watchlists if name=None, specific watchlist if name provided)\n- **`create_private_watchlist(name, entries=[], group_name='main')`** - Create new private watchlist\n- **`add_symbol_to_private_watchlist(watchlist_name, symbol, instrument_type)`** - Add symbol to existing watchlist\n- **`remove_symbol_from_private_watchlist(watchlist_name, symbol, instrument_type)`** - Remove symbol from watchlist\n- **`delete_private_watchlist(name)`** - Delete private watchlist\n\n## Watchlist Entry Format\n\nWatchlist entries use this format:\n```json\n[\n  {\n    \"symbol\": \"AAPL\",\n    \"instrument_type\": \"Equity\"\n  },\n  {\n    \"symbol\": \"AAPL240119C00150000\",\n    \"instrument_type\": \"Equity Option\"\n  }\n]\n```\n\n## Key Features\n\n- **Real-time streaming** quotes via DXLink WebSocket\n- **Watchlist management** for portfolio organization\n- **Dry-run testing** for all order operations\n- **Automatic symbol normalization** for options\n- **Fresh data** always from TastyTrade API\n\n## Usage with Claude Desktop\n\nAdd to `claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"tastytrade\": {\n      \"command\": \"uvx\",\n      \"args\": [\"tasty-agent\"]\n    }\n  }\n}\n```\n\n## Examples\n\n```\n\"Get my account balances and current positions\"\n\"Get real-time quote for SPY\"\n\"Get quote for TQQQ C option with strike 100 expiring 2026-01-16\"\n\"Place dry-run order: buy 100 AAPL shares at $150\"\n\"Place order: buy 17 TQQQ C contracts at $8.55, strike 100, expiring 2026-01-16\"\n\"Cancel order 12345\"\n\"Create a watchlist called 'Tech Stocks' with AAPL and MSFT\"\n\"Add TSLA to my Tech Stocks watchlist\"\n```\n\n## Development\n\nDebug with MCP inspector:\n```bash\nnpx @modelcontextprotocol/inspector uvx tasty-agent\n```\n\n## License\n\nMIT\n",
  "category": "Finance",
  "qualityScore": 53,
  "githubUrl": "https://github.com/ferdousbhai/tasty-agent",
  "programmingLanguage": "Python",
  "gitHubOrg": "ferdousbhai",
  "gitHubRepo": "tasty-agent",
  "repositoryPath": null,
  "gh_stars": 34,
  "gh_contributors": 3,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "52851b3f53bf6eabfbd70d518caaedb9d5097eb3",
  "last_scraped_at": "2025-08-04T09:37:10.890Z",
  "implementing_tools": true,
  "implementing_prompts": false,
  "implementing_resources": true,
  "implementing_sampling": false,
  "implementing_roots": false,
  "implementing_logging": false,
  "implementing_stdio": true,
  "implementing_streamable_http": false,
  "implementing_oauth2": false,
  "rawDependencies": "=== pyproject.toml ===\n[project]\nname = \"tasty-agent\"\ndynamic = [\"version\"]\ndescription = \"A Model Context Protocol server for interacting with TastyTrade brokerage accounts\"\nreadme = \"README.md\"\nrequires-python = \">=3.12\"\ndependencies = [\n    \"keyring\",\n    \"mcp[cli]>=1.9.4\",\n    \"tastytrade>=10.2.3\",\n    \"click\",\n    \"rich\",\n    \"humanize>=4.12.3\",\n]\nauthors = [{ name = \"Ferdous\", email = \"ferdous@hey.com\" }]\nkeywords = [\"tastytrade\", \"trading\", \"mcp\", \"model context protocol\", \"broker\", \"robinhood\", \"wallstreetbets\"]\nclassifiers = [\n    \"Intended Audience :: Financial and Insurance Industry\",\n    \"Intended Audience :: End Users/Desktop\",\n    \"Topic :: Office/Business :: Financial\",\n    \"Programming Language :: Python :: 3.12\",\n    \"License :: OSI Approved :: MIT License\",\n]\n\n[project.scripts]\ntasty-agent = \"tasty_agent.cli:main\"\n\n[build-system]\nrequires = [\"hatchling\", \"hatch-vcs\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.hatch.version]\nsource = \"vcs\"\n\n[tool.hatch.build.targets.wheel]\npackages = [\"tasty_agent\"]\n\n[tool.hatch.build.hooks.vcs]\nversion-file = \"tasty_agent/_version.py\"\n\n[dependency-groups]\ndev = [\n    \"ipykernel>=6.29.5\",\n]\n",
  "evaluation_model": "gemini-2.5-flash",
  "configForClients": {
    "mcpServers": {
      "tasty-agent": {
        "command": "uvx",
        "args": ["tasty-agent"]
      }
    }
  },
  "configForArchestra": {
    "command": "uvx",
    "args": ["tasty-agent"],
    "env": {
      "server-basic": "",
      "server-configured": "",
      "server-docker": ""
    },
    "transport": "stdio",
    "oauth": {}
  },
  "dependencies": [
    {
      "importance": 7,
      "name": "keyring"
    },
    {
      "importance": 10,
      "name": "mcp"
    },
    {
      "importance": 9,
      "name": "tastytrade"
    },
    {
      "importance": 7,
      "name": "click"
    },
    {
      "importance": 4,
      "name": "rich"
    },
    {
      "importance": 3,
      "name": "humanize"
    }
  ]
}
