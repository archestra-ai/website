{
  "name": "youtube_",
  "slug": "format37__youtube_mcp",
  "description": "youtube transcriber mcp server",
  "readme": "# youtube_mcp\nYoutube transcribation MCP server\n\n## Demo Video\n\n[![YouTube MCP Demo](https://img.youtube.com/vi/bS5vKuehzEE/maxresdefault.jpg)](https://youtu.be/bS5vKuehzEE)\n\n*Click the image above to watch the demo video*\n\n## Requirements:\n* OpenAI API key\n* Cookies\n\n## Server installation\n* Clone the repo:\n```\ngit clone https://github.com/format37/youtube_mcp.git\ncd youtube_mcp\nnano .env\n```\n* Extract your cookies. See [cookies.md](./cookies.md)  \nPlace cookies.txt in the ./mcp/ folder.\n* Generate MCP_KEY:\n```\npython token_generator.py\n```\n* Define .env:\n```\nCONTAINER_NAME=youtube_mcp_main\nPORT=7001\nMCP_KEY=YOUR-MCP-KEY\nOPENAI_API_KEY=YOUR-OPENAI-KRY\n```\n* Provide run access\n```\nsudo chmod +x compose.sh\nsudo chmod +x logs.sh\nsudo chmod +x update.sh\n```\n* Run\n```\n./compose.sh\n```\n* Check that port is opened for incoming connections.\n\n## Client configuration\n3. Add Bybit server to the Claude desktop config:\nExample:\n```\n{\n    \"mcpServers\": {\n      \"youtube\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"mcp-remote\",\n          \"http://localhost:7001/sse\",\n          \"--header\",\n          \"Authorization:YOUR-TOKEN\",\n          \"--allow-http\"\n        ],\n        \"disabled\": false\n      }\n    }\n}\n```\n## Client side\n```\n4. Restart Claude desktop\n5. Check that tws tools are listed in the tools list. Ask Claude to check ibkr account",
  "category": "AI Tools",
  "qualityScore": 54,
  "githubUrl": "https://github.com/format37/youtube_mcp",
  "programmingLanguage": "Python",
  "gitHubOrg": "format37",
  "gitHubRepo": "youtube_mcp",
  "repositoryPath": null,
  "gh_stars": 14,
  "gh_contributors": 1,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": false,
  "gh_latest_commit_hash": "8088308e89611ac98fba95385f65e1e11f332051",
  "last_scraped_at": "2025-08-03T20:25:07.536Z",
  "implementing_tools": true,
  "implementing_prompts": false,
  "implementing_resources": true,
  "implementing_sampling": true,
  "implementing_roots": false,
  "implementing_logging": true,
  "implementing_stdio": false,
  "implementing_streamable_http": true,
  "implementing_oauth2": false,
  "rawDependencies": "=== mcp/requirements.txt ===\nyt-dlp==2025.5.22\nfastapi==0.115.12\nuvicorn==0.23.2\nmcp[cli]==1.8.0\nopenai==1.58.1\npydub==0.25.1",
  "evaluation_model": "gemini-2.5-flash",
  "configForClients": {
    "mcpServers": {
      "youtube_mcp-docker": {
        "command": "docker",
        "args": [
          "run",
          "--name",
          "youtube_mcp_main",
          "-p",
          "7001:7001",
          "-e",
          "MCP_KEY=YOUR-MCP-KEY",
          "-e",
          "OPENAI_API_KEY=YOUR-OPENAI-KRY",
          "youtube_mcp"
        ],
        "env": {
          "MCP_KEY": "YOUR-MCP-KEY",
          "OPENAI_API_KEY": "YOUR-OPENAI-KRY"
        }
      }
    }
  },
  "configForArchestra": {
    "command": "null",
    "args": [],
    "env": {
      "server-basic": "null",
      "server-configured": "null",
      "server-docker": "null"
    },
    "transport": "null",
    "oauth": {
      "provider": "null",
      "required": false
    }
  },
  "dependencies": [
    {
      "importance": 8,
      "name": "yt-dlp"
    },
    {
      "importance": 10,
      "name": "fastapi"
    },
    {
      "importance": 9,
      "name": "uvicorn"
    },
    {
      "importance": 10,
      "name": "mcp"
    },
    {
      "importance": 8,
      "name": "openai"
    },
    {
      "importance": 7,
      "name": "pydub"
    }
  ]
}
