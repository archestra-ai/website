{
  "dxt_version": "0.1.0",
  "name": "tumf__grafana-loki-mcp",
  "display_name": "grafana-loki-mcp",
  "version": "1.0.0",
  "description": "Grafana Loki MCP Repository",
  "author": {
    "name": "tumf"
  },
  "server": {
    "command": "uvx",
    "args": ["grafana-loki-mcp", "--transport", "${user_config.transport}"],
    "env": {
      "GRAFANA_URL": "${user_config.grafana_url}",
      "GRAFANA_API_KEY": "${user_config.grafana_api_key}"
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "grafana_url": {
      "type": "string",
      "title": "Grafana URL",
      "description": "URL of your Grafana instance",
      "required": true
    },
    "grafana_api_key": {
      "type": "string",
      "title": "Grafana API Key",
      "description": "Grafana API key with appropriate permissions",
      "sensitive": true,
      "required": true
    },
    "transport": {
      "type": "string",
      "title": "Transport Protocol",
      "description": "Transport protocol to use (`stdio` or `sse`, default: `stdio`)",
      "default": "stdio",
      "required": false
    }
  },
  "readme": "# Grafana-Loki MCP Server\n\n[![Test](https://github.com/tumf/grafana-loki-mcp/actions/workflows/test.yml/badge.svg)](https://github.com/tumf/grafana-loki-mcp/actions/workflows/test.yml)\n[![PyPI version](https://badge.fury.io/py/grafana-loki-mcp.svg)](https://badge.fury.io/py/grafana-loki-mcp)\n[![codecov](https://codecov.io/gh/tumf/grafana-loki-mcp/branch/main/graph/badge.svg)](https://codecov.io/gh/tumf/grafana-loki-mcp)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA [FastMCP](https://github.com/jlowin/fastmcp) server that allows querying Loki logs from Grafana.\n\n## MCP Server Settings\n\n```json\n{\n  \"mcpServers\": {\n    \"loki\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"grafana-loki-mcp\",\n        \"-u\",\n        \"GRAFANA_URL\",\n        \"-k\",\n        \"GRAFANA_API_KEY\"\n      ]\n    }\n  }\n}\n```\n\n- `GRAFANA_URL`: URL of your Grafana instance\n- `GRAFANA_API_KEY`: Grafana API key with appropriate permissions\n\n## Features\n\n- Query Loki logs through Grafana API\n- Get Loki labels and label values\n- Format query results in different formats (text, JSON, markdown)\n- Support for both stdio and SSE transport protocols\n\n## Requirements\n\n- Python 3.10+\n- FastMCP\n- Requests\n\n## Installation\n\n### Using pip\n\n```bash\npip install grafana-loki-mcp\n```\n\n### Development Setup\n\n1. Clone this repository\n2. Install dependencies using uv:\n\n```bash\n# Install uv\npip install uv\n\n# Create and activate virtual environment\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\nuv pip install -e \".[dev]\"\n```\n\n## Usage\n\n### Environment Variables\n\nSet the following environment variables:\n\n- `GRAFANA_URL`: URL of your Grafana instance\n- `GRAFANA_API_KEY`: Grafana API key with appropriate permissions\n\n### Command Line Arguments\n\nYou can also provide these values as command line arguments:\n\n```bash\ngrafana-loki-mcp -u https://your-grafana-instance.com -k your-api-key\n```\n\nAdditional options:\n- `--transport`: Transport protocol to use (`stdio` or `sse`, default: `stdio`)\n\n### Running the Server\n\n```bash\n# Using environment variables\nexport GRAFANA_URL=https://your-grafana-instance.com\nexport GRAFANA_API_KEY=your-api-key\ngrafana-loki-mcp\n\n# Using command line arguments\ngrafana-loki-mcp -u https://your-grafana-instance.com -k your-api-key\n\n# Using SSE transport\ngrafana-loki-mcp --transport sse\n```\n\n## Development\n\n### Testing\n\nRun the test suite:\n\n```bash\npytest\n```\n\nRun with coverage:\n\n```bash\npytest --cov=. --cov-report=term\n```\n\n### Linting and Formatting\n\n```bash\n# Run ruff linter\nruff check .\n\n# Run black formatter\nblack .\n\n# Run type checking\nmypy .\n```\n\n## Available Tools\n\n### query_loki\n\nQuery Loki logs through Grafana.\n\nParameters:\n- `query`: Loki query string\n- `start`: Start time (ISO format, Unix timestamp, or Grafana-style relative time like 'now-1h', default: 1 hour ago)\n- `end`: End time (ISO format, Unix timestamp, or Grafana-style relative time like 'now', default: now)\n- `limit`: Maximum number of log lines to return (default: 100)\n- `direction`: Query direction ('forward' or 'backward', default: 'backward')\n- `max_per_line`: Maximum characters per log line (0 for unlimited, default: 100)\n\n### get_loki_labels\n\nGet all label names from Loki.\n\n### get_loki_label_values\n\nGet values for a specific label from Loki.\n\nParameters:\n- `label`: Label name\n\n### format_loki_results\n\nFormat Loki query results in a more readable format.\n\nParameters:\n- `results`: Loki query results from query_loki\n- `format_type`: Output format ('text', 'json', or 'markdown', default: 'text')\n- `max_per_line`: Maximum characters per log line (0 for unlimited, default: 0)\n\n## Example Usage\n\n```python\n# Example client code\nfrom mcp.client import Client\n\nasync with Client() as client:\n    # Query Loki logs with max_per_line limit\n    results = await client.call_tool(\n        \"query_loki\",\n        {\n            \"query\": '{app=\"my-app\"} |= \"error\"',\n            \"limit\": 50,\n            \"max_per_line\": 100,  # Limit log lines to 100 characters\n            \"start\": \"now-6h\",    # Grafana-style relative time: 6 hours ago\n            \"end\": \"now\"          # Current time\n        }\n    )\n\n    # Format the results\n    formatted = await client.call_tool(\n        \"format_loki_results\",\n        {\n            \"results\": results,\n            \"format_type\": \"markdown\",\n            \"max_per_line\": 100  # Can also limit at formatting time\n        }\n    )\n\n    print(formatted)\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
  "category": "Monitoring",
  "quality_score": 55,
  "archestra_config": {
    "client_config_permutations": {
      "grafana-loki-mcp-configured": {
        "command": "uvx",
        "args": ["grafana-loki-mcp", "-u", "GRAFANA_URL", "-k", "GRAFANA_API_KEY"],
        "env": {}
      },
      "grafana-loki-mcp-env": {
        "command": "grafana-loki-mcp",
        "args": [],
        "env": {
          "GRAFANA_URL": "https://your-grafana-instance.com",
          "GRAFANA_API_KEY": "your-api-key"
        }
      },
      "grafana-loki-mcp-args": {
        "command": "grafana-loki-mcp",
        "args": ["-u", "https://your-grafana-instance.com", "-k", "your-api-key"],
        "env": {}
      },
      "grafana-loki-mcp-sse": {
        "command": "grafana-loki-mcp",
        "args": ["--transport", "sse"],
        "env": {}
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": false
  },
  "github_info": {
    "owner": "tumf",
    "repo": "grafana-loki-mcp",
    "url": "https://github.com/tumf/grafana-loki-mcp",
    "name": "grafana-loki-mcp",
    "path": null,
    "stars": 14,
    "contributors": 6,
    "issues": 0,
    "releases": false,
    "ci_cd": true,
    "latest_commit_hash": "0db2a51e69c6a07ba832a159951b41aaa1b74b8a"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:24.443Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "fastmcp",
      "importance": 10
    },
    {
      "name": "requests",
      "importance": 8
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.hatch.build.targets.wheel]\npackages = [\"grafana_loki_mcp\"]\n\n[project]\nname = \"grafana-loki-mcp\"\ndynamic = [\"version\"]\ndescription = \"A FastMCP server for querying Loki logs from Grafana\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\nlicense = { file = \"LICENSE\" }\nauthors = [\n    { name = \"tumf\", email = \"tumf@no-reply.github.com\" },\n]\ndependencies = [\n    \"fastmcp>=0.1.0\",\n    \"requests>=2.25.0\",\n]\nclassifiers = [\n    \"Development Status :: 3 - Alpha\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n]\n\n[tool.hatch.version]\npath = \"grafana_loki_mcp/__version__.py\"\n\n[project.urls]\nHomepage = \"https://github.com/tumf/grafana-loki-mcp\"\nIssues = \"https://github.com/tumf/grafana-loki-mcp/issues\"\n\n[project.scripts]\ngrafana-loki-mcp = \"grafana_loki_mcp.__main__:main\"\n\n[project.optional-dependencies]\ndev = [\n    \"black>=23.0.0\",\n    \"isort>=5.12.0\",\n    \"mypy>=1.0.0\",\n    \"pytest>=7.0.0\",\n    \"pytest-cov>=4.0.0\",\n    \"ruff>=0.0.270\",\n    \"types-requests>=2.25.0\",\n    \"types-setuptools\",\n]\n\n[dependency-groups]\ndev = [\n    \"pre-commit>=4.2.0\",\n]\n\n[tool.black]\nline-length = 88\ntarget-version = [\"py310\"]\n\n[tool.isort]\nprofile = \"black\"\nline_length = 88\n\n[tool.mypy]\npython_version = \"3.10\"\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\ndisallow_incomplete_defs = true\n\n[tool.ruff]\nline-length = 88\ntarget-version = \"py310\"\n\n[tool.ruff.lint]\nselect = [\"E\", \"F\", \"B\", \"I\"]\nignore = [\"E501\"]\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = \"test_*.py\"\n\n[tool.uv.workspace]\nmembers = [\"uv-demo\"]\n\n\n=== setup.py ===\n\"\"\"Setup script for the grafana-loki-mcp package.\"\"\"\n\nimport os\nimport re\n\n# mypy: ignore-errors\nfrom setuptools import find_packages, setup\n\n# Read version from __version__.py\nwith open(os.path.join(\"grafana_loki_mcp\", \"__version__.py\"), encoding=\"utf-8\") as f:\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\", f.read(), re.M)\n    if version_match:\n        version = version_match.group(1)\n    else:\n        raise RuntimeError(\"Unable to find version string.\")\n\n# Read long description from README.md\nwith open(\"README.md\", encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"grafana-loki-mcp\",\n    version=version,\n    description=\"A FastMCP server for querying Loki logs from Grafana\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"tumf\",\n    author_email=\"tumf@no-reply.github.com\",\n    url=\"https://github.com/tumf/grafana-loki-mcp\",\n    packages=find_packages(),\n    py_modules=[],\n    install_requires=[\n        \"fastmcp>=0.1.0\",\n        \"requests>=2.25.0\",\n    ],\n    extras_require={\n        \"dev\": [\n            \"black>=23.0.0\",\n            \"isort>=5.12.0\",\n            \"mypy>=1.0.0\",\n            \"pytest>=7.0.0\",\n            \"pytest-cov>=4.0.0\",\n            \"ruff>=0.0.270\",\n            \"types-requests>=2.25.0\",\n            \"types-setuptools\",\n        ],\n    },\n    python_requires=\">=3.10\",\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"grafana-loki-mcp=grafana_loki_mcp.__main__:main\",\n        ],\n    },\n)\n"
}
