{
  "dxt_version": "0.1.0",
  "name": "aikts__yandex-tracker-mcp",
  "display_name": "yandex-tracker-mcp",
  "version": "1.0.0",
  "description": "Yandex Tracker MCP Server with OAuth2 support",
  "author": {
    "name": "aikts"
  },
  "server": {
    "command": "uvx",
    "args": ["yandex-tracker-mcp@latest"],
    "env": {
      "TRACKER_TOKEN": "${user_config.tracker_token}",
      "TRACKER_IAM_TOKEN": "${user_config.tracker_iam_token}",
      "TRACKER_SA_KEY_ID": "${user_config.tracker_sa_key_id}",
      "TRACKER_SA_SERVICE_ACCOUNT_ID": "${user_config.tracker_sa_service_account_id}",
      "TRACKER_SA_PRIVATE_KEY": "${user_config.tracker_sa_private_key}",
      "TRACKER_CLOUD_ORG_ID": "${user_config.tracker_cloud_org_id}",
      "TRACKER_ORG_ID": "${user_config.tracker_org_id}",
      "TRANSPORT": "${user_config.transport}"
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "tracker_token": {
      "type": "string",
      "title": "Yandex Tracker OAuth Token",
      "description": "Your Yandex Tracker OAuth token. One of the authentication methods (OAuth token, IAM token, or Service Account credentials) is required.",
      "sensitive": true,
      "required": false
    },
    "tracker_iam_token": {
      "type": "string",
      "title": "Yandex IAM Token",
      "description": "Your IAM token. One of the authentication methods (OAuth token, IAM token, or Service Account credentials) is required.",
      "sensitive": true,
      "required": false
    },
    "tracker_sa_key_id": {
      "type": "string",
      "title": "Service Account Key ID",
      "description": "Service account key ID. All three service account credentials (Key ID, Service Account ID, and Private Key) are required if using this authentication method.",
      "sensitive": true,
      "required": false
    },
    "tracker_sa_service_account_id": {
      "type": "string",
      "title": "Service Account ID",
      "description": "Service account ID. All three service account credentials (Key ID, Service Account ID, and Private Key) are required if using this authentication method.",
      "sensitive": true,
      "required": false
    },
    "tracker_sa_private_key": {
      "type": "string",
      "title": "Service Account Private Key",
      "description": "Service account private key. All three service account credentials (Key ID, Service Account ID, and Private Key) are required if using this authentication method.",
      "sensitive": true,
      "required": false
    },
    "tracker_cloud_org_id": {
      "type": "string",
      "title": "Yandex Cloud Organization ID",
      "description": "Your Yandex Cloud organization ID. One of the organization IDs (Cloud or 360) is required.",
      "required": false
    },
    "tracker_org_id": {
      "type": "string",
      "title": "Yandex 360 Organization ID",
      "description": "Your Yandex 360 organization ID. One of the organization IDs (Cloud or 360) is required.",
      "required": false
    },
    "transport": {
      "type": "string",
      "title": "MCP Server Transport",
      "description": "Transport option for the MCP server (e.g., stdio, http). Defaults to stdio if not specified.",
      "default": "stdio",
      "required": false
    }
  },
  "readme": "# Yandex Tracker MCP Server\n\n![PyPI - Version](https://img.shields.io/pypi/v/yandex-tracker-mcp)\n![Test Workflow](https://github.com/aikts/yandex-tracker-mcp/actions/workflows/test.yml/badge.svg?branch=main)\n![Docker Workflow](https://github.com/aikts/yandex-tracker-mcp/actions/workflows/docker.yml/badge.svg?branch=main)\n![Package Workflow](https://github.com/aikts/yandex-tracker-mcp/actions/workflows/package.yml/badge.svg?branch=main)\n[![smithery badge](https://smithery.ai/badge/@aikts/yandex-tracker-mcp)](https://smithery.ai/server/@aikts/yandex-tracker-mcp)\n\nA comprehensive Model Context Protocol (MCP) server that enables AI assistants to interact with Yandex Tracker APIs. This server provides secure, authenticated access to Yandex Tracker issues, queues, comments, worklogs, and search functionality with optional Redis caching for improved performance.\n\n<a href=\"https://glama.ai/mcp/servers/@aikts/yandex-tracker-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@aikts/yandex-tracker-mcp/badge\" />\n</a>\n\nDocumentation in Russian is available [here](README_ru.md) / Документация на русском языке доступна [здесь](README_ru.md).\n\n## Features\n\n- **Complete Queue Management**: List and access all available Yandex Tracker queues with pagination support and tag retrieval\n- **User Management**: Retrieve user account information, including login details, email addresses, license status, and organizational data\n- **Issue Operations**: Retrieve detailed issue information, comments, related links, worklogs, and attachments\n- **Field Management**: Access global fields, queue-specific local fields, statuses, and issue types\n- **Advanced Query Language**: Full Yandex Tracker Query Language support with complex filtering, sorting, and date functions\n- **Performance Caching**: Optional Redis caching layer for improved response times\n- **Security Controls**: Configurable queue access restrictions and secure token handling\n- **Multiple Transport Options**: Support for stdio, SSE (deprecated), and HTTP transports for flexible integration\n- **OAuth 2.0 Authentication**: Dynamic token-based authentication with automatic refresh support as an alternative to static API tokens\n- **Organization Support**: Compatible with both standard and cloud organization IDs\n\n### Organization ID Configuration\n\nChoose one of the following based on your Yandex organization type:\n\n- **Yandex Cloud Organization**: Use `TRACKER_CLOUD_ORG_ID` env var later for Yandex Cloud-managed organizations\n- **Yandex 360 Organization**: Use `TRACKER_ORG_ID` env var later for Yandex 360 organizations\n\nYou can find your organization ID in the Yandex Tracker URL or organization settings.\n\n\n## MCP Client Configuration\n\n### Installing extension in Claude Desktop\n\nYandex Tracker MCP Server can be one-click installed in Claude Desktop as and [extension](https://www.anthropic.com/engineering/desktop-extensions).\n\n#### Prerequisites\nThere is only one requirement - python 3.12 must be installed on your system.\n\nFor macOS users, you can install it using the following command:\n\n```bash\nbrew install python@3.12\n```\n\n#### Installation\n\n1. Download the `*.dxt` file from [GitHub Releases](https://github.com/aikts/yandex-tracker-mcp/releases/latest) for your OS and platform.\n2. Double-click the downloaded file to install it in Claude Desktop. ![img.png](images/claude-desktop-install.png)\n3. Provide your Yandex Tracker OAuth token when prompted. ![img.png](images/claude-desktop-config.png)\n4. Make sure extension is enabled - now you may use this MCP Server.\n\n### Manual installation\n\n#### Prerequisites\n\n- [uv](https://docs.astral.sh/uv/getting-started/installation/) installed globally\n- Valid Yandex Tracker API token with appropriate permissions\n\nThe following sections show how to configure the MCP server for different AI clients. You can use either `uvx yandex-tracker-mcp@latest` or the Docker image `ghcr.io/aikts/yandex-tracker-mcp:latest`. Both require these environment variables:\n\n- Authentication (one of the following):\n  - `TRACKER_TOKEN` - Your Yandex Tracker OAuth token\n  - `TRACKER_IAM_TOKEN` - Your IAM token\n  - `TRACKER_SA_KEY_ID`, `TRACKER_SA_SERVICE_ACCOUNT_ID`, `TRACKER_SA_PRIVATE_KEY` - Service account credentials\n- `TRACKER_CLOUD_ORG_ID` or `TRACKER_ORG_ID` - Your Yandex Cloud (or Yandex 360) organization ID\n\n<details>\n<summary><strong>Claude Desktop</strong></summary>\n\n**Configuration file path:**\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n**Using uvx:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><strong>Claude Code</strong></summary>\n\n**Using uvx:**\n```bash\nclaude mcp add yandex-tracker uvx yandex-tracker-mcp@latest \\\n  -e TRACKER_TOKEN=your_tracker_token_here \\\n  -e TRACKER_CLOUD_ORG_ID=your_cloud_org_id_here \\\n  -e TRACKER_ORG_ID=your_org_id_here \\\n  -e TRANSPORT=stdio\n```\n\n**Using Docker:**\n```bash\nclaude mcp add yandex-tracker docker \"run --rm -i -e TRACKER_TOKEN=your_tracker_token_here -e TRACKER_CLOUD_ORG_ID=your_cloud_org_id_here -e TRACKER_ORG_ID=your_org_id_here -e TRANSPORT=stdio ghcr.io/aikts/yandex-tracker-mcp:latest\"\n```\n\n</details>\n\n<details>\n<summary><strong>Cursor</strong></summary>\n\n**Configuration file path:**\n- Project-specific: `.cursor/mcp.json` in your project directory\n- Global: `~/.cursor/mcp.json`\n\n**Using uvx:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><strong>Windsurf</strong></summary>\n\n**Configuration file path:**\n- `~/.codeium/windsurf/mcp_config.json`\n\nAccess via: Windsurf Settings → Cascade tab → Model Context Protocol (MCP) Servers → \"View raw config\"\n\n**Using uvx:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><strong>Zed</strong></summary>\n\n**Configuration file path:**\n- `~/.config/zed/settings.json`\n\nAccess via: `Cmd+,` (macOS) or `Ctrl+,` (Linux/Windows) or command palette: \"zed: open settings\"\n\n**Note:** Requires Zed Preview version for MCP support.\n\n**Using uvx:**\n```json\n{\n  \"context_servers\": {\n    \"yandex-tracker\": {\n      \"source\": \"custom\",\n      \"command\": {\n        \"path\": \"uvx\",\n        \"args\": [\"yandex-tracker-mcp@latest\"],\n        \"env\": {\n          \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n          \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n          \"TRACKER_ORG_ID\": \"your_org_id_here\"\n        }\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"context_servers\": {\n    \"yandex-tracker\": {\n      \"source\": \"custom\",\n      \"command\": {\n        \"path\": \"docker\",\n        \"args\": [\n          \"run\", \"--rm\", \"-i\",\n          \"-e\", \"TRACKER_TOKEN\",\n          \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n          \"-e\", \"TRACKER_ORG_ID\",\n          \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n        ],\n        \"env\": {\n          \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n          \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n          \"TRACKER_ORG_ID\": \"your_org_id_here\"\n        }\n      }\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><strong>GitHub Copilot (VS Code)</strong></summary>\n\n**Configuration file path:**\n- Workspace: `.vscode/mcp.json` in your project directory\n- Global: VS Code `settings.json`\n\n**Option 1: Workspace Configuration (Recommended for security)**\n\nCreate `.vscode/mcp.json`:\n\n**Using uvx:**\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"tracker-token\",\n      \"description\": \"Yandex Tracker Token\",\n      \"password\": true\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"cloud-org-id\",\n      \"description\": \"Yandex Cloud Organization ID\"\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"org-id\",\n      \"description\": \"Yandex Tracker Organization ID (optional)\"\n    }\n  ],\n  \"servers\": {\n    \"yandex-tracker\": {\n      \"type\": \"stdio\",\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"${input:tracker-token}\",\n        \"TRACKER_CLOUD_ORG_ID\": \"${input:cloud-org-id}\",\n        \"TRACKER_ORG_ID\": \"${input:org-id}\",\n        \"TRANSPORT\": \"stdio\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"tracker-token\",\n      \"description\": \"Yandex Tracker Token\",\n      \"password\": true\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"cloud-org-id\",\n      \"description\": \"Yandex Cloud Organization ID\"\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"org-id\",\n      \"description\": \"Yandex Tracker Organization ID (optional)\"\n    }\n  ],\n  \"servers\": {\n    \"yandex-tracker\": {\n      \"type\": \"stdio\",\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"${input:tracker-token}\",\n        \"TRACKER_CLOUD_ORG_ID\": \"${input:cloud-org-id}\",\n        \"TRACKER_ORG_ID\": \"${input:org-id}\",\n        \"TRANSPORT\": \"stdio\"\n      }\n    }\n  }\n}\n```\n\n**Option 2: Global Configuration**\n\nAdd to VS Code `settings.json`:\n\n**Using uvx:**\n```json\n{\n  \"github.copilot.chat.mcp.servers\": {\n    \"yandex-tracker\": {\n      \"type\": \"stdio\",\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"github.copilot.chat.mcp.servers\": {\n    \"yandex-tracker\": {\n      \"type\": \"stdio\",\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><strong>Other MCP-Compatible Clients</strong></summary>\n\nFor other MCP-compatible clients, use the standard MCP server configuration format:\n\n**Using uvx:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n**Important Notes:**\n- Replace placeholder values with your actual credentials\n- Restart your AI client after configuration changes\n- Ensure `uvx` is installed and available in your system PATH\n- For production use, consider using environment variables instead of hardcoding tokens\n\n## Available MCP Tools\n\nThe server exposes the following tools through the MCP protocol:\n\n### Queue Management\n- **`queues_get_all`**: List all available Yandex Tracker queues\n  - Returns paginated queue information\n  - Respects `TRACKER_LIMIT_QUEUES` restrictions\n\n- **`queue_get_local_fields`**: Get local fields for a specific queue\n  - Parameters: `queue_id` (string, queue key like \"SOMEPROJECT\")\n  - Returns queue-specific custom fields with id, name, and key\n  - Respects `TRACKER_LIMIT_QUEUES` restrictions\n\n- **`queue_get_tags`**: Get all tags for a specific queue\n  - Parameters: `queue_id` (string, queue key like \"SOMEPROJECT\")\n  - Returns list of available tags in the specified queue\n  - Respects `TRACKER_LIMIT_QUEUES` restrictions\n\n- **`queue_get_versions`**: Get all versions for a specific queue\n  - Parameters: `queue_id` (string, queue key like \"SOMEPROJECT\")\n  - Returns list of available versions in the specified queue with details like name, description, dates, and status\n  - Respects `TRACKER_LIMIT_QUEUES` restrictions\n\n### User Management\n- **`users_get_all`**: Get information about user accounts registered in the organization\n  - Parameters:\n    - `per_page` (optional): Number of users per page (default: 50)\n    - `page` (optional): Page number to return (default: 1)\n  - Returns paginated list of users with login, email, license status, and organizational details\n  - Includes user metadata such as external status, dismissal status, and notification preferences\n\n- **`user_get`**: Get information about a specific user by login or UID\n  - Parameters: `user_id` (string, user login like \"john.doe\" or UID like \"12345\")\n  - Returns detailed user information including login, email, license status, and organizational details\n  - Supports both user login names and numeric user IDs for flexible identification\n\n- **`user_get_current`**: Get information about the current authenticated user\n  - No parameters required\n  - Returns detailed information about the user associated with the current authentication token\n  - Includes login, email, display name, and organizational details for the authenticated user\n\n### Field Management\n- **`get_global_fields`**: Get all global fields available in Yandex Tracker\n  - Returns complete list of global fields that can be used in issues\n  - Includes field schema, type information, and configuration\n\n### Status and Type Management\n- **`get_statuses`**: Get all available issue statuses\n  - Returns complete list of issue statuses that can be assigned\n  - Includes status IDs, names, and type information\n\n- **`get_issue_types`**: Get all available issue types\n  - Returns complete list of issue types for creating/updating issues\n  - Includes type IDs, names, and configuration details\n\n- **`get_priorities`**: Get all available issue priorities\n  - Returns complete list of priorities that can be assigned to issues\n  - Includes priority keys, names, and order information\n\n### Issue Operations\n- **`issue_get`**: Retrieve detailed issue information by ID\n  - Parameters:\n    - `issue_id` (string, format: \"QUEUE-123\")\n    - `include_description` (boolean, optional, default: true): Whether to include issue description in the result. Can be large, so use only when needed.\n  - Returns complete issue data including status, assignee, description, etc.\n\n- **`issue_get_url`**: Generate web URL for an issue\n  - Parameters: `issue_id` (string)\n  - Returns: `https://tracker.yandex.ru/{issue_id}`\n\n- **`issue_get_comments`**: Fetch all comments for an issue\n  - Parameters: `issue_id` (string)\n  - Returns chronological list of comments with metadata\n\n- **`issue_get_links`**: Get related issue links\n  - Parameters: `issue_id` (string)\n  - Returns links to related, blocked, or duplicate issues\n\n- **`issue_get_worklogs`**: Retrieve worklog entries\n  - Parameters: `issue_ids` (array of strings)\n  - Returns time tracking data for specified issues\n\n- **`issue_get_attachments`**: Get attachments for an issue\n  - Parameters: `issue_id` (string, format: \"QUEUE-123\")\n  - Returns list of attachments with metadata for the specified issue\n\n- **`issue_get_checklist`**: Get checklist items of an issue\n  - Parameters: `issue_id` (string, format: \"QUEUE-123\")\n  - Returns list of checklist items including text, status, assignee, and deadline information\n\n### Search and Discovery\n- **`issues_find`**: Search issues using [Yandex Tracker Query Language](https://yandex.ru/support/tracker/ru/user/query-filter)\n  - Parameters:\n    - `query` (required): Query string using Yandex Tracker Query Language syntax\n    - `include_description` (boolean, optional, default: false): Whether to include issue description in the issues result. Can be large, so use only when needed.\n    - `fields` (list of strings, optional): Fields to include in the response. Helps optimize context window usage by selecting only needed fields. If not specified, returns all available fields.\n    - `page` (optional): Page number for pagination (default: 1)\n    - `per_page` (optional): Number of items per page (default: 100). May be decreased if results exceed context window.\n  - Returns up to specified number of issues per page\n\n- **`issues_count`**: Count issues matching a query using [Yandex Tracker Query Language](https://yandex.ru/support/tracker/ru/user/query-filter)\n  - Parameters:\n    - `query` (required): Query string using Yandex Tracker Query Language syntax\n  - Returns the total count of issues matching the specified criteria\n  - Supports all query language features: field filtering, date functions, logical operators, and complex expressions\n  - Useful for analytics, reporting, and understanding issue distribution without retrieving full issue data\n\n\n## http Transport\n\nThe MCP server can also be run in streamable-http mode for web-based integrations or when stdio transport is not suitable.\n\n### streamable-http Mode Environment Variables\n\n```env\n# Required - Set transport to streamable-http mode\nTRANSPORT=streamable-http\n\n# Server Configuration\nHOST=0.0.0.0  # Default: 0.0.0.0 (all interfaces)\nPORT=8000     # Default: 8000\n```\n\n### Starting the streamable-http Server\n\n```bash\n# Basic streamable-http server startup\nTRANSPORT=streamable-http uvx yandex-tracker-mcp@latest\n\n# With custom host and port\nTRANSPORT=streamable-http \\\nHOST=localhost \\\nPORT=9000 \\\nuvx yandex-tracker-mcp@latest\n\n# With all environment variables\nTRANSPORT=streamable-http \\\nHOST=0.0.0.0 \\\nPORT=8000 \\\nTRACKER_TOKEN=your_token \\\nTRACKER_CLOUD_ORG_ID=your_org_id \\\nuvx yandex-tracker-mcp@latest\n```\n\nYou may skip configuring `TRACKER_CLOUD_ORG_ID` or `TRACKER_ORG_ID` if you are using the following format when connecting to MCP Server (example for Claude Code):\n\n```bash\nclaude mcp add --transport http yandex-tracker \"http://localhost:8000/mcp/?cloudOrgId=your_cloud_org_id&\"\n```\n\nor\n\n```bash\nclaude mcp add --transport http yandex-tracker \"http://localhost:8000/mcp/?orgId=org_id&\"\n```\n\nYou may also skip configuring global `TRACKER_TOKEN` environment variable if you choose to use OAuth 2.0 authentication (see below).\n\n### OAuth 2.0 Authentication\n\nThe Yandex Tracker MCP Server supports OAuth 2.0 authentication as a secure alternative to static API tokens. When configured, the server acts as an OAuth provider, facilitating authentication between your MCP client and Yandex OAuth services.\n\n#### How OAuth Works\n\nThe MCP server implements a standard OAuth 2.0 authorization code flow:\n\n1. **Client Registration**: Your MCP client registers with the server to obtain client credentials\n2. **Authorization**: Users are redirected to Yandex OAuth to authenticate\n3. **Token Exchange**: The server exchanges authorization codes for access tokens\n4. **API Access**: Clients use bearer tokens for all API requests\n5. **Token Refresh**: Expired tokens can be refreshed without re-authentication\n\n```\nMCP Client → MCP Server → Yandex OAuth → User Authentication\n    ↑                                           ↓\n    └────────── Access Token ←─────────────────┘\n```\n\n#### OAuth Configuration\n\nTo enable OAuth authentication, set the following environment variables:\n\n```env\n# Enable OAuth mode\nOAUTH_ENABLED=true\n\n# Yandex OAuth Application Credentials (required for OAuth)\nOAUTH_CLIENT_ID=your_yandex_oauth_app_id\nOAUTH_CLIENT_SECRET=your_yandex_oauth_app_secret\n\n# Public URL of your MCP server (required for OAuth callbacks)\nMCP_SERVER_PUBLIC_URL=https://your-mcp-server.example.com\n\n# Optional OAuth settings\nOAUTH_SERVER_URL=https://oauth.yandex.ru  # Default Yandex OAuth server\n\n# When OAuth is enabled, TRACKER_TOKEN becomes optional\n```\n\n#### Setting Up Yandex OAuth Application\n\n1. Go to [Yandex OAuth](https://oauth.yandex.ru/) and create a new application\n2. Set the callback URL to: `{MCP_SERVER_PUBLIC_URL}/oauth/yandex/callback`\n3. Request the following permissions:\n   - `tracker:read` - Read permissions for Tracker\n   - `tracker:write` - Write permissions for Tracker\n4. Save your Client ID and Client Secret\n\n#### OAuth vs Static Token Authentication\n\n| Feature          | OAuth                          | Static Token               |\n|------------------|--------------------------------|----------------------------|\n| Security         | Dynamic tokens with expiration | Long-lived static tokens   |\n| User Experience  | Interactive login flow         | One-time configuration     |\n| Token Management | Automatic refresh              | Manual rotation            |\n| Access Control   | Per-user authentication        | Shared token               |\n| Setup Complexity | Requires OAuth app setup       | Simple token configuration |\n\n#### OAuth Mode Limitations\n\n- Currently, the OAuth mode requires the MCP server to be publicly accessible for callback URLs\n- OAuth mode is best suited for interactive clients that support web-based authentication flows\n\n#### Using OAuth with MCP Clients\n\nWhen OAuth is enabled, MCP clients will need to:\n1. Support OAuth 2.0 authorization code flow\n2. Handle token refresh when access tokens expire\n3. Store refresh tokens securely for persistent authentication\n\n**Note**: Not all MCP clients currently support OAuth authentication. Check your client's documentation for OAuth compatibility.\n\nExample configuration for Claude Code:\n\n```bash\nclaude mcp add --transport http yandex-tracker https://your-mcp-server.example.com/mcp/ -s user\n```\n\n#### OAuth Data Storage\n\nThe MCP server supports two different storage backends for OAuth data (client registrations, access tokens, refresh tokens, and authorization states):\n\n##### InMemory Store (Default)\n\nThe in-memory store keeps all OAuth data in server memory. This is the default option and requires no additional configuration.\n\n**Characteristics:**\n- **Persistence**: Data is lost when the server restarts\n- **Performance**: Very fast access since data is stored in memory\n- **Scalability**: Limited to single server instance\n- **Setup**: No additional dependencies required\n- **Best for**: Development, testing, or single-instance deployments where losing OAuth sessions on restart is acceptable\n\n**Configuration:**\n```env\nOAUTH_STORE=memory  # Default value, can be omitted\n```\n\n##### Redis Store\n\nThe Redis store provides persistent storage for OAuth data using a Redis database. This ensures OAuth sessions survive server restarts and enables multi-instance deployments.\n\n**Characteristics:**\n- **Persistence**: Data persists across server restarts\n- **Performance**: Fast access with network overhead\n- **Scalability**: Supports multiple server instances sharing the same Redis database\n- **Setup**: Requires Redis server installation and configuration\n- **Best for**: Production deployments, high availability setups, or when OAuth sessions must persist\n\n**Configuration:**\n```env\n# Enable Redis store for OAuth data\nOAUTH_STORE=redis\n\n# Redis connection settings (same as used for tools caching)\nREDIS_ENDPOINT=localhost                  # Default: localhost\nREDIS_PORT=6379                           # Default: 6379\nREDIS_DB=0                                # Default: 0\nREDIS_PASSWORD=your_redis_password        # Optional: Redis password\nREDIS_POOL_MAX_SIZE=10                    # Default: 10\n```\n\n**Storage Behavior:**\n- **Client Information**: Stored persistently\n- **OAuth States**: Stored with TTL (time-to-live) for security\n- **Authorization Codes**: Stored with TTL and automatically cleaned up after use\n- **Access Tokens**: Stored with automatic expiration based on token lifetime\n- **Refresh Tokens**: Stored persistently until revoked\n- **Key Namespacing**: Uses `oauth:*` prefixes to avoid conflicts with other Redis data\n\n**Important Notes:**\n- Both stores use the same Redis connection settings as the tools caching system\n- When using Redis store, ensure your Redis instance is properly secured and accessible\n- The `OAUTH_STORE` setting only affects OAuth data storage; tools caching uses `TOOLS_CACHE_ENABLED`\n- Redis store uses JSON serialization for better cross-language compatibility and debugging\n\n## Authentication\n\nYandex Tracker MCP Server supports multiple authentication methods with a clear priority order. The server will use the first available authentication method based on this hierarchy:\n\n### Authentication Priority Order\n\n1. **Dynamic OAuth Token** (highest priority)\n   - When OAuth is enabled and a user authenticates via OAuth flow\n   - Tokens are dynamically obtained and refreshed per user session\n   - Required env vars: `OAUTH_ENABLED=true`, `OAUTH_CLIENT_ID`, `OAUTH_CLIENT_SECRET`, `MCP_SERVER_PUBLIC_URL`\n\n2. **Static OAuth Token**\n   - Traditional OAuth token provided via environment variable\n   - Single token used for all requests\n   - Required env var: `TRACKER_TOKEN` (your OAuth token)\n\n3. **Static IAM Token**\n   - IAM (Identity and Access Management) token for service-to-service authentication\n   - Suitable for automated systems and CI/CD pipelines\n   - Required env var: `TRACKER_IAM_TOKEN` (your IAM token)\n\n4. **Dynamic IAM Token** (lowest priority)\n   - Automatically retrieved using service account credentials\n   - Token is fetched and refreshed automatically\n   - Required env vars: `TRACKER_SA_KEY_ID`, `TRACKER_SA_SERVICE_ACCOUNT_ID`, `TRACKER_SA_PRIVATE_KEY`\n\n### Authentication Scenarios\n\n#### Scenario 1: OAuth with Dynamic Tokens (Recommended for Interactive Use)\n```env\n# Enable OAuth mode\nOAUTH_ENABLED=true\nOAUTH_CLIENT_ID=your_oauth_app_id\nOAUTH_CLIENT_SECRET=your_oauth_app_secret\nMCP_SERVER_PUBLIC_URL=https://your-server.com\n\n# Organization ID (choose one)\nTRACKER_CLOUD_ORG_ID=your_cloud_org_id  # or TRACKER_ORG_ID\n```\n\n#### Scenario 2: Static OAuth Token (Simple Setup)\n```env\n# OAuth token\nTRACKER_TOKEN=your_oauth_token\n\n# Organization ID (choose one)\nTRACKER_CLOUD_ORG_ID=your_cloud_org_id  # or TRACKER_ORG_ID\n```\n\n#### Scenario 3: Static IAM Token\n```env\n# IAM token\nTRACKER_IAM_TOKEN=your_iam_token\n\n# Organization ID (choose one)\nTRACKER_CLOUD_ORG_ID=your_cloud_org_id  # or TRACKER_ORG_ID\n```\n\n#### Scenario 4: Dynamic IAM Token with Service Account\n```env\n# Service account credentials\nTRACKER_SA_KEY_ID=your_key_id\nTRACKER_SA_SERVICE_ACCOUNT_ID=your_service_account_id\nTRACKER_SA_PRIVATE_KEY=your_private_key\n\n# Organization ID (choose one)\nTRACKER_CLOUD_ORG_ID=your_cloud_org_id  # or TRACKER_ORG_ID\n```\n\n### Important Notes\n\n- The server checks authentication methods in the order listed above\n- Only one authentication method will be used at a time\n- For production use, dynamic tokens (OAuth or IAM) are recommended for better security\n- IAM tokens have a shorter lifetime than OAuth tokens and may need more frequent renewal\n- When using service accounts, ensure the account has appropriate permissions for Yandex Tracker\n\n## Configuration\n\n### Environment Variables\n\n```env\n# Authentication (use one of the following methods)\n# Method 1: OAuth Token\nTRACKER_TOKEN=your_yandex_tracker_oauth_token\n\n# Method 2: IAM Token\nTRACKER_IAM_TOKEN=your_iam_token\n\n# Method 3: Service Account (for dynamic IAM token)\nTRACKER_SA_KEY_ID=your_key_id                    # Service account key ID\nTRACKER_SA_SERVICE_ACCOUNT_ID=your_sa_id        # Service account ID\nTRACKER_SA_PRIVATE_KEY=your_private_key          # Service account private key\n\n# Organization Configuration (choose one)\nTRACKER_CLOUD_ORG_ID=your_cloud_org_id    # For Yandex Cloud organizations\nTRACKER_ORG_ID=your_org_id                # For Yandex 360 organizations\n\n# API Configuration (optional)\nTRACKER_API_BASE_URL=https://api.tracker.yandex.net  # Default: https://api.tracker.yandex.net\n\n# Security - Restrict access to specific queues (optional)\nTRACKER_LIMIT_QUEUES=PROJ1,PROJ2,DEV      # Comma-separated queue keys\n\n# Server Configuration\nHOST=0.0.0.0                              # Default: 0.0.0.0\nPORT=8000                                 # Default: 8000\nTRANSPORT=stdio                           # Options: stdio, streamable-http, sse\n\n# Redis connection settings (used for caching and OAuth store)\nREDIS_ENDPOINT=localhost                  # Default: localhost\nREDIS_PORT=6379                           # Default: 6379\nREDIS_DB=0                                # Default: 0\nREDIS_PASSWORD=your_redis_password        # Optional: Redis password\nREDIS_POOL_MAX_SIZE=10                    # Default: 10\n\n# Tools caching configuration (optional)\nTOOLS_CACHE_ENABLED=true                  # Default: false\nTOOLS_CACHE_REDIS_TTL=3600                # Default: 3600 seconds (1 hour)\n\n# OAuth 2.0 Authentication (optional)\nOAUTH_ENABLED=true                        # Default: false\nOAUTH_STORE=redis                         # Options: memory, redis (default: memory)\nOAUTH_SERVER_URL=https://oauth.yandex.ru  # Default: https://oauth.yandex.ru\nOAUTH_CLIENT_ID=your_oauth_client_id      # Required when OAuth enabled\nOAUTH_CLIENT_SECRET=your_oauth_secret     # Required when OAuth enabled\nMCP_SERVER_PUBLIC_URL=https://your.server.com  # Required when OAuth enabled\nTRACKER_READ_ONLY=true                    # Default: false - Limit OAuth to read-only permissions\n```\n\n## Docker Deployment\n\n### Using Pre-built Image (Recommended)\n\n```bash\n# Using environment file\ndocker run --env-file .env -p 8000:8000 ghcr.io/aikts/yandex-tracker-mcp:latest\n\n# With inline environment variables\ndocker run -e TRACKER_TOKEN=your_token \\\n           -e TRACKER_CLOUD_ORG_ID=your_org_id \\\n           -p 8000:8000 \\\n           ghcr.io/aikts/yandex-tracker-mcp:latest\n```\n\n### Building the Image Locally\n\n```bash\ndocker build -t yandex-tracker-mcp .\n```\n\n### Docker Compose\n\n**Using pre-built image:**\n```yaml\nversion: '3.8'\nservices:\n  mcp-tracker:\n    image: ghcr.io/aikts/yandex-tracker-mcp:latest\n    ports:\n      - \"8000:8000\"\n    environment:\n      - TRACKER_TOKEN=${TRACKER_TOKEN}\n      - TRACKER_CLOUD_ORG_ID=${TRACKER_CLOUD_ORG_ID}\n```\n\n**Building locally:**\n```yaml\nversion: '3.8'\nservices:\n  mcp-tracker:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - TRACKER_TOKEN=${TRACKER_TOKEN}\n      - TRACKER_CLOUD_ORG_ID=${TRACKER_CLOUD_ORG_ID}\n```\n\n### Development Setup\n\n```bash\n# Clone and setup\ngit clone https://github.com/aikts/yandex-tracker-mcp\ncd yandex-tracker-mcp\n\n# Install development dependencies\nuv sync --dev\n\n# Formatting and static checking\nmake\n```\n\n## License\n\nThis project is licensed under the terms specified in the [LICENSE](LICENSE) file.\n\n## Support\n\nFor issues and questions:\n- Review Yandex Tracker API documentation\n- Submit issues at https://github.com/aikts/yandex-tracker-mcp/issues\n",
  "category": "Development",
  "quality_score": 62,
  "archestra_config": {
    "client_config_permutations": {
      "yandex-tracker-mcp": {
        "command": "uvx",
        "args": ["yandex-tracker-mcp@latest"],
        "env": {
          "TRACKER_TOKEN": "your_tracker_token_here",
          "TRACKER_CLOUD_ORG_ID": "your_cloud_org_id_here",
          "TRACKER_ORG_ID": "your_org_id_here"
        }
      },
      "yandex-tracker-mcp-docker": {
        "command": "docker",
        "args": [
          "run",
          "--rm",
          "-i",
          "-e",
          "TRACKER_TOKEN",
          "-e",
          "TRACKER_CLOUD_ORG_ID",
          "-e",
          "TRACKER_ORG_ID",
          "ghcr.io/aikts/yandex-tracker-mcp:latest"
        ],
        "env": {
          "TRACKER_TOKEN": "your_tracker_token_here",
          "TRACKER_CLOUD_ORG_ID": "your_cloud_org_id_here",
          "TRACKER_ORG_ID": "your_org_id_here"
        }
      },
      "yandex-tracker-mcp-stdio": {
        "command": "uvx",
        "args": ["yandex-tracker-mcp@latest"],
        "env": {
          "TRACKER_TOKEN": "your_tracker_token_here",
          "TRACKER_CLOUD_ORG_ID": "your_cloud_org_id_here",
          "TRACKER_ORG_ID": "your_org_id_here",
          "TRANSPORT": "stdio"
        }
      },
      "yandex-tracker-mcp-docker-stdio": {
        "command": "docker",
        "args": [
          "run",
          "--rm",
          "-i",
          "-e",
          "TRACKER_TOKEN",
          "-e",
          "TRACKER_CLOUD_ORG_ID",
          "-e",
          "TRACKER_ORG_ID",
          "-e",
          "TRANSPORT",
          "ghcr.io/aikts/yandex-tracker-mcp:latest"
        ],
        "env": {
          "TRACKER_TOKEN": "your_tracker_token_here",
          "TRACKER_CLOUD_ORG_ID": "your_cloud_org_id_here",
          "TRACKER_ORG_ID": "your_org_id_here",
          "TRANSPORT": "stdio"
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "aikts",
    "repo": "yandex-tracker-mcp",
    "url": "https://github.com/aikts/yandex-tracker-mcp",
    "name": "yandex-tracker-mcp",
    "path": null,
    "stars": 14,
    "contributors": 1,
    "issues": 1,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "aaf44759fd3141d653cab8ae02f8c7ab11968729"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:36.782Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": true
  },
  "dependencies": [
    {
      "name": "aiocache",
      "importance": 7
    },
    {
      "name": "aiohttp",
      "importance": 8
    },
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "pydantic",
      "importance": 8
    },
    {
      "name": "pydantic-settings",
      "importance": 8
    },
    {
      "name": "python-dateutil",
      "importance": 4
    },
    {
      "name": "yandexcloud",
      "importance": 9
    },
    {
      "name": "yarl",
      "importance": 4
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"yandex-tracker-mcp\"\nversion = \"0.4.1\"\ndescription = \"Yandex Tracker MCP Server\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\ndependencies = [\n    \"aiocache[redis]>=0.12.3\",\n    \"aiohttp>=3.11.18\",\n    \"mcp[cli]>=1.12.3\",\n    \"pydantic>=2.11.3\",\n    \"pydantic-settings>=2.8.1\",\n    \"python-dateutil>=2.9.0.post0\",\n    \"yandexcloud>=0.353.0\",\n    \"yarl>=1.20.0\",\n]\n\n[tool.setuptools.packages.find]\nwhere = [\".\"]\ninclude = [\"mcp_tracker*\"]\n\n[project.scripts]\nyandex-tracker-mcp = \"mcp_tracker.__main__:main\"\n\n[dependency-groups]\ndev = [\n    \"mypy>=1.8.0\",\n    \"ruff>=0.8.0\",\n    \"pytest>=8.0.0\",\n    \"pytest-asyncio>=0.24.0\",\n    \"pytest-cov>=5.0.0\",\n    \"pytest-mock>=3.14.0\",\n    \"aioresponses>=0.7.7\",\n]\n\n[tool.mypy]\nplugins = [\n    \"pydantic.mypy\"\n]\nexclude = [\n    'dxt-lib',\n]\n\n[[tool.mypy.overrides]]\nmodule = '*.*'\nignore_missing_imports = true\ncheck_untyped_defs = true\nenable_error_code = 'ignore-without-code'\n\n[tool.ruff]\n\n[tool.ruff.format]\n# Аналогично black, двойные кавычки\nquote-style = \"double\"\n\n# Аналогично black, пробелы вместо табов\nindent-style = \"space\"\n\n# Аналогично black, уважаем trailing commas\nskip-magic-trailing-comma = false\n\n# Аналогично black, автоматически определяем подходящее окончание строки.\nline-ending = \"auto\"\n\n[tool.ruff.lint]\n# Список кодов или префиксов правил, которые следует считать исправляемыми. (https://docs.astral.sh/ruff/settings/#fixable)\n# По умолчанию все правила считаются исправляемыми.\nfixable = [\"I\", \"RUF022\", \"RUF023\", \"F401\"]\npreview = true\n\nselect = [\n    \"E\",   # pycodestyle errors\n    \"W\",   # pycodestyle warnings\n    \"F\",   # pyflakes\n    \"I\",   # isort\n    \"C\",   # flake8-comprehensions\n    \"B\",   # flake8-bugbear\n    \"T20\", # flake8-print\n]\nignore = [\n    \"E501\", # line too long, handled by black\n    \"B008\", # do not perform function calls in argument defaults\n    \"C901\", # too complex\n]\n\n[tool.ruff.lint.isort]\n# Позволяет использовать as в комбинации с группировкой  (https://docs.astral.sh/ruff/settings/#isort-combine-as-imports)\n#from package import (\n#    func1 as foo,\n#    func2 as boo,\n#)\ncombine-as-imports = true\n\n# Воспринимать следующие пакеты в качестве stdlib       (https://docs.astral.sh/ruff/settings/#isort-extra-standard-library)\nextra-standard-library = [\"typing_extensions\"]\n\nsection-order = [\n  \"future\",\n  \"standard-library\",\n  \"third-party\",\n  \"first-party\",\n  \"local-folder\"\n]\n\n# Не добавлять пустую строку перед данными секциям      (https://docs.astral.sh/ruff/settings/#isort-no-lines-before)\nno-lines-before = []\n\n[tool.ruff.lint.pep8-naming]\n# если навесить данные декораторы, то можно использовать cls    (https://docs.astral.sh/ruff/settings/#pep8-naming-classmethod-decorators)\n# в качестве первого аргумента.\nclassmethod-decorators = [\"cached_classproperty\", \"classproperty\"]\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_classes = [\"Test*\"]\npython_functions = [\"test_*\"]\nasyncio_mode = \"auto\"\naddopts = [\n    \"-v\",\n    \"--strict-markers\",\n    \"--tb=short\",\n    \"--cov=mcp_tracker\",\n    \"--cov-report=term-missing\",\n    \"--cov-report=html\",\n    \"--cov-report=xml\",\n]\nmarkers = [\n    \"slow: marks tests as slow (deselect with '-m \\\"not slow\\\"')\",\n    \"integration: marks tests as integration tests\",\n    \"unit: marks tests as unit tests\",\n]\n"
}
