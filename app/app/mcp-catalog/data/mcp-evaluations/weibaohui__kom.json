{
  "dxt_version": "0.1.0",
  "name": "weibaohui__kom",
  "display_name": "kom",
  "version": "1.0.0",
  "description": "kom 是一个用于 Kubernetes 操作的工具，SDK级的kubectl、client-go的使用封装。并且支持作为管理k8s 的 MCP server。 它提供了一系列功能来管理 Kubernetes 资源，包括创建、更新、删除和获取资源，甚至使用SQL查询k8s资源。这个项目支持多种 Kubernetes 资源类型的操作，并能够处理自定义资源定义（CRD）。 通过使用 kom，你可以轻松地进行资源的增删改查和日志获取以及操作POD内文件等动作。",
  "author": {
    "name": "weibaohui"
  },
  "server": {
    "type": "binary",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "unknown",
      "args": [],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "# Kom - Kubernetes Operations Manager\n\n[English](README_en.md) | [中文](README.md)\n[![kom](https://img.shields.io/badge/License-MIT-blue?style=flat-square)](https://github.com/weibaohui/kom/blob/master/LICENSE)\n\n\n## 简介\n\n`kom` 是一个用于 Kubernetes 操作的工具，相当于SDK级的kubectl、client-go的使用封装。\n它提供了一系列功能来管理 Kubernetes 资源，包括创建、更新、删除和获取资源。这个项目支持多种 Kubernetes 资源类型的操作，并能够处理自定义资源定义（CRD）。\n通过使用 `kom`，你可以轻松地进行资源的增删改查和日志获取以及操作POD内文件等动作，甚至可以使用SQL语句来查询、管理k8s资源。\n\n## **特点**\n1. 简单易用：kom 提供了丰富的功能，包括创建、更新、删除、获取、列表等，包括对内置资源以及CRD资源的操作。\n2. 多集群支持：通过RegisterCluster，你可以轻松地管理多个 Kubernetes 集群。\n3. MCP支持：支持多集群的MCP管理,同时支持stdio、sse两种模式，内置58种工具，支持SSE模式，支持私有化部署，多人共享。支持超过百种组合操作。\n4. 支持跨命名空间：通过kom.Namespace(\"default\",\"kube-system\").List(&items) 跨命名空间查询资源。\n5. 链式调用：kom 提供了链式调用，使得操作资源更加简单和直观。\n6. 支持自定义资源定义（CRD）：kom 支持自定义资源定义（CRD），你可以轻松地定义和操作自定义资源。\n7. 支持回调机制，轻松拓展业务逻辑，而不必跟k8s操作强耦合。\n8. 支持POD内文件操作，轻松上传、下载、删除文件。\n9. 支持高频操作封装，如deployment的restart重启、scale扩缩容、启停等20余项操作功能。\n10. 支持SQL查询k8s资源。select * from pod where metadata.namespace='kube-system' or metadata.namespace='default' order by  metadata.creationTimestamp desc \n11. 支持查询缓存，在高频、批量查询场景下，可设置缓存过期时间，提升查询性能。列表过滤条件不受缓存影响。\n\n\n\n## 示例程序\n**k8m** 是一个轻量级的 Kubernetes 管理工具，它基于kom、amis实现，单文件，支持多平台架构。\n1. **下载**：从 [https://github.com/weibaohui/k8m](https://github.com/weibaohui/k8m) 下载最新版本。\n2. **运行**：使用 `./k8m` 命令启动,访问[http://127.0.0.1:3618](http://127.0.0.1:3618)。\n\n\n\n\n## 安装\n\n```bash\nimport (\n    \"github.com/weibaohui/kom\"\n    \"github.com/weibaohui/kom/callbacks\"\n)\nfunc main() {\n    // 注册回调，务必先注册\n    callbacks.RegisterInit()\n    // 注册集群\n\tdefaultKubeConfig := os.Getenv(\"KUBECONFIG\")\n\tif defaultKubeConfig == \"\" {\n\t\tdefaultKubeConfig = filepath.Join(homedir.HomeDir(), \".kube\", \"config\")\n\t}\n\t_, _ = kom.Clusters().RegisterInCluster()\n\t_, _ = kom.Clusters().RegisterByPathWithID(defaultKubeConfig, \"default\")\n\tkom.Clusters().Show()\n\t// 其他逻辑\n}\n```\n\n## 使用示例\n\n### 0. 多集群 k8s MCP 支持\n同时支持stdio、sse两种模式\n支持多个tools 支持。包括对任意资源的查询列表删除描述操作，以及POD日志读取操作。\n#### 1.集成到代码中\n```go\n// 一行代码启动MCP Server\nmcp.RunMCPServer(\"kom mcp server\", \"0.0.1\", 9096)\n\n\n\n```\n#### 2. 编译\n```shell\n# 源码启动\ngo build main.go \n//编译为kom\n```\n#### 3. 启动\n启动后支持两种模式，一种为stdio，一种sse。\n管理k8s默认使用KUBECONFIG env环境变量。\n```shell\n# 设置KUBECONFIG环境变量\nexport KUBECONFIG = /Users/xxx/.kube/config\n```\n```shell\n# 运行\n./kom \n# MCP Server 访问地址\nhttp://IP:9096/sse\n```\n此时，编译得到的二进制文件，可当做stdio 模式使用。\nhttp://IP:9096/sse 模式，可以当做sse 模式使用。\n\n\n#### 4. 集成到MCP工具中\n支持stdio\\sse 两种方式集成。\n适合MCP工具集成，如Cursor、Claude Desktop(仅支持stdio模式)、Windsurf等，此外也可以使用这些软件的UI操作界面进行添加。\n```json\n{\n  \"mcpServers\": {\n    \"kom\": {\n      \"type\": \"sse\",\n      \"url\": \"http://IP:9096/sse\"\n    }\n  }\n}\n```\n```json\n{\n    \"mcpServers\": {\n        \"k8m\": {\n            \"command\": \"path/to/kom\",\n            \"args\": []\n        }\n    }\n}\n```\n\n####  MCP工具列表（58种）\n\n| 类别                       | 方法                           | 描述                                                                     |\n| -------------------------- | ------------------------------ | ------------------------------------------------------------------------ |\n| **集群管理（1）**          | `list_k8s_clusters`            | 列出所有已注册的Kubernetes集群                                           |\n| **DaemonSet管理（1）**     | `restart_k8s_daemonset`        | 通过集群、命名空间和名称,重启DaemonSet                                   |\n| **部署管理（12）**         | `scale_k8s_deployment`         | 通过集群、命名空间、名称 扩缩容Deployment，设置副本数                    |\n|                            | `restart_k8s_deployment`       | 通过集群、命名空间和名称,重启Deployment                                  |\n|                            | `stop_k8s_deployment`          | 停止Deployment                                                           |\n|                            | `restore_k8s_deployment`       | 恢复Deployment副本数                                                     |\n|                            | `update_k8s_deployment_image_tag` | 更新Deployment中容器的镜像Tag                                          |\n|                            | `get_k8s_deployment_rollout_history` | 查询升级历史                                                             |\n|                            | `undo_k8s_deployment_rollout`  | 回滚                                                                     |\n|                            | `pause_k8s_deployment_rollout` | 暂停升级                                                                 |\n|                            | `resume_k8s_deployment_rollout` | 恢复升级                                                                 |\n|                            | `get_k8s_deployment_rollout_status` | 查询升级状态                                                             |\n|                            | `get_k8s_deployment_hpa_list`  | 查询Deployment的HPA列表                                                  |\n|                            | `list_k8s_deploy_event`        | 列出Deployment相关的事件                                                 |\n| **动态资源管理(含CRD，8)** | `get_k8s_resource`             | 通过集群、命名空间和名称获取Kubernetes资源详情                           |\n|                            | `describe_k8s_resource`        | 通过集群、命名空间和名称获取Kubernetes资源详情                           |\n|                            | `delete_k8s_resource`          | 通过集群、命名空间和名称删除Kubernetes资源                               |\n|                            | `list_k8s_resource`            | 按集群和资源类型列出Kubernetes资源                                       |\n|                            | `annotate_k8s_resource`        | 为Kubernetes资源添加或删除注解                                           |\n|                            | `label_k8s_resource`           | 为Kubernetes资源添加或删除标签                                           |\n|                            | `patch_k8s_resource`           | 通过集群、命名空间和名称更新Kubernetes资源                               |\n|                            | `GetDynamicResource`           | 获取动态资源                                                             |\n| **节点管理（11）**         | `taint_k8s_node`               | 为节点添加污点                                                           |\n|                            | `untaint_k8s_node`             | 为节点移除污点                                                           |\n|                            | `cordon_k8s_node`              | 设置节点为不可调度状态                                                   |\n|                            | `uncordon_k8s_node`            | 设置节点为可调度状态                                                     |\n|                            | `drain_k8s_node`               | 清空节点上的Pod并防止新的Pod调度                                         |\n|                            | `get_k8s_node_ip_usage`        | 查询节点IP资源使用情况                                                   |\n|                            | `list_k8s_node`                | 获取Node列表                                                             |\n|                            | `get_k8s_top_node`             | 获取Node节点CPU和内存资源用量排名列表                                   |\n|                            | `get_k8s_pod_count_running_on_node` | 查询某个节点上运行的Pod数量统计                                       |\n|                            | `get_k8s_node_resource_usage`  | 查询节点资源使用情况统计                                                 |\n|                            | `TaintNodeTool`                | 为节点添加污点                                                           |\n| **事件管理（1）**          | `list_k8s_event`               | 按集群和命名空间列出Kubernetes事件                                       |\n| **Ingress管理（1）**       | `set_default_k8s_ingressclass` | 设置IngressClass为默认                                                   |\n| **Pod 管理（18）**         | `run_command_in_k8s_pod`       | 在Pod内执行命令                                                          |\n|                            | `list_k8s_pod_event`           | 列出Pod相关的事件                                                        |\n|                            | `list_files_in_k8s_pod`        | 获取Pod中指定路径下的文件列表                                           |\n|                            | `list_pod_all_files`           | 获取Pod中指定路径下的所有文件列表，包含子目录                           |\n|                            | `delete_pod_file`              | 删除Pod中的指定文件                                                     |\n|                            | `get_k8s_pod_linked_env`       | 获取Pod运行时的环境变量信息                                             |\n|                            | `get_pod_linked_env_from_yaml` | 通过Pod yaml 定义 获取Pod定义中的环境变量信息                            |\n|                            | `get_k8s_pod_linked_services`  | 获取与Pod关联的Service                                                   |\n|                            | `get_pod_linked_ingresses`     | 获取与Pod关联的Ingress                                                   |\n|                            | `get_pod_linked_endpoints`     | 获取与Pod关联的Endpoints                                                 |\n|                            | `list_k8s_pod`                 | 获取Pod列表                                                              |\n|                            | `get_k8s_top_pod`              | 获取Pod CPU 内存 资源用量排名 列表                                       |\n|                            | `ListPodFilesTool`             | 列出Pod文件                                                              |\n|                            | `ListAllPodFilesTool`          | 列出Pod所有文件                                                          |\n|                            | `DeletePodFileTool`            | 删除Pod文件                                                              |\n|                            | `UploadPodFileTool`            | 上传Pod文件                                                              |\n|                            | `GetPodLogsTool`               | 获取Pod日志                                                              |\n|                            | `describe_k8s_pod`             | 描述Pod容器组                                                            |\n| **存储管理（3）**          | `set_k8s_default_storageclass` | 设置StorageClass为默认                                                   |\n|                            | `get_k8s_storageclass_pvc_count` | 获取StorageClass下的PVC数量                                             |\n|                            | `get_k8s_storageclass_pv_count` | 获取StorageClass下的PV数量                                               |\n| **YAML管理（2）**          | `apply_k8s_yaml`               | 通过YAML创建或更新Kubernetes资源                                         |\n|                            | `delete_k8s_yaml`              | 通过YAML删除Kubernetes资源                                               |\n\n#### 启动命令\n```go\nmcp.RunMCPServer(\"kom mcp server\", \"0.0.1\", 3619)\n```\n \n#### AI工具集成\n\n##### Claude Desktop\n1. 打开Claude Desktop设置面板\n2. 在API配置区域添加MCP Server地址\n3. 启用SSE事件监听功能\n4. 验证连接状态\n```json\n{\n  \"mcpServers\": {\n    \"k8m\": {\n      \"command\": \"path/to/kom\",\n      \"args\": []\n    }\n  }\n}\n```\n\n##### Cursor\n1. 进入Cursor设置界面\n2. 找到扩展服务配置选项\n3. 支持sse、stdio两种方式。sse 方式填写http://localhost:9096/sse,stdio方式填写kom的文件位置。\n\n##### Windsurf\n1. 访问配置中心\n2. 设置API服务器地址\n3. 支持sse、stdio两种方式。sse 方式填写http://localhost:9096/sse,stdio方式填写kom的文件位置。\n\n#### cherry studio\n1. 点击左下角设置\n2. 点击MCP 服务器\n3. 点击添加服务器\n4. 支持sse、stdio两种方式。sse 方式填写http://localhost:9096/sse,stdio方式填写kom的文件位置。\n\n\n### 1. 多集群管理\n#### 注册多集群\n```go\n// 注册InCluster集群，名称为InCluster\nkom.Clusters().RegisterInCluster()\n// 注册两个带名称的集群,分别名为orb和docker-desktop\nkom.Clusters().RegisterByPathWithID(\"/Users/kom/.kube/orb\", \"orb\")\nkom.Clusters().RegisterByPathWithID(\"/Users/kom/.kube/config\", \"docker-desktop\")\n// 注册一个名为default的集群，那么kom.DefaultCluster()则会返回该集群。\nkom.Clusters().RegisterByPathWithID(\"/Users/kom/.kube/config\", \"default\")\n```\n#### 显示已注册集群\n```go\nkom.Clusters().Show()\n```\n#### 选择默认集群\n```go\n// 使用默认集群,查询集群内kube-system命名空间下的pod\n// 首先尝试返回 ID 为 \"InCluster\" 的实例，如果不存在，\n// 则尝试返回 ID 为 \"default\" 的实例。\n// 如果上述两个名称的实例都不存在，则返回 clusters 列表中的任意一个实例。\nvar pods []corev1.Pod\nerr = kom.DefaultCluster().Resource(&corev1.Pod{}).Namespace(\"kube-system\").List(&pods).Error\n```\n#### 选择指定集群\n```go\n// 选择orb集群,查询集群内kube-system命名空间下的pod\nvar pods []corev1.Pod\nerr = kom.Cluster(\"orb\").Resource(&corev1.Pod{}).Namespace(\"kube-system\").List(&pods).Error\n```\n\n### 2. 内置资源对象的增删改查以及Watch示例\n定义一个 Deployment 对象，并通过 kom 进行资源操作。\n```go\nvar item v1.Deployment\nvar items []v1.Deployment\n```\n#### 创建某个资源\n```go\nitem = v1.Deployment{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"nginx\",\n\t\t\tNamespace: \"default\",\n\t\t},\n\t\tSpec: v1.DeploymentSpec{\n\t\t\tTemplate: corev1.PodTemplateSpec{\n\t\t\t\tSpec: corev1.PodSpec{\n\t\t\t\t\tContainers: []corev1.Container{\n\t\t\t\t\t\t{Name: \"test\", Image: \"nginx:1.14.2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\nerr := kom.DefaultCluster().Resource(&item).Create(&item).Error\n```\n#### Get查询某个资源\n```go\n// 查询 default 命名空间下名为 nginx 的 Deployment\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").Get(&item).Error\n// 查询 default 命名空间下名为 nginx 的 Deployment，并使用缓存 5 秒\n// 5秒内，不会再次查询，批量操作、高频操作下，建议启用缓存\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").WithCache(5 * time.Second).Get(&item).Error\n```\n#### List查询资源列表\n```go\n// 查询 default 命名空间下的 Deployment 列表\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").List(&items).Error\n// 查询 default、kube-system 命名空间下的 Deployment 列表\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\",\"kube-system\").List(&items).Error\n// 查询 所有 命名空间下的 Deployment 列表\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"*\").List(&items).Error\nerr := kom.DefaultCluster().Resource(&item).AllNamespace().List(&items).Error\n// 设置5秒缓存，对列表生效\nerr := kom.DefaultCluster().Resource(&item).WithCache(5 * time.Second).List(&nodeList).Error\n```\n#### 通过Label查询资源列表\n```go\n// 查询 default 命名空间下 标签为 app:nginx 的 Deployment 列表\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").WithLabelSelector(\"app=nginx\").List(&items).Error\n```\n#### 通过多个Label查询资源列表\n```go\n// 查询 default 命名空间下 标签为 app:nginx m:n 的 Deployment 列表\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").WithLabelSelector(\"app=nginx\").WithLabelSelector(\"m=n\").List(&items).Error\n```\n#### 通过Field查询资源列表\n```go\n// 查询 default 命名空间下 标签为 metadata.name=test-deploy 的 Deployment 列表\n// filedSelector 一般支持原生的字段定义。如metadata.name,metadata.namespace,metadata.labels,metadata.annotations,metadata.creationTimestamp,spec.nodeName,spec.serviceAccountName,spec.schedulerName,status.phase,status.hostIP,status.podIP,status.qosClass,spec.containers.name等字段\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").WithFieldSelector(\"metadata.name=test-deploy\").List(&items).Error\n```\n#### 分页查询资源\n```go\nvar list []corev1.Pod\nvar total int64\nsql := \"select * from pod where metadata.namespace=? or metadata.namespace=?     order by  metadata.creationTimestamp desc \"\nerr := kom.DefaultCluster().Sql(sql, \"kube-system\", \"default\").\n\t\tFillTotalCount(&total).\n\t\tLimit(5).\n\t\tOffset(10).\n\t\tList(&list).Error\nfmt.Printf(\"total %d\\n\", total)  //返回总数 480\nfmt.Printf(\"Count %d\\n\", len(list)) //返回条目数=limit=5\n```\n#### 更新资源内容\n```go\n// 更新名为nginx 的 Deployment，增加一个注解\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").Get(&item).Error\nif item.Spec.Template.Annotations == nil {\n\titem.Spec.Template.Annotations = map[string]string{}\n}\nitem.Spec.Template.Annotations[\"kom.kubernetes.io/restartedAt\"] = time.Now().Format(time.RFC3339)\nerr = kom.DefaultCluster().Resource(&item).Update(&item).Error\n```\n#### PATCH 更新资源\n```go\n// 使用 Patch 更新资源,为名为 nginx 的 Deployment 增加一个标签，并设置副本数为5\npatchData := `{\n    \"spec\": {\n        \"replicas\": 5\n    },\n    \"metadata\": {\n        \"labels\": {\n            \"new-label\": \"new-value\"\n        }\n    }\n}`\nerr := kom.DefaultCluster().Resource(&item).Patch(&item, types.StrategicMergePatchType, patchData).Error\n```\n#### 删除资源\n```go\n// 删除名为 nginx 的 Deployment\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").Delete().Error\n```\n#### 强制删除资源\n```go\n// 删除名为 nginx 的 Deployment\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").ForceDelete().Error\n```\n#### 通用类型资源的获取（适用于k8s内置类型以及CRD）\n```go\n// 指定GVK获取资源\nvar list []corev1.Event\nerr := kom.DefaultCluster().GVK(\"events.k8s.io\", \"v1\", \"Event\").Namespace(\"default\").List(&list).Error\n```\n#### Watch资源变更\n```go\n// watch default 命名空间下 Pod资源 的变更\nvar watcher watch.Interface\nvar pod corev1.Pod\nerr := kom.DefaultCluster().Resource(&pod).Namespace(\"default\").Watch(&watcher).Error\nif err != nil {\n\tfmt.Printf(\"Create Watcher Error %v\", err)\n\treturn err\n}\ngo func() {\n\tdefer watcher.Stop()\n\n\tfor event := range watcher.ResultChan() {\n\t\terr := kom.DefaultCluster().Tools().ConvertRuntimeObjectToTypedObject(event.Object, &pod)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"无法将对象转换为 *v1.Pod 类型: %v\", err)\n\t\t\treturn\n\t\t}\n\t\t// 处理事件\n\t\tswitch event.Type {\n\t\tcase watch.Added:\n\t\t\tfmt.Printf(\"Added Pod [ %s/%s ]\\n\", pod.Namespace, pod.Name)\n\t\tcase watch.Modified:\n\t\t\tfmt.Printf(\"Modified Pod [ %s/%s ]\\n\", pod.Namespace, pod.Name)\n\t\tcase watch.Deleted:\n\t\t\tfmt.Printf(\"Deleted Pod [ %s/%s ]\\n\", pod.Namespace, pod.Name)\n\t\t}\n\t}\n}()\n```\n#### Describe查询某个资源\n```go\n// Describe default 命名空间下名为 nginx 的 Deployment\nvar describeResult []byte\nerr := kom.DefaultCluster().Resource(&item).Namespace(\"default\").Name(\"nginx\").Describe(&item).Error\nfmt.Printf(\"describeResult: %s\", describeResult)\n```\n\n### 3. YAML 创建、更新、删除\n```go\nyaml := `apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: example-config\n  namespace: default\ndata:\n  key: value\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: example-deployment\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: example\n  template:\n    metadata:\n      labels:\n        app: example\n    spec:\n      containers:\n        - name: example-container\n          image: nginx\n`\n// 第一次执行Apply为创建，返回每一条资源的执行结果 \nresults := kom.DefaultCluster().Applier().Apply(yaml)\n// 第二次执行Apply为更新，返回每一条资源的执行结果\nresults = kom.DefaultCluster().Applier().Apply(yaml)\n// 删除，返回每一条资源的执行结果\nresults = kom.DefaultCluster().Applier().Delete(yaml)\n```\n\n### 4. Pod 操作\n#### 获取日志\n```go\n// 获取Pod日志\nvar stream io.ReadCloser\nerr := kom.DefaultCluster().Namespace(\"default\").Name(\"random-char-pod\").Ctl().Pod().ContainerName(\"container\").GetLogs(&stream, &corev1.PodLogOptions{}).Error\nreader := bufio.NewReader(stream)\nline, _ := reader.ReadString('\\n')\nfmt.Println(line)\n```\n#### 执行命令\n在Pod内执行命令，需要指定容器名称，并且会触发Exec()类型的callbacks。\n```go\n// 在Pod内执行ps -ef命令\nvar execResult string\nerr := kom.DefaultCluster().Namespace(\"default\").Name(\"random-char-pod\").Ctl().Pod().ContainerName(\"container\").Command(\"ps\", \"-ef\").ExecuteCommand(&execResult).Error\nfmt.Printf(\"execResult: %s\", execResult)\n```\n#### 端口转发\n```go\nerr := kom.DefaultCluster().Resource(&v1.Pod{}).\n\t\tNamespace(\"default\").\n\t\tName(\"nginx-deployment-f576985cc-7czqr\").\n    Ctl().Pod().\n\t\tContainerName(\"nginx\").\n\t\tPortForward(\"20088\", \"80\", stopCh).Error\n// 监听0.0.0.0上的20088端口，转发到Pod的80端口\n```\n#### 流式执行命令\n在Pod内执行命令，并且会触发StreamExec()类型的callbacks。适合执行ping 等命令\n```go\ncb := func(data []byte) error {\n\t\tfmt.Printf(\"Data %s\\n\", string(data))\n\t\treturn nil\n\t}\nerr := kom.DefaultCluster().Namespace(\"kube-system\").Name(\"traefik-d7c9c5778-p9nf4\").Ctl().Pod().ContainerName(\"traefik\").Command(\"ping\", \"127.0.0.1\").StreamExecute(cb, cb).Error\n//输出：\n//Data PING 127.0.0.1 (127.0.0.1): 56 data bytes\n//Data 64 bytes from 127.0.0.1: seq=0 ttl=42 time=0.023 ms\n//Data 64 bytes from 127.0.0.1: seq=1 ttl=42 time=0.011 ms\n//Data 64 bytes from 127.0.0.1: seq=2 ttl=42 time=0.012 ms\n//Data 64 bytes from 127.0.0.1: seq=3 ttl=42 time=0.016 ms\n```\n\n#### 文件列表\n```go\n// 获取Pod内/etc文件夹列表\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").ListFiles(\"/etc\")\n```\n#### 所有文件列表，包括隐藏文件\n```go\n// 获取Pod内/etc文件夹列表\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").ListAllFiles(\"/etc\")\n```\n#### 文件下载\n```go\n// 下载Pod内/etc/hosts文件\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").DownloadFile(\"/etc/hosts\")\n```\n#### 文件下载(Tar压缩)\n```go\n// 下载Pod内/etc/hosts文件，以tar方式进行打包后，获取，下载\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").DownloadTarFile(\"/etc/hosts\")\n```\n#### 文件上传\n```go\n// 上传文件内容到Pod内/etc/demo.txt文件\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").SaveFile(\"/etc/demo.txt\", \"txt-context\")\n// os.File 类型文件直接上传到Pod内/etc/目录下\nfile, _ := os.Open(tempFilePath)\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").UploadFile(\"/etc/\", file)\n```\n#### 文件删除\n```go\n// 删除Pod内/etc/xyz文件\nkom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().ContainerName(\"nginx\").DeleteFile(\"/etc/xyz\")\n```\n#### 获取关联资源-Service\n```go\n// 获取Pod关联的Service\nsvcs, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedService()\nfor _, svc := range svcs {\n\tfmt.Printf(\"service name %v\\n\", svc.Name)\n}\n```\n#### 获取关联资源-Ingress\n```go\n// 获取Pod关联的Ingress\ningresses, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedIngress()\nfor _, ingress := range ingresses {\n\tfmt.Printf(\"ingress name %v\\n\", ingress.Name)\n}\n```\n#### 获取关联资源-PVC\n```go\n// 获取Pod关联的PVC\npvcs, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedPVC()\nfor _, pvc := range pvcs {\n\tfmt.Printf(\"pvc name %v\\n\", pvc.Name)\n}\n``` \n#### 获取关联资源-PV\n```go\n// 获取Pod关联的PVC\npvs, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedPV()\nfor _, pv := range pvs {\n\tfmt.Printf(\"pv name %v\\n\", pv.Name)\n}\n``` \n#### 获取关联资源-Endpoints\n```go\n// 获取Pod关联的Endpoints\nendpoints, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedEndpoints()\nfor _, endpoint := range endpoints {\n\tfmt.Printf(\"endpoint name %v\\n\", endpoint.Name)\n}\n```\n#### 获取关联资源-运行时Env\n从Pod内执行env命令获得ENV配置信息\n```go\nenvs, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedEnv()\nfor _, env := range envs {\n\t\tfmt.Printf(\"env %s %s=%s\\n\", env.ContainerName, env.EnvName, env.EnvValue)\n\t}\n```\n#### 获取关联资源-定义Env\n从pod定义上提取ENV配置信息\n```go\nenvs, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedEnvFromPod()\nfor _, env := range envs {\n\t\tfmt.Printf(\"env %s %s=%s\\n\", env.ContainerName, env.EnvName, env.EnvValue)\n\t}\n```\n#### 获取关联资源-节点\n根据Pod 定义中声明的NodeSelector、NodeAffinity、污点容忍度、NodeName等配置信息，返回可用节点列表。暂未考虑Pod亲和性、CPU内存等运行时调度因素。\n```go\nnodes, err := kom.DefaultCluster().Namespace(\"default\").Name(\"nginx\").Ctl().Pod().LinkedNode()\nfor _, node := range nodes {\n    fmt.Printf(\"reason:%s\\t node name %s\\n\", node.Reason, node.Name)\n}\n```\n\n### 5. 自定义资源定义（CRD）增删改查及Watch操作\n在没有CR定义的情况下，如何进行增删改查操作。操作方式同k8s内置资源。\n将对象定义为unstructured.Unstructured，并且需要指定Group、Version、Kind。\n因此可以通过kom.DefaultCluster().GVK(group, version, kind)来替代kom.DefaultCluster().Resource(interface{})\n为方便记忆及使用，kom提供了kom.DefaultCluster().CRD(group, version, kind)来简化操作。\n下面给出操作CRD的示例：\n首先定义一个通用的处理对象，用来接收CRD的返回结果。\n```go\nvar item unstructured.Unstructured\n```\n#### 创建CRD\n```go\nyaml := `apiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: crontabs.stable.example.com\nspec:\n  group: stable.example.com\n  versions:\n    - name: v1\n      served: true\n      storage: true\n      schema:\n        openAPIV3Schema:\n          type: object\n          properties:\n            spec:\n              type: object\n              properties:\n                cronSpec:\n                  type: string\n                image:\n                  type: string\n                replicas:\n                  type: integer\n  scope: Namespaced\n  names:\n    plural: crontabs\n    singular: crontab\n    kind: CronTab\n    shortNames:\n    - ct`\nresult := kom.DefaultCluster().Applier().Apply(yaml)\n```\n#### 创建CRD的CR对象\n```go\nitem = unstructured.Unstructured{\n\t\tObject: map[string]interface{}{\n\t\t\t\"apiVersion\": \"stable.example.com/v1\",\n\t\t\t\"kind\":       \"CronTab\",\n\t\t\t\"metadata\": map[string]interface{}{\n\t\t\t\t\"name\":      \"test-crontab\",\n\t\t\t\t\"namespace\": \"default\",\n\t\t\t},\n\t\t\t\"spec\": map[string]interface{}{\n\t\t\t\t\"cronSpec\": \"* * * * */8\",\n\t\t\t\t\"image\":    \"test-crontab-image\",\n\t\t\t},\n\t\t},\n\t}\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Namespace(item.GetNamespace()).Name(item.GetName()).Create(&item).Error\n```\n#### Get获取单个CR对象\n```go\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Name(item.GetName()).Namespace(item.GetNamespace()).Get(&item).Error\n```\n#### List获取CR对象的列表\n```go\nvar crontabList []unstructured.Unstructured\n// 查询default命名空间下的CronTab\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Namespace(crontab.GetNamespace()).List(&crontabList).Error\n// 查询所有命名空间下的CronTab\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").AllNamespace().List(&crontabList).Error\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Namespace(\"*\").List(&crontabList).Error\n```\n#### 更新CR对象\n```go\npatchData := `{\n    \"spec\": {\n        \"image\": \"patch-image\"\n    },\n    \"metadata\": {\n        \"labels\": {\n            \"new-label\": \"new-value\"\n        }\n    }\n}`\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Name(crontab.GetName()).Namespace(crontab.GetNamespace()).Patch(&crontab, types.StrategicMergePatchType, patchData).Error\n```\n#### 删除CR对象\n```go\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Name(crontab.GetName()).Namespace(crontab.GetNamespace()).Delete().Error\n```\n#### 强制删除CR对象\n```go\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Name(crontab.GetName()).Namespace(crontab.GetNamespace()).ForceDelete().Error\n```\n#### Watch CR对象\n```go\nvar watcher watch.Interface\n\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Namespace(\"default\").Watch(&watcher).Error\nif err != nil {\n    fmt.Printf(\"Create Watcher Error %v\", err)\n}\ngo func() {\n    defer watcher.Stop()\n    \n    for event := range watcher.ResultChan() {\n    var item *unstructured.Unstructured\n    \n    item, err := kom.DefaultCluster().Tools().ConvertRuntimeObjectToUnstructuredObject(event.Object)\n    if err != nil {\n        fmt.Printf(\"无法将对象转换为 Unstructured 类型: %v\", err)\n        return\n    }\n    // 处理事件\n    switch event.Type {\n        case watch.Added:\n            fmt.Printf(\"Added Unstructured [ %s/%s ]\\n\", item.GetNamespace(), item.GetName())\n        case watch.Modified:\n            fmt.Printf(\"Modified Unstructured [ %s/%s ]\\n\", item.GetNamespace(), item.GetName())\n        case watch.Deleted:\n            fmt.Printf(\"Deleted Unstructured [ %s/%s ]\\n\", item.GetNamespace(), item.GetName())\n        }\n    }\n}()\n```\n#### Describe查询某个CRD资源\n```go\n// Describe default 命名空间下名为 nginx 的 Deployment\nvar describeResult []byte\nerr := kom.DefaultCluster().CRD(\"stable.example.com\", \"v1\", \"CronTab\").Namespace(\"default\").Name(item.GetName()).Describe(&item).Error\nfmt.Printf(\"describeResult: %s\", describeResult)\n```\n#### 获取CRD下的Pod资源\n```go\npods, err := kom.DefaultCluster().CRD(\"apps.kruise.io\", \"v1beta1\", \"StatefulSet\").\nNamespace(\"default\").Name(\"sample\").Ctl().CRD().ManagedPods()\n\tfor _, pod := range pods {\n\t\tfmt.Printf(\"Get pods: %v\", pod.GetName())\n\t}\n```\n\n### 6. 集群参数信息\n```go\n// 集群文档\nkom.DefaultCluster().Status().Docs()\n// 集群资源信息\nkom.DefaultCluster().Status().APIResources()\n// 集群已注册CRD列表\nkom.DefaultCluster().Status().CRDList()\n// 集群版本信息\nkom.DefaultCluster().Status().ServerVersion()\n// 获取集群内各资源种类数量\nkom.DefaultCluster().Status().GetResourceCountSummary(10)\n```\n\n### 7. callback机制\n* 内置了callback机制，可以自定义回调函数，当执行完某项操作后，会调用对应的回调函数。\n* 如果回调函数返回true，则继续执行后续操作，否则终止后续操作。\n* 当前支持的callback有：get,list,create,update,patch,delete,exec,stream-exec,logs,watch,doc.\n* 内置的callback名称有：\"kom:get\",\"kom:list\",\"kom:create\",\"kom:update\",\"kom:patch\",\"kom:watch\",\"kom:delete\",\"kom:pod:exec\",\"kom:pod:stream:exec\",\"kom:pod:logs\",\"kom:pod:port:forward\",\"kom:doc\"\n* 支持回调函数排序，默认按注册顺序执行，可以通过kom.DefaultCluster().Callback().After(\"kom:get\")或者.Before(\"kom:get\")设置顺序。\n* 支持删除回调函数，通过kom.DefaultCluster().Callback().Delete(\"kom:get\")\n* 支持替换回调函数，通过kom.DefaultCluster().Callback().Replace(\"kom:get\",cb)\n```go\n// 为Get获取资源注册回调函数\nkom.DefaultCluster().Callback().Get().Register(\"get\", cb)\n// 为List获取资源注册回调函数\nkom.DefaultCluster().Callback().List().Register(\"list\", cb)\n// 为Create创建资源注册回调函数\nkom.DefaultCluster().Callback().Create().Register(\"create\", cb)\n// 为Update更新资源注册回调函数\nkom.DefaultCluster().Callback().Update().Register(\"update\", cb)\n// 为Patch更新资源注册回调函数\nkom.DefaultCluster().Callback().Patch().Register(\"patch\", cb)\n// 为Delete删除资源注册回调函数\nkom.DefaultCluster().Callback().Delete().Register(\"delete\", cb)\n// 为Watch资源注册回调函数\nkom.DefaultCluster().Callback().Watch().Register(\"watch\",cb)\n// 为Exec Pod内执行命令注册回调函数\nkom.DefaultCluster().Callback().Exec().Register(\"exec\", cb)\n// 为Logs获取日志注册回调函数\nkom.DefaultCluster().Callback().Logs().Register(\"logs\", cb)\n// 删除回调函数\nkom.DefaultCluster().Callback().Get().Delete(\"get\")\n// 替换回调函数\nkom.DefaultCluster().Callback().Get().Replace(\"get\", cb)\n// 指定回调函数执行顺序，在内置的回调函数执行完之后再执行\nkom.DefaultCluster().Callback().After(\"kom:get\").Register(\"get\", cb)\n// 指定回调函数执行顺序，在内置的回调函数执行之前先执行\n// 案例1.在Create创建资源前，进行权限检查，没有权限则返回error，后续创建动作将不再执行\n// 案例2.在List获取资源列表后，进行特定的资源筛选，从列表(Statement.Dest)中删除不符合要求的资源，然后返回给用户\nkom.DefaultCluster().Callback().Before(\"kom:create\").Register(\"create\", cb)\n\n// 自定义回调函数\nfunc cb(k *kom.Kubectl) error {\n    stmt := k.Statement\n    gvr := stmt.GVR\n    ns := stmt.Namespace\n    name := stmt.Name\n    // 打印信息\n    fmt.Printf(\"Get %s/%s(%s)\\n\", ns, name, gvr)\n    fmt.Printf(\"Command %s/%s(%s %s)\\n\", ns, name, stmt.Command, stmt.Args)\n    return nil\n\t// return fmt.Errorf(\"error\") 返回error将阻止后续cb的执行\n}\n```\n\n### 8. SQL查询k8s资源\n* 通过SQL()方法查询k8s资源，简单高效。\n* Table 名称支持集群内注册的所有资源的全称及简写，包括CRD资源。只要是注册到集群上了，就可以查。\n* 典型的Table 名称有：pod,deployment,service,ingress,pvc,pv,node,namespace,secret,configmap,serviceaccount,role,rolebinding,clusterrole,clusterrolebinding,crd,cr,hpa,daemonset,statefulset,job,cronjob,limitrange,horizontalpodautoscaler,poddisruptionbudget,networkpolicy,endpoints,ingressclass,mutatingwebhookconfiguration,validatingwebhookconfiguration,customresourcedefinition,storageclass,persistentvolumeclaim,persistentvolume,horizontalpodautoscaler,podsecurity。统统都可以查。\n* 查询字段目前仅支持*。也就是select *\n* 查询条件目前支持 =，!=,>=,<=,<>,like,in,not in,and,or,between\n* 排序字段目前支持对单一字段进行排序。默认按创建时间倒序排列\n* \n#### 查询k8s内置资源\n```go\n    sql := \"select * from deploy where metadata.namespace='kube-system' or metadata.namespace='default' order by  metadata.creationTimestamp asc   \"\n\n\tvar list []v1.Deployment\n\terr := kom.DefaultCluster().Sql(sql).List(&list).Error\n\tfor _, d := range list {\n\t\tfmt.Printf(\"List Items foreach %s,%s at %s \\n\", d.GetNamespace(), d.GetName(), d.GetCreationTimestamp())\n\t}\n```\n#### 查询CRD资源\n```go\n    // vm 为kubevirt 的CRD\n    sql := \"select * from vm where (metadata.namespace='kube-system' or metadata.namespace='default' )  \"\n\tvar list []unstructured.Unstructured\n\terr := kom.DefaultCluster().Sql(sql).List(&list).Error\n\tfor _, d := range list {\n\t\tfmt.Printf(\"List Items foreach %s,%s\\n\", d.GetNamespace(), d.GetName())\n\t}\n```\n#### 链式调研查询SQL\n```go\n// 查询pod 列表\nerr := kom.DefaultCluster().From(\"pod\").\n\t\tWhere(\"metadata.namespace = ?  or metadata.namespace= ? \", \"kube-system\", \"default\").\n\t\tOrder(\"metadata.creationTimestamp desc\").\n\t\tList(&list).Error\n```\n#### k8s资源嵌套列表属性支持\n```go\n// spec.containers为列表，其下的ports也为列表，我们查询ports的name\nsql := \"select * from pod where spec.containers.ports.name like '%k8m%'  \"\nvar list []v1.Pod\nerr := kom.DefaultCluster().Sql(sql).List(&list).Error\nfor _, d := range list {\n\tt.Logf(\"List Items foreach %s,%s\\n\", d.GetNamespace(), d.GetName())\n}\n```\n\n### 9. 其他操作\n#### Deployment重启\n```go\nerr = kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Restart()\n```\n#### Deployment扩缩容\n```go\n// 将名称为nginx的deployment的副本数设置为3\nerr = kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Scaler().Scale(3)\n```\n#### Deployment 停止\n```go\n// 将名称为nginx的deployment的副本数设置为0\n// 当前运行副本数量记录到注解中\nerr = kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Scaler().Stop()\n```\n#### Deployment 恢复\n```go\n// 将名称为nginx的deployment的副本数从注解中恢复，如果没有注解，默认恢复到1\nerr = kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Scaler().Restore()\n```\n#### Deployment更新Tag\n```go\n// 将名称为nginx的deployment的中的容器镜像tag升级为alpine\nerr = kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Deployment().ReplaceImageTag(\"main\",\"20241124\")\n```\n#### Deployment Rollout History\n```go\n// 查询名称为nginx的deployment的升级历史\nresult, err := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().History()\n```\n#### Deployment Rollout Undo\n```go\n// 将名称为nginx的deployment进行回滚\nresult, err := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Undo()\n// 将名称为nginx的deployment进行回滚到指定版本(history 查询)\nresult, err := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Undo(\"6\")\n```\n#### Deployment Rollout Pause\n```go\n// 暂停升级过程\nerr := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Pause()\n```\n#### Deployment Rollout Resume \n```go\n// 恢复升级过程\nerr := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Resume()\n```\n#### Deployment Rollout Status \n```go\n// 将名称为nginx的deployment的中的容器镜像tag升级为alpine\nresult, err := kom.DefaultCluster().Resource(&Deployment{}).Namespace(\"default\").Name(\"nginx\").Ctl().Rollout().Status()\n```\n#### Deployment HPA\n```go\n// 显示deployment的hpa \nlist, err := kom.DefaultCluster().Resource(&v1.Deployment{}).Namespace(\"default\").Name(\"nginx-web\").Ctl().Deployment().HPAList()\nfor _, item := range list {\n    t.Logf(\"HPA %s\\n\", item.Name)\n}\n```\n#### 节点打污点\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Node().Taint(\"dedicated=special-user:NoSchedule\")\n```\n#### 节点去除污点\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Node().UnTaint(\"dedicated=special-user:NoSchedule\")\n```\n#### 节点Cordon\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Node().Cordon()\n```\n#### 节点UnCordon\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Node().UnCordon()\n```\n#### 节点Drain\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Node().Drain()\n```\n#### 查询节点IP资源情况\n支持设置缓存时间，避免频繁查询k8s API\n```go\nnodeName := \"lima-rancher-desktop\"\ntotal, used, available := kom.DefaultCluster().Resource(&corev1.Node{}).WithCache(5 * time.Second).Name(nodeName).Ctl().Node().IPUsage()\nfmt.Printf(\"Total %d, Used %d, Available %d\\n\", total, used, available)\n//Total 256, Used 6, Available 250\n```\n#### 节点IP资源使用情况统计\n支持设置缓存时间，避免频繁查询k8s API\n```go\nnodeName := \"lima-rancher-desktop\"\ntotal, used, available := kom.DefaultCluster().Resource(&corev1.Node{}).WithCache(5 * time.Second).Name(nodeName).Ctl().Node().PodCount()\nfmt.Printf(\"Total %d, Used %d, Available %d\\n\", total, used, available)\n//Total 110, Used 9, Available 101\n```\n#### 节点资源用量情况统计\n支持设置缓存时间，避免频繁查询k8s API\n```go\nnodeName := \"lima-rancher-desktop\"\nusage := kom.DefaultCluster().Resource(&corev1.Node{}).WithCache(5 * time.Second).Name(nodeName).Ctl().Node().ResourceUsage()\nfmt.Printf(\"Node Usage %s\\n\", utils.ToJSON(usage))\n```\n包括当前的请求值、限制值、可分配值、使用比例\n```json\n{\n  \"requests\": {\n    \"cpu\": \"200m\",\n    \"memory\": \"140Mi\"\n  },\n  \"limits\": {\n    \"memory\": \"170Mi\"\n  },\n  \"allocatable\": {\n    \"cpu\": \"4\",\n    \"ephemeral-storage\": \"99833802265\",\n    \"hugepages-1Gi\": \"0\",\n    \"hugepages-2Mi\": \"0\",\n    \"hugepages-32Mi\": \"0\",\n    \"hugepages-64Ki\": \"0\",\n    \"memory\": \"8127096Ki\",\n    \"pods\": \"110\"\n  },\n  \"usageFractions\": {\n    \"cpu\": {\n      \"requestFraction\": 5,\n      \"limitFraction\": 0\n    },\n    \"ephemeral-storage\": {\n      \"requestFraction\": 0,\n      \"limitFraction\": 0\n    },\n    \"memory\": {\n      \"requestFraction\": 1.76397571777176,\n      \"limitFraction\": 2.1419705144371375\n    }\n  }\n}\n```\n#### 给资源增加标签\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Label(\"name=zhangsan\")\n```\n#### 给资源删除标签\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Label(\"name-\")\n```\n#### 给资源增加注解\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Annotate(\"name=zhangsan\")\n```\n#### 给资源删除注解\n```go\nerr = kom.DefaultCluster().Resource(&Node{}).Name(\"kind-control-plane\").Ctl().Annotate(\"name-\")\n```\n#### 创建NodeSell\n```go\nns, pod, container, err  := kom.DefaultCluster().Resource(&v1.Node{}).Name(\"kind-control-plane\").Ctl().Node().CreateNodeShell()\nfmt.Printf(\"Node Shell ns=%s podName=%s containerName=%s\", ns, pod, container)\n```\n#### 创建kubectl Shell\n```go\nns, pod, container, err := kom.DefaultCluster().Resource(&v1.Node{}).Name(name).Ctl().Node().CreateKubectlShell(kubeconfig)\nfmt.Printf(\"Kubectl Shell ns=%s podName=%s containerName=%s\", ns, pod, container)\n\n```\n#### 统计StorageClass下的PVC数量\n```go\ncount, err := kom.DefaultCluster().Resource(&v1.StorageClass{}).Name(\"hostpath\").Ctl().StorageClass().PVCCount()\nfmt.Printf(\"pvc count %d\\n\", count)\n```\n#### 统计StorageClass下的PV数量\n```go\ncount, err := kom.DefaultCluster().Resource(&v1.StorageClass{}).Name(\"hostpath\").Ctl().StorageClass().PVCount()\nfmt.Printf(\"pv count %d\\n\", count)\n```\n#### 设置StorageClass为默认\n```go\nerr := kom.DefaultCluster().Resource(&v1.StorageClass{}).Name(\"hostpath\").Ctl().StorageClass().SetDefault()\n```\n#### 设置IngressClass为默认\n```go\nerr := kom.DefaultCluster().Resource(&v1.IngressClass{}).Name(\"nginx\").Ctl().IngressClass().SetDefault()\n```\n#### 统计Deployment/StatefulSet/DaemonSet下的Pod列表\n```go\nlist, err := kom.DefaultCluster().Namespace(\"default\").Name(\"managed-pods\").Ctl().Deployment().ManagedPods()\nfor _, pod := range list {\n\tfmt.Printf(\"ManagedPod: %v\", pod.Name)\n}\n```\n#### 获取所有节点的标签集合\n```go\n// labels 类型为map[string]string\nlabels, err := kom.DefaultCluster().Resource(&v1.Node{}).Ctl().Node().AllNodeLabels()\nfmt.Printf(\"%s\", utils.ToJSON(labels))\n```\n```json\n{\n          \"beta.kubernetes.io/arch\": \"arm64\",\n          \"beta.kubernetes.io/os\": \"linux\",\n          \"kubernetes.io/arch\": \"arm64\",\n          \"kubernetes.io/hostname\": \"kind-control-plane\",\n          \"kubernetes.io/os\": \"linux\",\n          \"kubernetes.io/role\": \"agent\",\n          \"node-role.kubernetes.io/agent\": \"\",\n          \"node-role.kubernetes.io/control-plane\": \"\",\n          \"type\": \"kwok\",\n          \"uat\": \"test\",\n          \"x\": \"x\"\n}\n```\n#### 查看Pod资源占用率\n```go\npodName := \"coredns-ccb96694c-jprpf\"\nns := \"kube-system\"\nusage := kom.DefaultCluster().Resource(&corev1.Pod{}).Name(podName).Namespace(ns).Ctl().Pod().ResourceUsage()\nfmt.Printf(\"Pod Usage %s\\n\", utils.ToJSON(usage))\n```\n包括当前的请求值、限制值、可分配值、使用比例\n```json\n{\n  \"requests\": {\n    \"cpu\": \"100m\",\n    \"memory\": \"70Mi\"\n  },\n  \"limits\": {\n    \"memory\": \"170Mi\"\n  },\n  \"allocatable\": {\n    \"cpu\": \"4\",\n    \"ephemeral-storage\": \"99833802265\",\n    \"hugepages-1Gi\": \"0\",\n    \"hugepages-2Mi\": \"0\",\n    \"hugepages-32Mi\": \"0\",\n    \"hugepages-64Ki\": \"0\",\n    \"memory\": \"8127096Ki\",\n    \"pods\": \"110\"\n  },\n  \"usageFractions\": {\n    \"cpu\": {\n      \"requestFraction\": 2.5,\n      \"limitFraction\": 0\n    },\n    \"memory\": {\n      \"requestFraction\": 0.88198785888588,\n      \"limitFraction\": 2.1419705144371375\n    }\n  }\n}\n```\n#### 获取字段文档解释\n```go\nvar docResult []byte\n\titem := v1.Deployment{}\n\tfield := \"spec.replicas\"\n\tfield = \"spec.template.spec.containers.name\"\n\tfield = \"spec.template.spec.containers.imagePullPolicy\"\n\tfield = \"spec.template.spec.containers.livenessProbe.successThreshold\"\n\terr := kom.DefaultCluster().\n\t\tResource(&item).DocField(field).Doc(&docResult).Error\n\tfmt.Printf(\"Get Deployment Doc [%s] :%s\", field, string(docResult))\n```\n## 联系我\n\n微信（大罗马的太阳） 搜索ID：daluomadetaiyang,备注kom。\n<br><img width=\"214\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/166db141-42c5-42c4-9964-8e25cf12d04c\" />\n\n## 微信群\n\n![输入图片说明](https://foruda.gitee.com/images/1753455031254775761/148f6887_77493.png \"屏幕截图\")\n## QQ群\n![输入图片说明](https://foruda.gitee.com/images/1753099785542398999/184a765a_77493.png \"屏幕截图\")\n",
  "category": "AI Tools",
  "quality_score": 52,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {
        "kom": {
          "command": "path/to/kom",
          "args": [],
          "env": {
            "KUBECONFIG": "/path/to/your/.kube/config"
          }
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "weibaohui",
    "repo": "kom",
    "url": "https://github.com/weibaohui/kom",
    "name": "kom",
    "path": null,
    "stars": 124,
    "contributors": 3,
    "issues": 0,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "2d9bfd2f468037c9e15defedc2b52f0bf47d89ec"
  },
  "programming_language": "Go",
  "framework": null,
  "last_scraped_at": "2025-08-04T09:33:06.391Z",
  "evaluation_model": "gemini-2.5-pro",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "mark3labs/mcp-go",
      "importance": 10
    },
    {
      "name": "k8s.io/client-go",
      "importance": 9
    },
    {
      "name": "k8s.io/api",
      "importance": 8
    },
    {
      "name": "k8s.io/apimachinery",
      "importance": 8
    },
    {
      "name": "k8s.io/kubectl",
      "importance": 7
    },
    {
      "name": "xwb1989/sqlparser",
      "importance": 7
    },
    {
      "name": "k8s.io/apiextensions-apiserver",
      "importance": 7
    },
    {
      "name": "dgraph-io/ristretto/v2",
      "importance": 6
    },
    {
      "name": "k8s.io/cli-runtime",
      "importance": 5
    },
    {
      "name": "duke-git/lancet/v2",
      "importance": 4
    },
    {
      "name": "sigs.k8s.io/yaml",
      "importance": 4
    }
  ],
  "raw_dependencies": "=== go.mod ===\nmodule github.com/weibaohui/kom\n\ngo 1.24.0\n\nrequire (\n\tgithub.com/dgraph-io/ristretto/v2 v2.2.0\n\tgithub.com/duke-git/lancet/v2 v2.3.7\n\tgithub.com/fatih/camelcase v1.0.0\n\tgithub.com/google/gnostic-models v0.6.9\n\tgithub.com/mark3labs/mcp-go v0.35.0\n\tgithub.com/xwb1989/sqlparser v0.0.0-20180606152119-120387863bf2\n\tk8s.io/api v0.33.3\n\tk8s.io/apiextensions-apiserver v0.33.3\n\tk8s.io/apimachinery v0.33.3\n\tk8s.io/cli-runtime v0.33.3\n\tk8s.io/client-go v0.33.3\n\tk8s.io/klog/v2 v2.130.1\n\tk8s.io/kubectl v0.33.3\n\tk8s.io/utils v0.0.0-20241104100929-3ea5e8cea738\n\tsigs.k8s.io/yaml v1.6.0\n)\n\nrequire (\n\tgithub.com/Azure/go-ansiterm v0.0.0-20230124172434-306776ec8161 // indirect\n\tgithub.com/blang/semver/v4 v4.0.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/emicklei/go-restful/v3 v3.11.0 // indirect\n\tgithub.com/fxamacker/cbor/v2 v2.7.0 // indirect\n\tgithub.com/go-errors/errors v1.4.2 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-openapi/jsonpointer v0.21.0 // indirect\n\tgithub.com/go-openapi/jsonreference v0.20.2 // indirect\n\tgithub.com/go-openapi/swag v0.23.0 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/google/btree v1.1.3 // indirect\n\tgithub.com/google/go-cmp v0.7.0 // indirect\n\tgithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/gorilla/websocket v1.5.4-0.20250319132907-e064f32e3674 // indirect\n\tgithub.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/moby/spdystream v0.5.0 // indirect\n\tgithub.com/moby/term v0.5.0 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/monochromegane/go-gitignore v0.0.0-20200626010858-205db1a8cc00 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f // indirect\n\tgithub.com/peterbourgon/diskv v2.0.1+incompatible // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/spf13/cast v1.7.1 // indirect\n\tgithub.com/spf13/cobra v1.8.1 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgithub.com/xlab/treeprint v1.2.0 // indirect\n\tgithub.com/yosida95/uritemplate/v3 v3.0.2 // indirect\n\tgo.yaml.in/yaml/v2 v2.4.2 // indirect\n\tgo.yaml.in/yaml/v3 v3.0.3 // indirect\n\tgolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect\n\tgolang.org/x/net v0.38.0 // indirect\n\tgolang.org/x/oauth2 v0.27.0 // indirect\n\tgolang.org/x/sync v0.12.0 // indirect\n\tgolang.org/x/sys v0.31.0 // indirect\n\tgolang.org/x/term v0.30.0 // indirect\n\tgolang.org/x/text v0.23.0 // indirect\n\tgolang.org/x/time v0.9.0 // indirect\n\tgoogle.golang.org/protobuf v1.36.5 // indirect\n\tgopkg.in/evanphx/json-patch.v4 v4.12.0 // indirect\n\tgopkg.in/inf.v0 v0.9.1 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\tk8s.io/component-helpers v0.33.3 // indirect\n\tk8s.io/kube-openapi v0.0.0-20250318190949-c8a335a9a2ff // indirect\n\tsigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3 // indirect\n\tsigs.k8s.io/kustomize/api v0.19.0 // indirect\n\tsigs.k8s.io/kustomize/kyaml v0.19.0 // indirect\n\tsigs.k8s.io/randfill v1.0.0 // indirect\n\tsigs.k8s.io/structured-merge-diff/v4 v4.6.0 // indirect\n)\n"
}
