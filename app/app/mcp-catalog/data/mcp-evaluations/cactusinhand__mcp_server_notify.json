{
  "dxt_version": "0.1.0",
  "name": "cactusinhand__mcp_server_notify",
  "display_name": "mcp_server_notify",
  "version": "1.0.0",
  "description": "Send system notification when Agent task is done.",
  "author": {
    "name": "Cactusinhand"
  },
  "server": {
    "type": "python",
    "entry_point": "__main__.py",
    "mcp_config": {
      "command": "python",
      "args": ["-m", "mcp_server_notify", "--debug", "${user_config.debug}", "--log-file", "${user_config.log_file}"],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "debug": {
      "type": "boolean",
      "title": "Enable Debug Mode",
      "description": "Enable verbose logging for debugging purposes.",
      "default": false,
      "required": false
    },
    "log_file": {
      "type": "file",
      "title": "Log File Path",
      "description": "Path to the file where server logs will be written.",
      "required": false,
      "default": ""
    }
  },
  "readme": "<a href=\"https://glama.ai/mcp/servers/@Cactusinhand/mcp_server_notify\"> <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Cactusinhand/mcp_server_notify/badge\" alt=\"Glama badge for Notify MCP server\" /> </a> [![MseeP.ai Security Assessment Badge](https://mseep.net/pr/cactusinhand-mcp-server-notify-badge.png)](https://mseep.ai/app/cactusinhand-mcp-server-notify) \n\n[![PyPI version](https://badge.fury.io/py/mcp-server-notify.svg)](https://badge.fury.io/py/mcp-server-notify)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/Cactusinhand/mcp_server_notify)](https://archestra.ai/mcp-catalog/Cactusinhand__mcp_server_notify)\n\n\n# üì¢ MCP Notify Server\n\n\n\n[English](README.md) | [‰∏≠Êñá](README.zh.md)\n\nA MCP server that send desktop notifications with sound effect when agent tasks are completed.\n\n## ü•© Features\n\n- Send system desktop notifications after agent tasks completion\n- Play alert sounds to grab user attention, with sound file inside.\n- Cross-platform support (Windows, macOS, Linux)\n- Based on standard MCP protocol, integrates with various LLM clients\n\n## ‚è¨ Installation\n\n### Install using [uv](https://docs.astral.sh/uv/) package manager\n\n```bash\ngit clone https://github.com/Cactusinhand/mcp_server_notify.git\ncd mcp_server_notify\n\nuv venv\nsource .venv/Scripts/activate\n\nuv pip install mcp-server-notify\n# or\npip install mcp-server-notify\n```\n\nAfter installation, call the module directly to check if installation was successful:\n```bash\npython -m mcp_server_notify\n```\nThis module accepts ` --debug ` or `--file ` option, we can use it like:\n```shell\npython -m mcp_server_notify --debug\npython -m mcp_server_notify --debug --log-file=path/to/logfile.log\n```\n\n## ‚ö†Ô∏è‚ùï Special requirements\n\n** We use [Apprise](https://github.com/caronc/apprise) API for our Desktop notification deliverÔºåso we need to install some special requirements in our Desktop **\n\n**Windows**\n```shell\n# windows:// minimum requirements\npip install pywin32\n```\n\n**macOS**\n```shell\n# Make sure terminal-notifier is installed into your system\nbrew install terminal-notifier\n```\n\n## üìö Usage\n\n### Using with Claude Desktop:\n\nFind the configuration file `claude_desktop_config.json`\n```json\n{\n    \"mcpServers\": {\n        \"NotificationServer\": {\n            \"command\": \"uv\",\n            \"args\": [\n              \"--directory\",\n              \"path/to/your/mcp_server_notify project\",\n              \"run\",\n              \"mcp-server-notify\",\n            ]\n        }\n    }\n}\n```\n\nIf installed globally, you can also use the python command:\n```json\n{\n    \"mcpServers\": {\n        \"NotificationServer\": {\n            \"command\": \"python\",\n            \"args\": [\n              \"-m\",\n              \"mcp_server_notify\",\n            ]\n        }\n    }\n}\n```\n\n### ‚ö°Ô∏è Using with Cursor:\nFind the configuration file `~/.cursor/mcp.json` or `your_project/.cursor/mcp.json`\n```json\n{\n    \"mcpServers\": {\n        \"NotificationServer\": {\n            \"command\": \"uv\",\n            \"args\": [\n              \"--directory\",\n              \"path/to/your/mcp_server_notify project\",\n              \"run\",\n              \"mcp-server-notify\",\n            ]\n        }\n    }\n}\n```\n\nAfter configuration, simply add a prompt like `finally, send me a notification when task finished.` at the end of your task input to the AI to trigger notifications.\n\nIn Cursor, you can add this prompt as a rule in `Cursor Settings` -> `Rules` so you don't have to type it manually each time.\n\n### ‚ö°Ô∏è Using with VSCode + Copilot:\n1.\tInstall the service manager [uv/uvx](https://docs.astral.sh/uv/):\n`pip install uv`\n2.\t Add the service to VSCode settings:\n\n     Windows `%APPDATA%\\Code\\User\\settings.json`  \nmacOS `$HOME/Library/Application\\ Support/Code/User/settings.json`  \nLinux `$HOME/.config/Code/User/settings.json`  \n\n\t ```json\n\t \"mcp\": {\n         \"servers\": {\n             \"notifier\": {\n                 \"command\": \"uvx\",\n                 \"args\": [\n                     \"mcp-server-notify\"\n                 ],\n                 \"env\": {}\n             }\n         }\n\t }\n\t ```\n3.\tMake sure you are using the latest VSCode version ‚Äî it automatically runs MCP services\n4.\tOpen VSCode ‚Üí enable Copilot ‚Üí switch to agent mode.\n5.\tType # ‚Üí you will see the #send_notification option.\n6.\tAsk the agent: run #send_notification (it will handle the notification automatically).\n7.\tNow the Copilot in agent mode can send desktop notifications.\n\n\n\n### üê≥ Running with Docker\n\nCurrently not available due to environment compatibility issues.\nIf Docker containers need to trigger host notifications regardless of whether the host OS is Windows, macOS, or Linux, the solution becomes much more complex, and direct use of native notifications is usually not feasible.\n\nMain issues:\n1. OS-specific notification systems\nEach operating system (Windows, macOS, Linux) has its unique notification mechanism.\n\n2. Docker isolation\nThe isolation of Docker containers limits their ability to access host operating system resources directly.\n\n3. Dependency management\nNeed to handle different notification libraries and dependencies for each operating system.\n\n## üßæ License\n\nMIT\n\n## üíª Contributions\n\nIssues and pull requests are welcome!\n",
  "category": "AI Tools",
  "quality_score": 43,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {
        "mcp-server-notify-python": {
          "command": "python",
          "args": ["-m", "mcp_server_notify"],
          "env": {}
        },
        "mcp-server-notify-python-debug": {
          "command": "python",
          "args": ["-m", "mcp_server_notify", "--debug"],
          "env": {}
        },
        "mcp-server-notify-python-debug-logfile": {
          "command": "python",
          "args": ["-m", "mcp_server_notify", "--debug", "--log-file=path/to/logfile.log"],
          "env": {}
        },
        "mcp-server-notify-uv-configured": {
          "command": "uv",
          "args": ["--directory", "path/to/your/mcp_server_notify project", "run", "mcp-server-notify"],
          "env": {}
        },
        "mcp-server-notify-uvx": {
          "command": "uvx",
          "args": ["mcp-server-notify"],
          "env": {}
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "Cactusinhand",
    "repo": "mcp_server_notify",
    "url": "https://github.com/Cactusinhand/mcp_server_notify",
    "name": "cactusinhand__mcp_server_notify",
    "path": null,
    "stars": 32,
    "contributors": 5,
    "issues": 4,
    "releases": false,
    "ci_cd": false,
    "latest_commit_hash": "dc03381df6b2c534aac2f12761d5ff1fcf6b4aa8"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-07T22:13:20.604Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": true,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "apprise",
      "importance": 9
    },
    {
      "name": "plyer",
      "importance": 8
    },
    {
      "name": "pydantic",
      "importance": 7
    },
    {
      "name": "pygame",
      "importance": 7
    },
    {
      "name": "pywin32",
      "importance": 7
    },
    {
      "name": "requests",
      "importance": 6
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"mcp-server-notify\"\nversion = \"0.1.0\"\ndescription = \"MCP Server for system notifications with sound\"\nrequires-python = \">=3.10\"\ndependencies = [\n    \"mcp[cli]>=1.0.0\",\n    \"pydantic>=2.0\",\n    \"plyer>=2.0\",\n    \"pygame>=2.1; platform_system != 'Windows' and platform_system != 'Darwin'\",\n    \"apprise>=1.9.2\",\n]\n\n[project.scripts]\nmcp-server-notify = \"mcp_server_notify:main\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.uv]\ndev-dependencies = [\n    \"pytest>=7.0\",\n    \"pytest-asyncio>=0.23\",\n    \"pytest-mock>=3.0\",\n    \"anyio>=4.0\"  # Áî®‰∫éÂºÇÊ≠•ÊµãËØïÊîØÊåÅ\n]\n\n[tool.pytest.ini_options]\nmarkers = [\n    \"asyncio: mark test as async\",\n    \"parametrize: mark test with parameters\",\n    \"slow: mark test as slow\"\n]\n\n[tool.hatch.build.targets.wheel]\npackages = [\"src/mcp_server_notify\"]\n"
}
