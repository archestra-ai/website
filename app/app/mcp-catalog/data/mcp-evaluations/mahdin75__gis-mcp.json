{
  "dxt_version": "0.1.0",
  "name": "mahdin75__gis-mcp",
  "display_name": "gis-mcp",
  "version": "1.0.0",
  "description": "A Model Context Protocol (MCP) server implementation that connects Large Language Models (LLMs) to GIS operations using GIS libraries, enabling AI assistants to perform geospatial operations and transformations.",
  "author": {
    "name": "mahdin75"
  },
  "server": {
    "command": "gis-mcp",
    "args": [],
    "env": {}
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "# GIS MCP Server\n\n<div align=\"center\">\n  <h3>‚ú® Want to perform accurate geospatial analysis in your chatbot? ‚ú®</h3>\n  <p><strong>Install GIS-MCP and transform your AI's spatial capabilities!</strong></p>\n  <br/>\n  <img src=\"docs/Logo.png\" alt=\"GIS MCP Server Logo\" width=\"300\"/>\n  <br/>\n  <br/>\n</div>\n\nA Model Context Protocol (MCP) server implementation that connects Large Language Models (LLMs) to GIS operations using GIS libraries, enabling AI assistants to perform geospatial operations and transformations.\n\nüåê **Website:** [gis-mcp.com](https://gis-mcp.com)\n\n> Current version is 0.8.0\n>\n> Version 0.9.0 (Beta) is under active development. We welcome contributions and developers to join us in building this project.\n\n## üé• Demo\n\n<div align=\"center\">\n  <img src=\"docs/demo.gif\" alt=\"GIS MCP Server Demo\" width=\"800\"/>\n</div>\n\n### Rasterio Demo\n\n<div align=\"center\">\n  <a href=\"https://www.veed.io/view/95ff85f4-efbb-4154-9a04-d966c6ae1737?panel=share\">\n    <br/>\n    <em>Click to watch the Rasterio demo video or go to docs folder</em>\n  </a>\n</div>\n\n## üìã Table of Contents\n\n- [Features](#-features)\n- [Prerequisites](#-prerequisites)\n- [Installation](#-installation)\n  - [Installing via Smithery](#-installing-via-smithery)\n  - [pip Installation](#-pip-installation)\n  - [Development Installation](#-development-installation)\n- [Available Functions](#-available-functions)\n  - [Shapely Functions](#-shapely-functions-29-total)\n  - [PyProj Functions](#-pyproj-functions-13-total)\n  - [GeoPandas Functions](#-geopandas-functions-13-total)\n  - [Rasterio Functions](#-rasterio-functions-20-total)\n  - [PySAL Functions](#-pysal-functions-15-total)\n  - [Administrative Boundaries Functions](#-administrative-boundaries-functions-1-total)\n  - [Climate Data Functions](#-climate-data-functions-1-total)\n  - [Ecology Data Functions](#-ecology-data-functions-2-total)\n  - [Movement Data Functions](#-movement-data-functions-2-total)\n  - [Land Cover Data Functions](#-land-cover-data-functions-2-total)\n  - [Satellite Imagery Functions](#-satellite-imagery-functions-1-total)\n- [Client Development](#-client-development)\n- [Planned Features](#-planned-features)\n- [Contributing](#-contributing)\n- [License](#-license)\n- [Related Projects](#-related-projects)\n- [Support](#-support)\n- [Badges](#-badges)\n\n## üöÄ Features\n\nGIS MCP Server empowers AI assistants with advanced geospatial intelligence. Key features include:\n\n- üîπ **Comprehensive Geometry Operations** ‚Äì Perform intersection, union, buffer, difference, and other geometric transformations with ease.\n- üîπ **Advanced Coordinate Transformations** ‚Äì Effortlessly reproject and transform geometries between coordinate reference systems.\n- üîπ **Accurate Measurements** ‚Äì Compute distances, areas, lengths, and centroids precisely.\n- üîπ **Spatial Analysis & Validation** ‚Äì Validate geometries, run proximity checks, and perform spatial overlays or joins.\n- üîπ **Raster & Vector Support** ‚Äì Process raster layers, compute indices like NDVI, clip, resample, and merge with vector data.\n- üîπ **Spatial Statistics & Modeling** ‚Äì Leverage PySAL for spatial autocorrelation, clustering, and neighborhood analysis.\n- üîπ **Easy Integration** ‚Äì Connect seamlessly with MCP-compatible clients like Claude Desktop or Cursor IDE.\n- üîπ **Flexible & Extensible** ‚Äì Supports Python-based GIS libraries and is ready for custom tools or workflow extensions.\n\n> üåü **Tip:** With GIS MCP Server, your AI can now ‚Äúthink spatially,‚Äù unlocking new capabilities for environmental analysis, mapping, and location intelligence.\n\n---\n\n## üìã Prerequisites\n\n- Python 3.10 or higher\n- MCP-compatible client (like Claude Desktop or Cursor)\n- Internet connection for package installation\n\n## üõ† Installation\n\nChoose the installation method that best suits your needs:\n\n### üõ† Installing via Smithery\n\nTo install GIS MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mahdin75/gis-mcp):\n\n```bash\nnpx -y @smithery/cli install @mahdin75/gis-mcp --client claude\n```\n\n### üì¶ pip Installation\n\nThe pip installation is recommended for most users:\n\n1. Install uv package manager:\n\n```bash\npip install uv\n```\n\n2. Create the Virtual Environment (Python 3.10+):\n\n```bash\nuv venv --python=3.10\n```\n\n3. Install the package:\n\n```bash\nuv pip install gis-mcp\n```\n\n4. Start the server:\n\n```bash\ngis-mcp\n```\n\n#### pip Configuration\n\nTo use the pip installation with Claude or Cursor, add the following configuration:\n\n**Claude Desktop:**\n\n**Windows:**\n\n```json\n{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"C:\\\\Users\\\\YourUsername\\\\.venv\\\\Scripts\\\\gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n```\n\n**Linux/Mac:**\n\n```json\n{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"/home/YourUsername/.venv/bin/gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n```\n\n**Cursor IDE** (create `.cursor/mcp.json`):\n\n**Windows:**\n\n```json\n{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"C:\\\\Users\\\\YourUsername\\\\.venv\\\\Scripts\\\\gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n```\n\n**Linux/Mac:**\n\n```json\n{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"/home/YourUsername/.venv/bin/gis-mcp\",\n      \"args\": []\n    }\n  }\n}\n```\n\nAfter configuration:\n\n1. Make sure to replace `YourUsername` with your actual username\n2. For development installation, replace `/path/to/gis-mcp` with the actual path to your project\n3. Restart your IDE to apply the changes\n4. You can now use all GIS operations through Claude or Cursor!\n\n### üõ† Development Installation\n\nFor contributors and developers:\n\n1. Install uv package manager:\n\n```bash\npip install uv\n```\n\n2. Create the Virtual Environment:\n\n```bash\nuv venv --python=3.10\n```\n\n3. Install the package in development mode:\n\n```bash\nuv pip install -e .\n```\n\n4. Start the server:\n\n```bash\npython -m gis_mcp\n```\n\n#### Development Configuration\n\nTo use the development installation with Claude or Cursor, add the following configuration:\n\n**Claude Desktop:**\n\n**Windows:**\n\n```json\n{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"C:\\\\path\\\\to\\\\gis-mcp\\\\.venv\\\\Scripts\\\\python\",\n      \"args\": [\"-m\", \"gis_mcp\"]\n    }\n  }\n}\n```\n\n**Linux/Mac:**\n\n```json\n{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"/path/to/gis-mcp/.venv/bin/python\",\n      \"args\": [\"-m\", \"gis_mcp\"]\n    }\n  }\n}\n```\n\n**Cursor IDE** (create `.cursor/mcp.json`):\n\n**Windows:**\n\n```json\n{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"C:\\\\path\\\\to\\\\gis-mcp\\\\.venv\\\\Scripts\\\\python\",\n      \"args\": [\"-m\", \"gis_mcp\"]\n    }\n  }\n}\n```\n\n**Linux/Mac:**\n\n```json\n{\n  \"mcpServers\": {\n    \"gis-mcp\": {\n      \"command\": \"/path/to/gis-mcp/.venv/bin/python\",\n      \"args\": [\"-m\", \"gis_mcp\"]\n    }\n  }\n}\n```\n\nAfter configuration:\n\n1. Make sure to replace `YourUsername` with your actual username\n2. For development installation, replace `/path/to/gis-mcp` with the actual path to your project\n3. Restart your IDE to apply the changes\n4. You can now use all GIS operations through Claude or Cursor!\n\n## üìö Available Functions\n\nThis section provides a comprehensive list of all available functions organized by library.\n\n### üî∑ Shapely Functions (29 total)\n\n**Basic Geometric Operations:**\n\n- `buffer` - Create buffer around geometry\n- `intersection` - Find intersection of two geometries\n- `union` - Combine two geometries\n- `difference` - Find difference between geometries\n- `symmetric_difference` - Find symmetric difference\n\n**Geometric Properties:**\n\n- `convex_hull` - Calculate convex hull\n- `envelope` - Get bounding box\n- `minimum_rotated_rectangle` - Get minimum rotated rectangle\n- `get_centroid` - Get centroid point\n- `get_bounds` - Get geometry bounds\n- `get_coordinates` - Extract coordinate array\n- `get_geometry_type` - Get geometry type name\n\n**Transformations:**\n\n- `rotate_geometry` - Rotate geometry by angle\n- `scale_geometry` - Scale geometry by factors\n- `translate_geometry` - Move geometry by offset\n\n**Advanced Operations:**\n\n- `triangulate_geometry` - Create triangulation\n- `voronoi` - Create Voronoi diagram\n- `unary_union_geometries` - Union multiple geometries\n\n**Measurements:**\n\n- `get_length` - Calculate geometry length\n- `get_area` - Calculate geometry area\n\n**Validation & Utilities:**\n\n- `is_valid` - Check geometry validity\n- `make_valid` - Fix invalid geometry\n- `simplify` - Simplify geometry\n- `snap_geometry` - Snap to reference geometry\n- `nearest_point_on_geometry` - Find nearest point\n- `normalize_geometry` - Normalize orientation\n- `geometry_to_geojson` - Convert to GeoJSON\n- `geojson_to_geometry` - Convert from GeoJSON\n\n### üî∑ PyProj Functions (13 total)\n\n**Coordinate Transformations:**\n\n- `transform_coordinates` - Transform point coordinates\n- `project_geometry` - Project geometry between CRS\n\n**CRS Information:**\n\n- `get_crs_info` - Get detailed CRS information\n- `get_available_crs` - List available CRS systems\n- `get_utm_zone` - Get UTM zone for coordinates\n- `get_utm_crs` - Get UTM CRS for coordinates\n- `get_geocentric_crs` - Get geocentric CRS\n\n**Geodetic Calculations:**\n\n- `get_geod_info` - Get ellipsoid information\n- `calculate_geodetic_distance` - Calculate distance on ellipsoid\n- `calculate_geodetic_point` - Calculate point at distance/azimuth\n- `calculate_geodetic_area` - Calculate area on ellipsoid\n\n### üî∑ GeoPandas Functions (13 total)\n\n**I/O Operations:**\n\n- `read_file_gpd` - Read geospatial file with preview\n- `write_file_gpd` - Export GeoDataFrame to file\n\n**Join & Merge Operations:**\n\n- `append_gpd` - Concatenate GeoDataFrames vertically\n- `merge_gpd` - Database-style attribute joins\n- `overlay_gpd` - Spatial overlay operations\n- `dissolve_gpd` - Dissolve by attribute\n- `explode_gpd` - Split multi-part geometries\n\n**Spatial Operations:**\n\n- `clip_vector` - Clip geometries\n- `sjoin_gpd` - Spatial joins\n- `sjoin_nearest_gpd` - Nearest neighbor spatial joins\n- `point_in_polygon` - Point-in-polygon tests\n\n### üî∑ Rasterio Functions (20 total)\n\n**Basic Raster Operations:**\n\n- `metadata_raster` - Get raster metadata\n- `get_raster_crs` - Get raster CRS\n- `extract_band` - Extract single band\n- `raster_band_statistics` - Calculate band statistics\n- `raster_histogram` - Compute pixel histograms\n\n**Raster Processing:**\n\n- `clip_raster_with_shapefile` - Clip raster with polygons\n- `resample_raster` - Resample by scale factor\n- `reproject_raster` - Reproject to new CRS\n- `tile_raster` - Split into tiles\n\n**Raster Analysis:**\n\n- `compute_ndvi` - Calculate vegetation index\n- `raster_algebra` - Mathematical operations on bands\n- `concat_bands` - Combine single-band rasters\n- `weighted_band_sum` - Weighted band combination\n\n**Advanced Analysis:**\n\n- `zonal_statistics` - Statistics within polygons\n- `reclassify_raster` - Reclassify pixel values\n- `focal_statistics` - Moving window statistics\n- `hillshade` - Generate hillshade from DEM\n- `write_raster` - Write array to raster file\n\n### üî∑ PySAL Functions (15 total)\n\n**Spatial Autocorrelation:**\n\n- `morans_i` - Global Moran's I statistic\n- `gearys_c` - Global Geary's C statistic\n- `gamma_statistic` - Gamma index\n- `getis_ord_g` - Global Getis-Ord G statistic\n\n**Local Statistics:**\n\n- `moran_local` - Local Moran's I\n- `getis_ord_g_local` - Local Getis-Ord G\\*\n- `join_counts_local` - Local join counts\n\n**Global Statistics:**\n\n- `join_counts` - Binary join counts test\n- `adbscan` - Adaptive density-based clustering\n\n**Spatial Weights:**\n\n- `weights_from_shapefile` - Create weights from shapefile\n- `distance_band_weights` - Distance-based weights\n- `knn_weights` - K-nearest neighbors weights\n- `build_transform_and_save_weights` - Build, transform, and save weights\n- `ols_with_spatial_diagnostics_safe` - OLS regression with spatial diagnostics\n- `build_and_transform_weights` - Build and transform weights\n\n### üî∑ Administrative Boundaries Functions (1 total)\n\n**Boundary Download:**\n\n- `download_boundaries` - Download GADM administrative boundaries and save as GeoJSON\n\n### üî∑ Climate Data Functions (1 total)\n\n**Climate Data Download:**\n\n- `download_climate_data` - Download climate data (ERA5 or other CDS datasets)\n\n### üî∑ Ecology Data Functions (2 total)\n\n**Ecology Data Download and Info:**\n\n- `get_species_info` ‚Äì Retrieve taxonomic information for a given species name\n- `download_species_occurrences` ‚Äì Download occurrence records for a given species and save as JSON\n\n### üî∑ Movement Data Functions (2 total)\n\n**Movement Data Download and Routing (via [OSMnx](https://osmnx.readthedocs.io/en/stable/)):**\n\n- `download_street_network` ‚Äì Download a street network for a given place and save as GraphML\n- `calculate_shortest_path` ‚Äì Calculate the shortest path between two points using a saved street network\n\n### üî∑ Land Cover Data Functions (2 total)\n\n**Land Cover from Planetary Computer:**\n\n- `download_worldcover` ‚Äì Download ESA WorldCover for AOI/year; optional crop and reprojection\n- `compute_s2_ndvi` ‚Äì Compute NDVI from Sentinel-2 L2A; crop and reprojection supported\n\n### üî∑ Satellite Imagery Functions (1 total)\n\n**STAC-based Satellite Download:**\n\n- `download_satellite_imagery` ‚Äì Download and stack bands from STAC items (e.g., Sentinel-2, Landsat), with optional crop and reprojection\n\n**Total Functions Available: 89**\n\n## üõ† Client Development\n\nExample usage of the tools:\n\n### Buffer Operation\n\n```python\nTool: buffer\nParameters: {\n    \"geometry\": \"POINT(0 0)\",\n    \"distance\": 10,\n    \"resolution\": 16,\n    \"join_style\": 1,\n    \"mitre_limit\": 5.0,\n    \"single_sided\": false\n}\n```\n\n### Coordinate Transformation\n\n```python\nTool: transform_coordinates\nParameters: {\n    \"coordinates\": [0, 0],\n    \"source_crs\": \"EPSG:4326\",\n    \"target_crs\": \"EPSG:3857\"\n}\n```\n\n### Geodetic Distance\n\n```python\nTool: calculate_geodetic_distance\nParameters: {\n    \"point1\": [0, 0],\n    \"point2\": [10, 10],\n    \"ellps\": \"WGS84\"\n}\n```\n\n## üîÆ Planned Features\n\n- Implement advanced spatial indexing\n- Implement network analysis capabilities\n- Add support for 3D geometries\n- Implement performance optimizations\n- Add support for more GIS libraries\n\n## ü§ù Contributing\n\nWe welcome contributions! Here's how you can help:\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\nPlease ensure your PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## üîó Related Projects\n\n| Project Name                                                                                        | Category                   | Description                                                                                                   |\n| --------------------------------------------------------------------------------------------------- | -------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| [Model Context Protocol](https://github.com/anthropics/model-context-protocol)                      | MCP Related                | The core MCP implementation                                                                                   |\n| [Shapely](https://github.com/shapely/shapely)                                                       | Geospatial Analysis        | Python package for manipulation and analysis of geometric objects                                             |\n| [PyProj](https://github.com/pyproj4/pyproj)                                                         | Geospatial Analysis        | Python interface to PROJ library                                                                              |\n| [GeoPandas](https://github.com/geopandas/geopandas)                                                 | Geospatial Analysis        | Python package for working with geospatial data                                                               |\n| [Rasterio](https://github.com/rasterio/rasterio)                                                    | Geospatial Analysis        | Python package for reading and writing geospatial raster data                                                 |\n| [PySAL](https://github.com/pysal/pysal)                                                             | Geospatial Analysis        | Python spatial analysis library for geospatial data science                                                   |\n| [cdsapi](https://github.com/ecmwf/cdsapi)                                                           | Geospatial Data Collecting | Python API to access the Copernicus Climate Data Store (CDS)                                                  |\n| [pygadm](https://github.com/12rambau/pygadm)                                                        | Geospatial Data Collecting | Easy access to administrative boundary defined by GADM from Python scripts                                    |\n| [pygbif](https://github.com/gbif/pygbif)                                                            | Geospatial Data Collecting | Python client for the GBIF API (ecology and biodiversity data)                                                |\n| [OSMnx](https://osmnx.readthedocs.io/en/stable/)                                                    | Geospatial Data Collecting | Python package for downloading, modeling, and analyzing street networks and urban features from OpenStreetMap |\n| [pystac-client](https://github.com/stac-utils/pystac-client)                                        | Geospatial Data Collecting | Python client for STAC catalogs; search and access spatiotemporal assets                                      |\n| [Planetary Computer SDK for Python](https://github.com/microsoft/planetary-computer-sdk-for-python) | Geospatial Data Collecting | Python SDK for Microsoft Planetary Computer; auth and helpers for STAC/COGs                                   |\n\n## üìû Support\n\nFor support, please open an issue in the GitHub repository.\n\n## üí¨ Community\n\nJoin our Discord community for discussions, updates, and support:\n\n[![Join our Discord](https://img.shields.io/badge/Discord-Join%20our%20community-7289DA?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/dzkXZsZK)\n\n## üë• Contributors\n\n<a href=\"https://github.com/mahdin75/gis-mcp/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=mahdin75/gis-mcp\" />\n</a>\n\nMade with [contrib.rocks](https://contrib.rocks).\n\n<br/>\n\n## üèÜ Badges\n\n<div align=\"center\">\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/mahdin75/gis-mcp)](https://archestra.ai/mcp-catalog/mahdin75__gis-mcp)\n<br/></br>\n\n  <a href=\"https://glama.ai/mcp/servers/@mahdin75/gis-mcp\">\n    <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mahdin75/gis-mcp/badge\" alt=\"GIS Server MCP server\" />\n  </a>\n  <br/><br/><br/>\n  \n  <a href=\"https://mcp.so/server/gis-mcp-server/mahdin75\">\n    <img src=\"https://mcp.so/logo.png\" alt=\"MCP.so Badge\" width=\"150\"/>\n  </a>\n</div>\n",
  "category": "AI Tools",
  "quality_score": 41,
  "archestra_config": {
    "client_config_permutations": {
      "gis-mcp": {
        "command": "gis-mcp",
        "args": [],
        "env": {}
      },
      "gis-mcp-configured": {
        "command": "/home/YourUsername/.venv/bin/gis-mcp",
        "args": [],
        "env": {}
      },
      "gis-mcp-dev": {
        "command": "python",
        "args": ["-m", "gis_mcp"],
        "env": {}
      },
      "gis-mcp-dev-configured": {
        "command": "/path/to/gis-mcp/.venv/bin/python",
        "args": ["-m", "gis_mcp"],
        "env": {}
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": false
  },
  "github_info": {
    "owner": "mahdin75",
    "repo": "gis-mcp",
    "url": "https://github.com/mahdin75/gis-mcp",
    "name": "gis-mcp",
    "path": null,
    "stars": 31,
    "contributors": 5,
    "issues": 1,
    "releases": true,
    "ci_cd": false,
    "latest_commit_hash": "2209277e9fb8946b01a3ef9d1182257d225c8f5a"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:22.033Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "numpy",
      "importance": 8
    },
    {
      "name": "shapely",
      "importance": 9
    },
    {
      "name": "pyproj",
      "importance": 9
    },
    {
      "name": "pandas",
      "importance": 7
    },
    {
      "name": "tabulate",
      "importance": 4
    },
    {
      "name": "rasterio",
      "importance": 9
    },
    {
      "name": "fiona",
      "importance": 8
    },
    {
      "name": "geopandas",
      "importance": 10
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n\n[project]\nname = \"gis-mcp\"\nversion = \"0.2.0\"\ndescription = \"A Model Context Protocol (MCP) server implementation for GIS operations using GIS libraries\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\nlicense = {file = \"LICENSE\"}\nauthors = [\n    {name = \"Mahdi Nazari Ashani\"},\n    {name = \"Shahab Esfandiar\"},\n    {name = \"Homa Ganjali\"},\n    {name = \"GIS MCP Server Contributors\"},\n]\n\nkeywords = [\"mcp\", \"gis\", \"llm\", \"agentic AI\", \"geospatial\", \"ogc\", \"pyproj\", \"shapely\", \"geopandas\", \"rasterio\"]\n\nclassifiers = [\n    \"Development Status :: 3 - Alpha\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n]\n\ndependencies = [\n    \"mcp==1.6.0\",\n    \"numpy>=1.23,<2.0\",\n    \"shapely>=2.1.0\",\n    \"pyproj>=3.7.1\",\n    \"pandas>=2.0.0\",\n    \"tabulate>=0.9.0\",\n    \"rasterio==1.3.9\",\n    \"fiona==1.9.6\",\n    \"geopandas==1.0.0\"\n]\n\n\n[project.scripts]\ngis-mcp = \"gis_mcp.main:main\"\n\n[tool.hatch.metadata]\nallow-direct-references = true\n"
}
