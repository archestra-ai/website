{
  "name": "chrishayuk__mcp-cli",
  "display_name": "mcp-cli",
  "description": "MCP server from chrishayuk/mcp-cli",
  "author": {
    "name": "chrishayuk"
  },
  "server": {
    "command": "python",
    "args": ["${__dirname}/mcp_cli/__main__.py"],
    "env": {
      "LLM_PROVIDER": "${user_config.llm_provider}",
      "LLM_MODEL": "${user_config.llm_model}",
      "OPENAI_API_KEY": "${user_config.openai_api_key}",
      "ANTHROPIC_API_KEY": "${user_config.anthropic_api_key}",
      "MCP_TOOL_TIMEOUT": "${user_config.mcp_tool_timeout}"
    },
    "type": "local"
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "llm_provider": {
      "type": "string",
      "title": "Default LLM Provider",
      "description": "Default LLM provider to use (e.g., openai, anthropic, ollama)",
      "default": "openai",
      "required": false,
      "sensitive": false
    },
    "llm_model": {
      "type": "string",
      "title": "Default LLM Model",
      "description": "Default LLM model to use (provider-dependent)",
      "default": "gpt-4o-mini",
      "required": false,
      "sensitive": false
    },
    "openai_api_key": {
      "type": "string",
      "title": "OpenAI API Key",
      "description": "Your OpenAI API key",
      "sensitive": true,
      "required": false
    },
    "anthropic_api_key": {
      "type": "string",
      "title": "Anthropic API Key",
      "description": "Your Anthropic API key",
      "sensitive": true,
      "required": false
    },
    "mcp_tool_timeout": {
      "type": "number",
      "title": "MCP Tool Timeout (seconds)",
      "description": "Tool execution timeout in seconds",
      "default": 120,
      "min": 1,
      "max": 300,
      "required": false
    }
  },
  "readme": "# MCP CLI - Model Context Protocol Command Line Interface\n\nA powerful, feature-rich command-line interface for interacting with Model Context Protocol servers. This client enables seamless communication with LLMs through integration with the [CHUK Tool Processor](https://github.com/chrishayuk/chuk-tool-processor) and [CHUK-LLM](https://github.com/chrishayuk/chuk-llm), providing tool usage, conversation management, and multiple operational modes.\n\n**Default Configuration**: MCP CLI defaults to using Ollama with the `gpt-oss` reasoning model for local, privacy-focused operation without requiring API keys.\n\n## üîÑ Architecture Overview\n\nThe MCP CLI is built on a modular architecture with clean separation of concerns:\n\n- **[CHUK Tool Processor](https://github.com/chrishayuk/chuk-tool-processor)**: Async-native tool execution and MCP server communication\n- **[CHUK-LLM](https://github.com/chrishayuk/chuk-llm)**: Unified LLM provider configuration and client management with 200+ auto-generated functions\n- **[CHUK-Term](https://github.com/chrishayuk/chuk-term)**: Enhanced terminal UI with themes, cross-platform terminal management, and rich formatting\n- **MCP CLI**: Command orchestration and integration layer (this project)\n\n## üåü Features\n\n### Multiple Operational Modes\n- **Chat Mode**: Conversational interface with streaming responses and automated tool usage (default: Ollama/gpt-oss)\n- **Interactive Mode**: Command-driven shell interface for direct server operations\n- **Command Mode**: Unix-friendly mode for scriptable automation and pipelines\n- **Direct Commands**: Run individual commands without entering interactive mode\n\n### Advanced Chat Interface\n- **Streaming Responses**: Real-time response generation with live UI updates\n- **Reasoning Visibility**: See AI's thinking process with reasoning models (gpt-oss, GPT-5, Claude 4)\n- **Concurrent Tool Execution**: Execute multiple tools simultaneously while preserving conversation order\n- **Smart Interruption**: Interrupt streaming responses or tool execution with Ctrl+C\n- **Performance Metrics**: Response timing, words/second, and execution statistics\n- **Rich Formatting**: Markdown rendering, syntax highlighting, and progress indicators\n\n### Comprehensive Provider Support\n\nMCP CLI supports all providers and models from CHUK-LLM, including cutting-edge reasoning models:\n\n| Provider | Key Models | Special Features |\n|----------|------------|------------------|\n| **Ollama** (Default) | üß† gpt-oss, llama3.3, llama3.2, qwen3, qwen2.5-coder, deepseek-coder, granite3.3, mistral, gemma3, phi3, codellama | Local reasoning models, privacy-focused, no API key required |\n| **OpenAI** | üöÄ GPT-5 family (gpt-5, gpt-5-mini, gpt-5-nano), GPT-4o family, O3 series (o3, o3-mini) | Advanced reasoning, function calling, vision |\n| **Anthropic** | üß† Claude 4 family (claude-4-1-opus, claude-4-sonnet), Claude 3.5 Sonnet | Enhanced reasoning, long context |\n| **Azure OpenAI** üè¢ | Enterprise GPT-5, GPT-4 models | Private endpoints, compliance, audit logs |\n| **Google Gemini** | Gemini 2.0 Flash, Gemini 1.5 Pro | Multimodal, fast inference |\n| **Groq** ‚ö° | Llama 3.1 models, Mixtral | Ultra-fast inference (500+ tokens/sec) |\n| **Perplexity** üåê | Sonar models | Real-time web search with citations |\n| **IBM watsonx** üè¢ | Granite, Llama models | Enterprise compliance |\n| **Mistral AI** üá™üá∫ | Mistral Large, Medium | European, efficient models |\n\n### Robust Tool System\n- **Automatic Discovery**: Server-provided tools are automatically detected and catalogued\n- **Provider Adaptation**: Tool names are automatically sanitized for provider compatibility\n- **Concurrent Execution**: Multiple tools can run simultaneously with proper coordination\n- **Rich Progress Display**: Real-time progress indicators and execution timing\n- **Tool History**: Complete audit trail of all tool executions\n- **Streaming Tool Calls**: Support for tools that return streaming data\n\n### Advanced Configuration Management\n- **Environment Integration**: API keys and settings via environment variables\n- **File-based Config**: YAML and JSON configuration files\n- **User Preferences**: Persistent settings for active providers and models\n- **Validation & Diagnostics**: Built-in provider health checks and configuration validation\n\n### Enhanced User Experience\n- **Cross-Platform Support**: Windows, macOS, and Linux with platform-specific optimizations via chuk-term\n- **Rich Console Output**: Powered by chuk-term with 8 built-in themes (default, dark, light, minimal, terminal, monokai, dracula, solarized)\n- **Advanced Terminal Management**: Cross-platform terminal operations including clearing, resizing, color detection, and cursor control\n- **Interactive UI Components**: User input handling through chuk-term's prompt system (ask, confirm, select_from_list, select_multiple)\n- **Command Completion**: Context-aware tab completion for all interfaces\n- **Comprehensive Help**: Detailed help system with examples and usage patterns\n- **Graceful Error Handling**: User-friendly error messages with troubleshooting hints\n\n## üìã Prerequisites\n\n- **Python 3.11 or higher**\n- **For Local Operation (Default)**:\n  - Ollama: Install from [ollama.ai](https://ollama.ai)\n  - Pull the default reasoning model: `ollama pull gpt-oss`\n- **For Cloud Providers** (Optional):\n  - OpenAI: `OPENAI_API_KEY` environment variable (for GPT-5, GPT-4, O3 models)\n  - Anthropic: `ANTHROPIC_API_KEY` environment variable (for Claude 4, Claude 3.5)\n  - Azure: `AZURE_OPENAI_API_KEY` and `AZURE_OPENAI_ENDPOINT` (for enterprise GPT-5)\n  - Google: `GEMINI_API_KEY` (for Gemini models)\n  - Groq: `GROQ_API_KEY` (for fast Llama models)\n  - Custom providers: Provider-specific configuration\n- **MCP Servers**: Server configuration file (default: `server_config.json`)\n\n## üöÄ Installation\n\n### Quick Start with Ollama (Default)\n\n1. **Install Ollama** (if not already installed):\n```bash\n# macOS/Linux\ncurl -fsSL https://ollama.ai/install.sh | sh\n\n# Or visit https://ollama.ai for other installation methods\n```\n\n2. **Pull the default reasoning model**:\n```bash\nollama pull gpt-oss  # Open-source reasoning model with thinking visibility\n```\n\n3. **Install and run MCP CLI**:\n```bash\n# Using uvx (recommended)\nuvx mcp-cli --help\n\n# Or install from source\ngit clone https://github.com/chrishayuk/mcp-cli\ncd mcp-cli\npip install -e \".\"\nmcp-cli --help\n```\n\n### Using Different Models\n\n```bash\n# === LOCAL MODELS (No API Key Required) ===\n\n# Use default reasoning model (gpt-oss)\nmcp-cli --server sqlite\n\n# Use other Ollama models\nmcp-cli --model llama3.3              # Latest Llama\nmcp-cli --model qwen2.5-coder         # Coding-focused\nmcp-cli --model deepseek-coder        # Another coding model\nmcp-cli --model granite3.3            # IBM Granite\n\n# === CLOUD PROVIDERS (API Keys Required) ===\n\n# GPT-5 Family (requires OpenAI API key)\nmcp-cli --provider openai --model gpt-5          # Full GPT-5 with reasoning\nmcp-cli --provider openai --model gpt-5-mini     # Efficient GPT-5 variant\nmcp-cli --provider openai --model gpt-5-nano     # Ultra-lightweight GPT-5\n\n# GPT-4 Family\nmcp-cli --provider openai --model gpt-4o         # GPT-4 Optimized\nmcp-cli --provider openai --model gpt-4o-mini    # Smaller GPT-4\n\n# O3 Reasoning Models\nmcp-cli --provider openai --model o3             # O3 reasoning\nmcp-cli --provider openai --model o3-mini        # Efficient O3\n\n# Claude 4 Family (requires Anthropic API key)\nmcp-cli --provider anthropic --model claude-4-1-opus    # Most advanced Claude\nmcp-cli --provider anthropic --model claude-4-sonnet    # Balanced Claude 4\nmcp-cli --provider anthropic --model claude-3-5-sonnet  # Claude 3.5\n\n# Enterprise Azure (requires Azure configuration)\nmcp-cli --provider azure_openai --model gpt-5    # Enterprise GPT-5\n\n# Other Providers\nmcp-cli --provider gemini --model gemini-2.0-flash      # Google Gemini\nmcp-cli --provider groq --model llama-3.1-70b          # Fast Llama via Groq\n```\n\n## üß∞ Global Configuration\n\n### Default Configuration\n\nMCP CLI defaults to:\n- **Provider**: `ollama` (local, no API key required)\n- **Model**: `gpt-oss` (open-source reasoning model with thinking visibility)\n\n### Command-line Arguments\n\nGlobal options available for all modes and commands:\n\n- `--server`: Specify server(s) to connect to (comma-separated)\n- `--config-file`: Path to server configuration file (default: `server_config.json`)\n- `--provider`: LLM provider (default: `ollama`)\n- `--model`: Specific model to use (default: `gpt-oss` for Ollama)\n- `--disable-filesystem`: Disable filesystem access (default: enabled)\n- `--api-base`: Override API endpoint URL\n- `--api-key`: Override API key (not needed for Ollama)\n- `--verbose`: Enable detailed logging\n- `--quiet`: Suppress non-essential output\n\n### Environment Variables\n\n```bash\n# Override defaults\nexport LLM_PROVIDER=ollama              # Default provider (already the default)\nexport LLM_MODEL=gpt-oss                # Default model (already the default)\n\n# For cloud providers (optional)\nexport OPENAI_API_KEY=sk-...           # For GPT-5, GPT-4, O3 models\nexport ANTHROPIC_API_KEY=sk-ant-...    # For Claude 4, Claude 3.5\nexport AZURE_OPENAI_API_KEY=sk-...     # For enterprise GPT-5\nexport AZURE_OPENAI_ENDPOINT=https://...\nexport GEMINI_API_KEY=...              # For Gemini models\nexport GROQ_API_KEY=...                # For Groq fast inference\n\n# Tool configuration\nexport MCP_TOOL_TIMEOUT=120            # Tool execution timeout (seconds)\n```\n\n## üåê Available Modes\n\n### 1. Chat Mode (Default)\n\nProvides a natural language interface with streaming responses and automatic tool usage:\n\n```bash\n# Default mode with Ollama/gpt-oss reasoning model (no API key needed)\nmcp-cli --server sqlite\n\n# See the AI's thinking process with reasoning models\nmcp-cli --server sqlite --model gpt-oss     # Open-source reasoning\nmcp-cli --server sqlite --provider openai --model gpt-5  # GPT-5 reasoning\nmcp-cli --server sqlite --provider anthropic --model claude-4-1-opus  # Claude 4 reasoning\n\n# Use different local models\nmcp-cli --server sqlite --model llama3.3\nmcp-cli --server sqlite --model qwen2.5-coder\n\n# Switch to cloud providers (requires API keys)\nmcp-cli chat --server sqlite --provider openai --model gpt-5\nmcp-cli chat --server sqlite --provider anthropic --model claude-4-sonnet\n```\n\n### 2. Interactive Mode\n\nCommand-driven shell interface for direct server operations:\n\n```bash\nmcp-cli interactive --server sqlite\n\n# With specific models\nmcp-cli interactive --server sqlite --model gpt-oss       # Local reasoning\nmcp-cli interactive --server sqlite --provider openai --model gpt-5  # Cloud GPT-5\n```\n\n### 3. Command Mode\n\nUnix-friendly interface for automation and scripting:\n\n```bash\n# Process text with reasoning models\nmcp-cli cmd --server sqlite --model gpt-oss --prompt \"Think through this step by step\" --input data.txt\n\n# Use GPT-5 for complex reasoning\nmcp-cli cmd --server sqlite --provider openai --model gpt-5 --prompt \"Analyze this data\" --input data.txt\n\n# Execute tools directly\nmcp-cli cmd --server sqlite --tool list_tables --output tables.json\n\n# Pipeline-friendly processing\necho \"SELECT * FROM users LIMIT 5\" | mcp-cli cmd --server sqlite --tool read_query --input -\n```\n\n### 4. Direct Commands\n\nExecute individual commands without entering interactive mode:\n\n```bash\n# List available tools\nmcp-cli tools --server sqlite\n\n# Show provider configuration\nmcp-cli provider list\n\n# Show available models for current provider\nmcp-cli models\n\n# Show models for specific provider\nmcp-cli models openai    # Shows GPT-5, GPT-4, O3 models\nmcp-cli models anthropic # Shows Claude 4, Claude 3.5 models\nmcp-cli models ollama    # Shows gpt-oss, llama3.3, etc.\n\n# Ping servers\nmcp-cli ping --server sqlite\n\n# List resources\nmcp-cli resources --server sqlite\n\n# UI Theme Management\nmcp-cli theme                     # Show current theme and list available\nmcp-cli theme dark                # Switch to dark theme\nmcp-cli theme --select            # Interactive theme selector\nmcp-cli theme --list              # List all available themes\n```\n\n## ü§ñ Using Chat Mode\n\nChat mode provides the most advanced interface with streaming responses and intelligent tool usage.\n\n### Starting Chat Mode\n\n```bash\n# Simple startup with default reasoning model (gpt-oss)\nmcp-cli --server sqlite\n\n# Multiple servers\nmcp-cli --server sqlite,filesystem\n\n# With advanced reasoning models\nmcp-cli --server sqlite --provider openai --model gpt-5\nmcp-cli --server sqlite --provider anthropic --model claude-4-1-opus\n```\n\n### Chat Commands (Slash Commands)\n\n#### Provider & Model Management\n```bash\n/provider                           # Show current configuration (default: ollama)\n/provider list                      # List all providers\n/provider config                    # Show detailed configuration\n/provider diagnostic               # Test provider connectivity\n/provider set ollama api_base http://localhost:11434  # Configure Ollama endpoint\n/provider openai                   # Switch to OpenAI (requires API key)\n/provider anthropic                # Switch to Anthropic (requires API key)\n/provider openai gpt-5             # Switch to OpenAI GPT-5\n\n/model                             # Show current model (default: gpt-oss)\n/model llama3.3                    # Switch to different Ollama model\n/model gpt-5                       # Switch to GPT-5 (if using OpenAI)\n/model claude-4-1-opus             # Switch to Claude 4 (if using Anthropic)\n/models                            # List available models for current provider\n```\n\n#### Tool Management\n```bash\n/tools                             # List available tools\n/tools --all                       # Show detailed tool information\n/tools --raw                       # Show raw JSON definitions\n/tools call                        # Interactive tool execution\n\n/toolhistory                       # Show tool execution history\n/th -n 5                          # Last 5 tool calls\n/th 3                             # Details for call #3\n/th --json                        # Full history as JSON\n```\n\n#### Conversation Management\n```bash\n/conversation                      # Show conversation history\n/ch -n 10                         # Last 10 messages\n/ch 5                             # Details for message #5\n/ch --json                        # Full history as JSON\n\n/save conversation.json            # Save conversation to file\n/compact                          # Summarize conversation\n/clear                            # Clear conversation history\n/cls                              # Clear screen only\n```\n\n#### UI Customization\n```bash\n/theme                            # Interactive theme selector with preview\n/theme dark                       # Switch to dark theme\n/theme monokai                    # Switch to monokai theme\n\n# Available themes: default, dark, light, minimal, terminal, monokai, dracula, solarized\n# Themes are persisted across sessions\n```\n\n#### Session Control\n```bash\n/verbose                          # Toggle verbose/compact display (Default: Enabled)\n/confirm                          # Toggle tool call confirmation (Default: Enabled)\n/interrupt                        # Stop running operations\n/servers                          # List connected servers\n/help                            # Show all commands\n/help tools                       # Help for specific command\n/exit                            # Exit chat mode\n```\n\n### Chat Features\n\n#### Streaming Responses with Reasoning Visibility\n- **üß† Reasoning Models**: See the AI's thinking process with gpt-oss, GPT-5, Claude 4\n- **Real-time Generation**: Watch text appear token by token\n- **Performance Metrics**: Words/second, response time\n- **Graceful Interruption**: Ctrl+C to stop streaming\n- **Progressive Rendering**: Markdown formatted as it streams\n\n#### Tool Execution\n- Automatic tool discovery and usage\n- Concurrent execution with progress indicators\n- Verbose and compact display modes\n- Complete execution history and timing\n\n#### Provider Integration\n- Seamless switching between providers\n- Model-specific optimizations\n- API key and endpoint management\n- Health monitoring and diagnostics\n\n## üñ•Ô∏è Using Interactive Mode\n\nInteractive mode provides a command shell for direct server interaction.\n\n### Starting Interactive Mode\n\n```bash\nmcp-cli interactive --server sqlite\n```\n\n### Interactive Commands\n\n```bash\nhelp                              # Show available commands\nexit                              # Exit interactive mode\nclear                             # Clear terminal\n\n# Provider management\nprovider                          # Show current provider\nprovider list                     # List providers\nprovider anthropic                # Switch provider\nprovider openai gpt-5             # Switch to GPT-5\n\n# Model management\nmodel                             # Show current model\nmodel gpt-oss                     # Switch to reasoning model\nmodel claude-4-1-opus             # Switch to Claude 4\nmodels                            # List available models\n\n# Tool operations\ntools                             # List tools\ntools --all                       # Detailed tool info\ntools call                        # Interactive tool execution\n\n# Server operations\nservers                           # List servers\nping                              # Ping all servers\nresources                         # List resources\nprompts                           # List prompts\n```\n\n## üìÑ Using Command Mode\n\nCommand mode provides Unix-friendly automation capabilities.\n\n### Command Mode Options\n\n```bash\n--input FILE                      # Input file (- for stdin)\n--output FILE                     # Output file (- for stdout)\n--prompt TEXT                     # Prompt template\n--tool TOOL                       # Execute specific tool\n--tool-args JSON                  # Tool arguments as JSON\n--system-prompt TEXT              # Custom system prompt\n--raw                             # Raw output without formatting\n--single-turn                     # Disable multi-turn conversation\n--max-turns N                     # Maximum conversation turns\n```\n\n### Examples\n\n```bash\n# Text processing with reasoning models\necho \"Analyze this data\" | mcp-cli cmd --server sqlite --model gpt-oss --input - --output analysis.txt\n\n# Use GPT-5 for complex analysis\nmcp-cli cmd --server sqlite --provider openai --model gpt-5 --prompt \"Provide strategic analysis\" --input report.txt\n\n# Tool execution\nmcp-cli cmd --server sqlite --tool list_tables --raw\n\n# Complex queries\nmcp-cli cmd --server sqlite --tool read_query --tool-args '{\"query\": \"SELECT COUNT(*) FROM users\"}'\n\n# Batch processing with GNU Parallel\nls *.txt | parallel mcp-cli cmd --server sqlite --input {} --output {}.summary --prompt \"Summarize: {{input}}\"\n```\n\n## üîß Provider Configuration\n\n### Ollama Configuration (Default)\n\nOllama runs locally by default on `http://localhost:11434`. To use reasoning and other models:\n\n```bash\n# Pull reasoning and other models for Ollama\nollama pull gpt-oss          # Default reasoning model\nollama pull llama3.3         # Latest Llama\nollama pull llama3.2         # Llama 3.2\nollama pull qwen3            # Qwen 3\nollama pull qwen2.5-coder    # Coding-focused\nollama pull deepseek-coder   # DeepSeek coder\nollama pull granite3.3       # IBM Granite\nollama pull mistral          # Mistral\nollama pull gemma3           # Google Gemma\nollama pull phi3             # Microsoft Phi\nollama pull codellama        # Code Llama\n\n# List available Ollama models\nollama list\n\n# Configure remote Ollama server\nmcp-cli provider set ollama api_base http://remote-server:11434\n```\n\n### Cloud Provider Configuration\n\nTo use cloud providers with advanced models, configure API keys:\n\n```bash\n# Configure OpenAI (for GPT-5, GPT-4, O3 models)\nmcp-cli provider set openai api_key sk-your-key-here\n\n# Configure Anthropic (for Claude 4, Claude 3.5)\nmcp-cli provider set anthropic api_key sk-ant-your-key-here\n\n# Configure Azure OpenAI (for enterprise GPT-5)\nmcp-cli provider set azure_openai api_key sk-your-key-here\nmcp-cli provider set azure_openai api_base https://your-resource.openai.azure.com\n\n# Configure other providers\nmcp-cli provider set gemini api_key your-gemini-key\nmcp-cli provider set groq api_key your-groq-key\n\n# Test configuration\nmcp-cli provider diagnostic openai\nmcp-cli provider diagnostic anthropic\n```\n\n### Manual Configuration\n\nThe `chuk_llm` library configuration in `~/.chuk_llm/config.yaml`:\n\n```yaml\nollama:\n  api_base: http://localhost:11434\n  default_model: gpt-oss\n\nopenai:\n  api_base: https://api.openai.com/v1\n  default_model: gpt-5\n\nanthropic:\n  api_base: https://api.anthropic.com\n  default_model: claude-4-1-opus\n\nazure_openai:\n  api_base: https://your-resource.openai.azure.com\n  default_model: gpt-5\n\ngemini:\n  api_base: https://generativelanguage.googleapis.com\n  default_model: gemini-2.0-flash\n\ngroq:\n  api_base: https://api.groq.com\n  default_model: llama-3.1-70b\n```\n\nAPI keys (if using cloud providers) in `~/.chuk_llm/.env`:\n\n```bash\nOPENAI_API_KEY=sk-your-key-here\nANTHROPIC_API_KEY=sk-ant-your-key-here\nAZURE_OPENAI_API_KEY=sk-your-azure-key-here\nGEMINI_API_KEY=your-gemini-key\nGROQ_API_KEY=your-groq-key\n```\n\n## üìÇ Server Configuration\n\nCreate a `server_config.json` file with your MCP server configurations:\n\n```json\n{\n  \"mcpServers\": {\n    \"sqlite\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"mcp_server.sqlite_server\"],\n      \"env\": {\n        \"DATABASE_PATH\": \"database.db\"\n      }\n    },\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"],\n      \"env\": {}\n    },\n    \"brave-search\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-brave-search\"],\n      \"env\": {\n        \"BRAVE_API_KEY\": \"your-brave-api-key\"\n      }\n    }\n  }\n}\n```\n\n## üìà Advanced Usage Examples\n\n### Reasoning Model Comparison\n\n```bash\n# Compare reasoning across different models\n> /provider ollama\n> /model gpt-oss\n> Think through this problem step by step: If a train leaves New York at 3 PM...\n[See the complete thinking process with gpt-oss]\n\n> /provider openai\n> /model gpt-5\n> Think through this problem step by step: If a train leaves New York at 3 PM...\n[See GPT-5's reasoning approach]\n\n> /provider anthropic\n> /model claude-4-1-opus\n> Think through this problem step by step: If a train leaves New York at 3 PM...\n[See Claude 4's analytical process]\n```\n\n### Local-First Workflow with Reasoning\n\n```bash\n# Start with default Ollama/gpt-oss (no API key needed)\nmcp-cli chat --server sqlite\n\n# Use reasoning model for complex problems\n> Think through this database optimization problem step by step\n[gpt-oss shows its complete thinking process before answering]\n\n# Try different local models for different tasks\n> /model llama3.3              # General purpose\n> /model qwen2.5-coder         # For coding tasks\n> /model deepseek-coder        # Alternative coding model\n> /model granite3.3            # IBM's model\n> /model gpt-oss               # Back to reasoning model\n\n# Switch to cloud when needed (requires API keys)\n> /provider openai\n> /model gpt-5\n> Complex enterprise architecture design...\n\n> /provider anthropic\n> /model claude-4-1-opus\n> Detailed strategic analysis...\n\n> /provider ollama\n> /model gpt-oss\n> Continue with local processing...\n```\n\n### Multi-Provider Workflow\n\n```bash\n# Start with local reasoning (default, no API key)\nmcp-cli chat --server sqlite\n\n# Compare responses across providers\n> /provider ollama\n> What's the best way to optimize this SQL query?\n\n> /provider openai gpt-5        # Requires API key\n> What's the best way to optimize this SQL query?\n\n> /provider anthropic claude-4-sonnet  # Requires API key\n> What's the best way to optimize this SQL query?\n\n# Use each provider's strengths\n> /provider ollama gpt-oss      # Local reasoning, privacy\n> /provider openai gpt-5        # Advanced reasoning\n> /provider anthropic claude-4-1-opus  # Deep analysis\n> /provider groq llama-3.1-70b  # Ultra-fast responses\n```\n\n### Complex Tool Workflows with Reasoning\n\n```bash\n# Use reasoning model for complex database tasks\n> /model gpt-oss\n> I need to analyze our database performance. Think through what we should check first.\n[gpt-oss shows thinking: \"First, I should check the table structure, then indexes, then query patterns...\"]\n[Tool: list_tables] ‚Üí products, customers, orders\n\n> Now analyze the indexes and suggest optimizations\n[gpt-oss thinks through index analysis]\n[Tool: describe_table] ‚Üí Shows current indexes\n[Tool: read_query] ‚Üí Analyzes query patterns\n\n> Create an optimization plan based on your analysis\n[Complete reasoning process followed by specific recommendations]\n```\n\n### Automation and Scripting\n\n```bash\n# Batch processing with different models\nfor file in data/*.csv; do\n  # Use reasoning model for analysis\n  mcp-cli cmd --server sqlite \\\n    --model gpt-oss \\\n    --prompt \"Analyze this data and think through patterns\" \\\n    --input \"$file\" \\\n    --output \"analysis/$(basename \"$file\" .csv)_reasoning.txt\"\n  \n  # Use coding model for generating scripts\n  mcp-cli cmd --server sqlite \\\n    --model qwen2.5-coder \\\n    --prompt \"Generate Python code to process this data\" \\\n    --input \"$file\" \\\n    --output \"scripts/$(basename \"$file\" .csv)_script.py\"\ndone\n\n# Pipeline with reasoning\ncat complex_problem.txt | \\\n  mcp-cli cmd --model gpt-oss --prompt \"Think through this step by step\" --input - | \\\n  mcp-cli cmd --model llama3.3 --prompt \"Summarize the key points\" --input - > solution.txt\n```\n\n### Performance Monitoring\n\n```bash\n# Check provider and model performance\n> /provider diagnostic\nProvider Diagnostics\nProvider      | Status      | Response Time | Features      | Models\nollama        | ‚úÖ Ready    | 56ms         | üì°üîß         | gpt-oss, llama3.3, qwen3, ...\nopenai        | ‚úÖ Ready    | 234ms        | üì°üîßüëÅÔ∏è      | gpt-5, gpt-4o, o3, ...\nanthropic     | ‚úÖ Ready    | 187ms        | üì°üîß         | claude-4-1-opus, claude-4-sonnet, ...\nazure_openai  | ‚úÖ Ready    | 198ms        | üì°üîßüëÅÔ∏è      | gpt-5, gpt-4o, ...\ngemini        | ‚úÖ Ready    | 156ms        | üì°üîßüëÅÔ∏è      | gemini-2.0-flash, ...\ngroq          | ‚úÖ Ready    | 45ms         | üì°üîß         | llama-3.1-70b, ...\n\n# Check available models\n> /models\nModels for ollama (Current Provider)\nModel                | Status\ngpt-oss             | Current & Default (Reasoning)\nllama3.3            | Available\nllama3.2            | Available\nqwen2.5-coder       | Available\ndeepseek-coder      | Available\ngranite3.3          | Available\n... and 6 more\n\n# Monitor tool execution with reasoning\n> /verbose\n> /model gpt-oss\n> Analyze the database and optimize the slowest queries\n[Shows complete thinking process]\n[Tool execution with timing]\n```\n\n## üîç Troubleshooting\n\n### Common Issues\n\n1. **Ollama not running** (default provider):\n   ```bash\n   # Start Ollama service\n   ollama serve\n   \n   # Or check if it's running\n   curl http://localhost:11434/api/tags\n   ```\n\n2. **Model not found**:\n   ```bash\n   # For Ollama (default), pull the model first\n   ollama pull gpt-oss      # Reasoning model\n   ollama pull llama3.3     # Latest Llama\n   ollama pull qwen2.5-coder # Coding model\n   \n   # List available models\n   ollama list\n   \n   # For cloud providers, check supported models\n   mcp-cli models openai     # Shows GPT-5, GPT-4, O3 models\n   mcp-cli models anthropic  # Shows Claude 4, Claude 3.5 models\n   ```\n\n3. **Provider not found or API key missing**:\n   ```bash\n   # Check available providers\n   mcp-cli provider list\n   \n   # For cloud providers, set API keys\n   mcp-cli provider set openai api_key sk-your-key\n   mcp-cli provider set anthropic api_key sk-ant-your-key\n   \n   # Test connection\n   mcp-cli provider diagnostic openai\n   ```\n\n4. **Connection issues with Ollama**:\n   ```bash\n   # Check Ollama is running\n   ollama list\n   \n   # Test connection\n   mcp-cli provider diagnostic ollama\n   \n   # Configure custom endpoint if needed\n   mcp-cli provider set ollama api_base http://localhost:11434\n   ```\n\n### Debug Mode\n\nEnable verbose logging for troubleshooting:\n\n```bash\nmcp-cli --verbose chat --server sqlite\nmcp-cli --log-level DEBUG interactive --server sqlite\n```\n\n## üîí Security Considerations\n\n- **Local by Default**: Ollama with gpt-oss runs locally, keeping your data private\n- **API Keys**: Only needed for cloud providers (OpenAI, Anthropic, etc.), stored securely\n- **File Access**: Filesystem access can be disabled with `--disable-filesystem`\n- **Tool Validation**: All tool calls are validated before execution\n- **Timeout Protection**: Configurable timeouts prevent hanging operations\n- **Server Isolation**: Each server runs in its own process\n\n## üöÄ Performance Features\n\n- **Local Processing**: Default Ollama provider minimizes latency\n- **Reasoning Visibility**: See AI thinking process with gpt-oss, GPT-5, Claude 4\n- **Concurrent Tool Execution**: Multiple tools can run simultaneously\n- **Streaming Responses**: Real-time response generation\n- **Connection Pooling**: Efficient reuse of client connections\n- **Caching**: Tool metadata and provider configurations are cached\n- **Async Architecture**: Non-blocking operations throughout\n\n## üì¶ Dependencies\n\nCore dependencies are organized into feature groups:\n\n- **cli**: Terminal UI and command framework (Rich, Typer, chuk-term)\n- **dev**: Development tools, testing utilities, linting\n- **chuk-tool-processor**: Core tool execution and MCP communication\n- **chuk-llm**: Unified LLM provider management with 200+ auto-generated functions\n- **chuk-term**: Enhanced terminal UI with themes, prompts, and cross-platform support\n\nInstall with specific features:\n```bash\npip install \"mcp-cli[cli]\"        # Basic CLI features\npip install \"mcp-cli[cli,dev]\"    # CLI with development tools\n```\n\n## ü§ù Contributing\n\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\n\n### Development Setup\n\n```bash\ngit clone https://github.com/chrishayuk/mcp-cli\ncd mcp-cli\npip install -e \".[cli,dev]\"\npre-commit install\n```\n\n### UI Demo Scripts\n\nExplore the UI capabilities powered by chuk-term:\n\n```bash\n# Terminal management features\nuv run examples/ui_terminal_demo.py\n\n# Output system with themes\nuv run examples/ui_output_demo.py\n\n# Streaming UI capabilities\nuv run examples/ui_streaming_demo.py\n```\n\n### Running Tests\n\n```bash\npytest\npytest --cov=mcp_cli --cov-report=html\n```\n\n## üìú License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## üôè Acknowledgments\n\n- **[CHUK Tool Processor](https://github.com/chrishayuk/chuk-tool-processor)** - Async-native tool execution\n- **[CHUK-LLM](https://github.com/chrishayuk/chuk-llm)** - Unified LLM provider management with GPT-5, Claude 4, and reasoning model support\n- **[CHUK-Term](https://github.com/chrishayuk/chuk-term)** - Enhanced terminal UI with themes and cross-platform support\n- **[Rich](https://github.com/Textualize/rich)** - Beautiful terminal formatting\n- **[Typer](https://typer.tiangolo.com/)** - CLI framework\n- **[Prompt Toolkit](https://github.com/prompt-toolkit/python-prompt-toolkit)** - Interactive input\n\n## üîó Related Projects\n\n- **[Model Context Protocol](https://modelcontextprotocol.io/)** - Core protocol specification\n- **[MCP Servers](https://github.com/modelcontextprotocol/servers)** - Official MCP server implementations\n- **[CHUK Tool Processor](https://github.com/chrishayuk/chuk-tool-processor)** - Tool execution engine\n- **[CHUK-LLM](https://github.com/chrishayuk/chuk-llm)** - LLM provider abstraction with GPT-5, Claude 4, O3 series support\n- **[CHUK-Term](https://github.com/chrishayuk/chuk-term)** - Terminal UI library with themes and cross-platform support",
  "category": "AI Tools",
  "quality_score": 79,
  "archestra_config": {
    "client_config_permutations": null,
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": false
  },
  "github_info": {
    "owner": "chrishayuk",
    "repo": "mcp-cli",
    "url": "https://github.com/chrishayuk/mcp-cli",
    "name": "mcp-cli",
    "path": null,
    "stars": 1599,
    "contributors": 15,
    "issues": 26,
    "releases": false,
    "ci_cd": true,
    "latest_commit_hash": "688698cd83362f96c2e3cf9b3ac56586b6422e33"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:46.638Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": true,
    "implementing_resources": true,
    "implementing_sampling": true,
    "implementing_roots": true,
    "implementing_logging": true,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "asyncio",
      "importance": 8
    },
    {
      "name": "chuk-llm",
      "importance": 10
    },
    {
      "name": "chuk-mcp",
      "importance": 10
    },
    {
      "name": "chuk-tool-processor",
      "importance": 10
    },
    {
      "name": "ibm-watsonx-ai",
      "importance": 7
    },
    {
      "name": "prompt-toolkit",
      "importance": 7
    },
    {
      "name": "python-dotenv",
      "importance": 5
    },
    {
      "name": "rich",
      "importance": 6
    },
    {
      "name": "typer",
      "importance": 10
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[build-system]\nrequires = [\"setuptools>=61.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"mcp-cli\"\nversion = \"0.5.1\"\ndescription = \"A cli for the Model Context Provider\"\nrequires-python = \">=3.11\"\nreadme = \"README.md\"\nauthors = [\n  { name = \"Chris Hay\", email = \"chrishayuk@somejunkmailbox.com\" }\n]\nkeywords = [\"llm\", \"openai\", \"claude\", \"mcp\", \"cli\"]\nlicense = {text = \"MIT\"}\ndependencies = [\n  \"asyncio>=3.4.3\",\n  \"chuk-llm>=0.8.13\",\n  \"chuk-mcp>=0.5\",\n  \"chuk-tool-processor>=0.5.4\",\n  \"ibm-watsonx-ai>=1.3.31\",\n  \"prompt-toolkit>=3.0.50\",\n  \"python-dotenv>=1.0.1\",\n  \"rich>=13.9.4\",\n  \"typer>=0.15.2\",\n]\n\n\n[project.scripts]\nmcp-cli = \"mcp_cli.main:app\"\nmcp-llm = \"mcp_cli.llm.__main__:main\"\n\n[project.optional-dependencies]\nwasm = []\ndev = [\n  \"numpy>=2.2.3\",\n  \"pytest-asyncio>=0.25.3\",\n  \"asyncio>=3.4.3\"\n]\n\n[tool.setuptools]\npackage-dir = { \"\" = \"src\" }\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\ninclude = [\"mcp_cli*\"]\n[dependency-groups]\ndev = [\n  \"colorama>=0.4.6\",\n  \"pydantic>=2.10.2\",\n  \"pytest-asyncio>=0.25.3\",\n]\n"
}
