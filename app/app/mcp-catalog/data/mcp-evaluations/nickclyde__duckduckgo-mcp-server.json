{
  "dxt_version": "0.1.0",
  "name": "nickclyde__duckduckgo-mcp-server",
  "display_name": "duckduckgo-mcp-server",
  "version": "1.0.0",
  "description": "A Model Context Protocol (MCP) server that provides web search capabilities through DuckDuckGo, with additional features for content fetching and parsing.",
  "author": {
    "name": "nickclyde"
  },
  "server": {
    "type": "python",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "unknown",
      "args": [],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "# DuckDuckGo Search MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@nickclyde/duckduckgo-mcp-server)](https://smithery.ai/server/@nickclyde/duckduckgo-mcp-server)\n\nA Model Context Protocol (MCP) server that provides web search capabilities through DuckDuckGo, with additional features for content fetching and parsing.\n\n<a href=\"https://glama.ai/mcp/servers/phcus2gcpn\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/phcus2gcpn/badge\" alt=\"DuckDuckGo Server MCP server\" />\n</a>\n\n## Features\n\n- **Web Search**: Search DuckDuckGo with advanced rate limiting and result formatting\n- **Content Fetching**: Retrieve and parse webpage content with intelligent text extraction\n- **Rate Limiting**: Built-in protection against rate limits for both search and content fetching\n- **Error Handling**: Comprehensive error handling and logging\n- **LLM-Friendly Output**: Results formatted specifically for large language model consumption\n\n## Installation\n\n### Installing via Smithery\n\nTo install DuckDuckGo Search Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@nickclyde/duckduckgo-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @nickclyde/duckduckgo-mcp-server --client claude\n```\n\n### Installing via `uv`\n\nInstall directly from PyPI using `uv`:\n\n```bash\nuv pip install duckduckgo-mcp-server\n```\n\n## Usage\n\n### Running with Claude Desktop\n\n1. Download [Claude Desktop](https://claude.ai/download)\n2. Create or edit your Claude Desktop configuration:\n   - On macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - On Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nAdd the following configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"ddg-search\": {\n            \"command\": \"uvx\",\n            \"args\": [\"duckduckgo-mcp-server\"]\n        }\n    }\n}\n```\n\n3. Restart Claude Desktop\n\n### Development\n\nFor local development, you can use the MCP CLI:\n\n```bash\n# Run with the MCP Inspector\nmcp dev server.py\n\n# Install locally for testing with Claude Desktop\nmcp install server.py\n```\n## Available Tools\n\n### 1. Search Tool\n\n```python\nasync def search(query: str, max_results: int = 10) -> str\n```\n\nPerforms a web search on DuckDuckGo and returns formatted results.\n\n**Parameters:**\n- `query`: Search query string\n- `max_results`: Maximum number of results to return (default: 10)\n\n**Returns:**\nFormatted string containing search results with titles, URLs, and snippets.\n\n### 2. Content Fetching Tool\n\n```python\nasync def fetch_content(url: str) -> str\n```\n\nFetches and parses content from a webpage.\n\n**Parameters:**\n- `url`: The webpage URL to fetch content from\n\n**Returns:**\nCleaned and formatted text content from the webpage.\n\n## Features in Detail\n\n### Rate Limiting\n\n- Search: Limited to 30 requests per minute\n- Content Fetching: Limited to 20 requests per minute\n- Automatic queue management and wait times\n\n### Result Processing\n\n- Removes ads and irrelevant content\n- Cleans up DuckDuckGo redirect URLs\n- Formats results for optimal LLM consumption\n- Truncates long content appropriately\n\n### Error Handling\n\n- Comprehensive error catching and reporting\n- Detailed logging through MCP context\n- Graceful degradation on rate limits or timeouts\n\n## Contributing\n\nIssues and pull requests are welcome! Some areas for potential improvement:\n\n- Additional search parameters (region, language, etc.)\n- Enhanced content parsing options\n- Caching layer for frequently accessed content\n- Additional rate limiting strategies\n\n## License\n\nThis project is licensed under the MIT License.",
  "category": "AI Tools",
  "quality_score": 56,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {
        "duckduckgo-mcp-server": {
          "command": "uvx",
          "args": [
            "duckduckgo-mcp-server"
          ],
          "env": {}
        },
        "duckduckgo-mcp-server-dev": {
          "command": "mcp",
          "args": [
            "dev",
            "server.py"
          ],
          "env": {}
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "nickclyde",
    "repo": "duckduckgo-mcp-server",
    "url": "https://github.com/nickclyde/duckduckgo-mcp-server",
    "name": "duckduckgo-mcp-server",
    "path": null,
    "stars": 347,
    "contributors": 0,
    "issues": 14,
    "releases": false,
    "ci_cd": true,
    "latest_commit_hash": "d198a2f0e8bd7c862d87d8517e1518aa295f8348"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-08-03T20:26:58.912Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": true,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "beautifulsoup4",
      "importance": 8
    },
    {
      "name": "httpx",
      "importance": 9
    },
    {
      "name": "mcp",
      "importance": 10
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"duckduckgo-mcp-server\"\nversion = \"0.1.1\"\ndescription = \"MCP Server for searching via DuckDuckGo\"\nreadme = \"README.md\"\nauthors = [{ name = \"Nick Clyde\", email = \"nick@clyde.tech\" }]\nrequires-python = \">=3.10\"\ndependencies = [\"beautifulsoup4>=4.13.3\", \"httpx>=0.28.1\", \"mcp[cli]>=1.3.0\"]\nclassifiers = [\n    \"Development Status :: 3 - Alpha\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n]\n\n[project.urls]\nHomepage = \"https://github.com/nickclyde/duckduckgo-mcp-server\"\nIssues = \"https://github.com/nickclyde/duckduckgo-mcp-server/issues\"\n\n[project.scripts]\nduckduckgo-mcp-server = \"duckduckgo_mcp_server.server:main\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n"
}