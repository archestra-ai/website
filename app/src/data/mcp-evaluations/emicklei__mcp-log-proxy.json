{
  "name": "log proxy",
  "slug": "emicklei__mcp-log-proxy",
  "description": "a web logging proxy for MCP client-server communication",
  "readme": "## mcp-log-proxy\n\n`mcp-log-proxy` can be used to see the messages to and from a MCP client and a MCP server using a Web interface.\n\nCurrently, it only supports the STDIO interface.\n\n![web log view](doc/screenshot2.png)\n\n### Multiple proxies\n\n![multi flow](doc/multiple_proxies.png)\n\nAll running mcp-log-proxy processes will register themselves in `.mcp-log-proxy-instances.json` located in your home directory. On the web page, you can use the selector to switch to another proxy instance.\n\n## install\n```shell\nbrew tap \"emicklei/tap\"\n```\n\nand then\n\n```shell\nbrew install emicklei/tap/mcp-log-proxy\n```\n\nor via Go\n\n```shell\ngo install github.com/emicklei/mcp-log-proxy@latest\n```\n\n### usage\n\n`mcp-log-proxy` requires one argument `-command` that contains the full command line for starting the MCP server.\n\nFor example, to proxy traffic to the `melrose-mcp` server, the full command is:\n\n    mcp-log-proxy -command melrose-mcp\n\nThis example assumes that both tools are available on your execution PATH.\n\nOnce the proxy is started, messages can be viewed on `http:/localhost:5656`.\n\n#### optional flags\n\nYou can override the Web page title using the `title` flag:\n\n    mcp-log-proxy -command melrose-mcp -title \"Melrōse (proxy)\"   \n\nYou can override the HTTP port(default 5656) using the `port` flag:\n\n    mcp-log-proxy -command melrose-mcp -port 9999\n\nWhen running multiple proxies, the `mcp-log-proxy` will detect whether a HTTP port is taken and choose a different port instead. Using the Web UI you can select any of the other running proxies.\n\nYou can override the log file location of the proxy that captures errors in the proxy itself using the `log` flag:\n\n    mcp-log-proxy -command melrose-mcp -log /your/logs/mcp-log-proxy.log\n\n### Claude examples\n\nThis example proxies the use of the `melrose-mcp` server.\nLocate the binaries to get the correct paths.\n\n    \"melrōse\": {\n      \"command\": \"/Users/SOME-USER/go/bin/mcp-log-proxy\",\n      \"args\": [\n        \"-command\",\n        \"/Users/SOME-USER/go/bin/melrose-mcp -log /Users/SOME-USER/Library/Logs/claude-melrose.log\",\n        \"-log\",\n        \"/Users/SOME-USER/Library/Logs/claude-melrose-proxy.log\",\n        \"-port\",\n        \"7788\",\n        \"-title\",\n        \"Claude Melrose MCP\"\n      ]\n    },\n\nProxying the `browsermcp` server.\n\n    \"browsermcp\": {\n      \"command\": \"/Users/SOME-USER/go/bin/mcp-log-proxy\",\n      \"args\": [\n        \"-command\",\n        \"npx @browsermcp/mcp@latest\",\n        \"-log\",\n        \"/Users/SOME-USER/Library/Logs/claude-browsermcp-proxy.log\",\n        \"-port\",\n        \"7799\",\n        \"-title\",\n        \"Claude Browser MCP\"\n      ]\n    }\n\n### Goose Example\n\nThis example proxies the use of the `melrose-mcp` server.\nLocate the binaries to get the correct paths.\n```\n/Users/SOME-USER/go/bin/mcp-log-proxy -command /Users/SOME-USER/go/bin/melrose-mcp -log /Users/SOME-USER/Library/Logs/goose-melrose.log -port 8888 -title Melrose-MCP\n```\n\n### Error information\n\n![web log view](doc/screenshot1.png)\n\n&copy; 2025, https://ernestmicklei.com. MIT License.\n",
  "category": "Development",
  "qualityScore": 38,
  "githubUrl": "https://github.com/emicklei/mcp-log-proxy",
  "programmingLanguage": "Go",
  "gitHubOrg": "emicklei",
  "gitHubRepo": "mcp-log-proxy",
  "repositoryPath": null,
  "gh_stars": 17,
  "gh_contributors": 2,
  "gh_issues": 0,
  "gh_releases": true,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "3546417fcf336a2f2a6e697cb7527f49c7d89b87",
  "last_scraped_at": "2025-08-03T20:58:30.404Z",
  "implementing_tools": false,
  "implementing_prompts": false,
  "implementing_resources": false,
  "implementing_sampling": false,
  "implementing_roots": false,
  "implementing_logging": false,
  "implementing_stdio": false,
  "implementing_streamable_http": false,
  "implementing_oauth2": false,
  "rawDependencies": "=== go.mod ===\nmodule github.com/emicklei/mcp-log-proxy\n\ngo 1.24.0\n\nrequire (\n\tgithub.com/emicklei/nanny v1.54.1\n\tgithub.com/gofrs/flock v0.12.1\n)\n\nrequire (\n\tgithub.com/DmitriyVTitov/size v1.5.0 // indirect\n\tgolang.org/x/sys v0.34.0 // indirect\n)\n",
  "evaluation_model": "gemini-2.5-flash",
  "configForClients": {
    "mcpServers": {
      "melrose-mcp": {
        "command": "melrose-mcp",
        "args": []
      },
      "melrose-mcp-configured": {
        "command": "/Users/SOME-USER/go/bin/melrose-mcp",
        "args": ["-log", "/Users/SOME-USER/Library/Logs/claude-melrose.log"]
      },
      "browsermcp-mcp": {
        "command": "npx",
        "args": ["-y", "@browsermcp/mcp@latest"]
      },
      "melrose-mcp-stdio": {
        "command": "/Users/SOME-USER/go/bin/melrose-mcp",
        "args": []
      }
    }
  },
  "configForArchestra": {
    "command": "mcp-log-proxy",
    "args": [
      "-command",
      "npx @browsermcp/mcp@latest",
      "-log",
      "/Users/SOME-USER/Library/Logs/claude-browsermcp-proxy.log",
      "-port",
      "7799",
      "-title",
      "Claude Browser MCP"
    ],
    "env": {},
    "transport": "stdio",
    "oauth": {
      "provider": "null",
      "required": false
    }
  },
  "dependencies": [
    {
      "importance": 9,
      "name": "emicklei/nanny"
    },
    {
      "importance": 8,
      "name": "gofrs/flock"
    },
    {
      "importance": 3,
      "name": "DmitriyVTitov/size"
    },
    {
      "importance": 3,
      "name": "golang.org/x/sys"
    }
  ]
}
