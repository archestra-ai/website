{
  "name": "duaraghav8__mcpjungle",
  "display_name": "MCPJungle",
  "description": "Self-hosted MCP Registry + Gateway for AI agents",
  "author": {
    "name": "duaraghav8"
  },
  "server": {
    "command": "mcpjungle",
    "args": ["start"],
    "env": {
      "DATABASE_URL": "${user_config.database_url}"
    },
    "type": "local"
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "database_url": {
      "type": "string",
      "title": "Database URL",
      "description": "PostgreSQL connection string (e.g., postgres://user:pass@host:port/db). If omitted, a local SQLite database will be created in the current directory.",
      "required": false,
      "sensitive": true
    }
  },
  "readme": "<h1 align=\"center\">\n  :deciduous_tree: MCPJungle :deciduous_tree:\n</h1>\n<p align=\"center\">\n  Self-hosted MCP Gateway for your private AI agents\n</p>\n<p align=\"center\">\n  <a href=\"https://discord.gg/CapV4Z3krk\" style=\"text-decoration: none;\">\n    <img src=\"https://img.shields.io/badge/Discord-MCPJungle-5865F2?style=flat-square&logo=discord&logoColor=white\" alt=\"Discord\" style=\"max-width: 100%;\">\n  </a>\n</p>\n\nMCPJungle is a single source-of-truth registry for all [Model Context Protocol](https://modelcontextprotocol.io/introduction) Servers running in your Organisation.\n\nüßë‚Äçüíª Developers use it to register & manage MCP servers and the tools they provide from a central place.\n\nü§ñ MCP Clients use it to discover and consume all these tools from a single \"Gateway\" MCP Server.\n\n![diagram](./assets/mcpjungle-diagram/mcpjungle-diagram.png)\n\n<p align=\"center\">MCPJungle is the only MCP Server your AI agents need to connect to!</p>\n\n# Who should use MCPJungle?\n1. **Developers** using MCP Clients like Claude & Cursor that need to access MCP servers for tool-calling\n2. **Developers** building production-grade AI Agents that need to access MCP servers with built-in security, privacy and Access Control.\n3. **Organisations** wanting to view & manage all MCP client-server interactions from a central place. Hosted in their own datacenter üîí\n\n# üìã Table of Contents\n\n- [Quick Start guide](#quickstart-guide)\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Server](#server)\n    - [Running mcpjungle server inside Docker](#running-inside-docker)\n    - [Running mcpjungle server directly on the host machine](#running-directly-on-host)\n  - [Client](#client)\n    - [Adding Streamable HTTP-based MCP servers](#registering-streamable-http-based-servers)\n    - [Adding STDIO-based MCP servers](#registering-stdio-based-servers)\n    - [Removing MCP servers](#deregistering-mcp-servers)\n  - [Connect to mcpjungle from Claude](#claude)\n  - [Connect to mcpjungle from Cursor](#cursor)\n  - [Enabling/Disabling Tools globally](#enablingdisabling-tools)\n  - [Tool Groups](#tool-groups)\n  - [Authentication](#authentication)\n  - [Enterprise features](#enterprise-features-)\n    - [Access Control](#access-control)\n    - [OpenTelemetry](#opentelemetry)\n- [Limitations](#current-limitations-)\n- [Contributing](#contributing-)\n\n# Quickstart guide\nThis quickstart guide will show you how to:\n1. Start the MCPJungle server locally using `docker compose`\n2. Register a simple MCP server in mcpjungle\n3. Connect your Claude to mcpjungle to access your MCP tools\n\n## Start the server\n```bash\ncurl -O https://raw.githubusercontent.com/mcpjungle/MCPJungle/refs/heads/main/docker-compose.yaml\ndocker compose up -d\n```\n\n## Register MCP servers\nDownload the client binary either using brew or from the [Releases](https://github.com/mcpjungle/MCPJungle/releases).\n```bash\nbrew install mcpjungle/mcpjungle/mcpjungle\n```\n\nAdd the [context7](https://context7.com/) remote MCP server to mcpjungle\n```bash\nmcpjungle register --name context7 --url https://mcp.context7.com/mcp\n```\n\n## Connect to mcpjungle\n\nAdd the following configuration in your Claude MCP Servers:\n```json\n{\n  \"mcpServers\": {\n    \"mcpjungle\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://localhost:8080/mcp\",\n        \"--allow-http\"\n      ]\n    }\n  }\n}\n```\n\nTry asking Claude for the following:\n```text\nUse context7 to get the documentation for `/lodash/lodash`\n```\n\nClaude will then attempt to call the `context7__get-library-docs` tool via MCPJungle, which will return the documentation for the Lodash library.\n\n<p align=\"center\">\n  <img src=\"./assets/quickstart-claude-call-tool.png\" alt=\"claude calls context7 tool via mcpjungle\" height=\"400\">\n</p>\n\nCongratulations üéâ You have successfully registered a remote MCP server in MCPJungle and called one of its tools via Claude\n\n# Installation\n\n> [!WARNING]\n> MCPJungle is **BETA** software.\n>\n> We're actively working to make it production-ready.\n> You can provide your feedback by [starting a discussion](https://github.com/mcpjungle/MCPJungle/discussions) in this repository.\n\nMCPJungle is shipped as a stand-alone binary.\n\nYou can either download it from the [Releases](https://github.com/mcpjungle/MCPJungle/releases) Page or use [Homebrew](https://brew.sh/) to install it:\n\n```bash\nbrew install mcpjungle/mcpjungle/mcpjungle\n```\n\nVerify your installation by running\n\n```bash\nmcpjungle version\n```\n\n> [!IMPORTANT]\n> On MacOS, you will have to use homebrew because the compiled binary is not [Notarized](https://developer.apple.com/documentation/security/notarizing-macos-software-before-distribution) yet.\n\nMCPJungle provides a Docker image which is useful for running the registry server (more about it later).\n\n```bash\ndocker pull mcpjungle/mcpjungle\n```\n\n# Usage\nMCPJungle has a Client-Server architecture and the binary lets you run both the Server and the Client.\n\n## Server\nThe MCPJungle server is responsible for managing all the MCP servers registered in it and providing a unified MCP gateway for AI Agents to discover and call tools provided by these registered servers.\n\nThe gateway itself runs over streamable http transport and is accessible at the `/mcp` endpoint.\n\n### Running inside Docker\nFor running the MCPJungle server locally, docker compose is the recommended way:\n```shell\n# docker-compose.yaml is optimized for individuals running mcpjungle on their local machines for personal use.\n# mcpjungle will run in `development` mode by default.\ncurl -O https://raw.githubusercontent.com/mcpjungle/MCPJungle/refs/heads/main/docker-compose.yaml\n\ndocker compose up -d\n\n# docker-compose.prod.yaml is optimized for orgs deploying mcpjungle on a remote server for multiple users.\n# mcpjungle will run in `production` mode by default, which enables enterprise features.\ncurl -O https://raw.githubusercontent.com/mcpjungle/MCPJungle/refs/heads/main/docker-compose.prod.yaml\n\ndocker compose -f docker-compose.prod.yaml up -d\n```\n\nThis will start the MCPJungle server along with a persistent Postgres database container.\n\nYou can quickly verify that the server is running:\n```bash\ncurl http://localhost:8080/health\n```\n\nIf you plan on registering stdio-based MCP servers that rely on `npx` or `uvx`, use mcpjungle's `stdio` tagged docker image instead.\n```bash\nMCPJUNGLE_IMAGE_TAG=latest-stdio docker compose up -d\n```\n\n> [!NOTE]\n> If you're using `docker-compose.yaml`, this is already the default image tag.\n> You only need to specify the stdio image tag if you're using `docker-compose.prod.yaml`.\n\nThis image is significantly larger. But it is very convenient and recommended for running locally when you rely on stdio-based MCP servers.\n\nFor example, if you only want to register remote mcp servers like context7 and deepwiki, you can use the standard (minimal) image.\n\nBut if you also want to use stdio-based servers like `filesystem`, `time`, `github`, etc., you should use the `stdio`-tagged image instead.\n\n> [!NOTE]\n> If your stdio servers rely on tools other than `npx` or `uvx`, you will have to create a custom docker image that includes those dependencies along with the mcpjungle binary.\n\n**Production Deployment**\n\nThe default [MCPJungle Docker image](https://hub.docker.com/r/mcpjungle/mcpjungle) is very lightweight - it only contains a minimal base image and the `mcpjungle` binary.\n\nIt is therefore suitable and recommended for production deployments.\n\nFor the database, we recommend you deploy a separate Postgres DB cluster and supply its endpoint to mcpjungle (see [Database](#database) section below).\n\nYou can see the definitions of the [standard Docker image](./Dockerfile) and the [stdio Docker image](./stdio.Dockerfile).\n\n### Running directly on host\nYou can also run the server directly on your host machine using the binary:\n\n```bash\nmcpjungle start\n```\n\nThis starts the main registry server and MCP gateway, accessible on port `8080` by default.\n\n\n### Database\nThe mcpjungle server relies on a database and by default, creates a SQLite DB in the current working directory.\n\nThis is okay when you're just testing things out locally.\n\nAlternatively, you can supply a DSN for a Postgresql database to the server:\n\n```bash\nexport DATABASE_URL=postgres://admin:root@localhost:5432/mcpjungle_db\n\n#run as container\ndocker run mcpjungle/mcpjungle:latest\n\n# or run directly\nmcpjungle start\n```\n\n## Client\nOnce the server is up, you can use the mcpjungle CLI to interact with it.\n\nMCPJungle currently supports MCP servers using [stdio](https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#stdio) and [Streamable HTTP](https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#streamable-http) Transports.\n\nLet's see how to register them in mcpjungle.\n\n### Registering streamable HTTP-based servers\nLet's say you're already running a streamable http MCP server locally at `http://127.0.0.1:8000/mcp` which provides basic math tools like `add`, `subtract`, etc.\n\nYou can register this MCP server with MCPJungle:\n```bash\nmcpjungle register --name calculator --description \"Provides some basic math tools\" --url http://127.0.0.1:8000/mcp\n```\n\nIf you used docker compose to run the server, and you're not on Linux, you will have to use `host.docker.internal` instead of your local loopback address.\n```bash\nmcpjungle register --name calculator --description \"Provides some basic math tools\" --url http://host.docker.internal:8000/mcp\n```\n\nThe registry will now start tracking this MCP server and load its tools.\n\n![register a MCP server in MCPJungle](./assets/register-mcp-server.png)\n\nYou can also provide a configuration file to register the MCP server:\n```bash\ncat ./calculator.json\n{\n  \"name\": \"calculator\",\n  \"transport\": \"streamable_http\",\n  \"description\": \"Provides some basic math tools\",\n  \"url\": \"http://127.0.0.1:8000/mcp\"\n}\n\nmcpjungle register -c ./calculator.json\n```\n\nAll tools provided by this server are now accessible via MCPJungle:\n\n```bash\nmcpjungle list tools\n\n# Check tool usage\nmcpjungle usage calculator__multiply\n\n# Call a tool\nmcpjungle invoke calculator__multiply --input '{\"a\": 100, \"b\": 50}'\n```\n\n![Call a tool via MCPJungle Proxy MCP server](./assets/tool-call.png)\n\n> [!NOTE]\n> A tool in MCPJungle must be referred to by its canonical name which follows the pattern `<mcp-server-name>__<tool-name>`.\n> Server name and tool name are separated by a double underscore `__`.\n>\n> eg- If you register a MCP server `github` which provides a tool called `git_commit`, you can invoke it in MCPJungle using the name `github__git_commit`.\n> \n> Your MCP client must also use this canonical name to call the tool via MCPJungle.\n\nThe config file format for registering a Streamable HTTP-based MCP server is:\n```json\n{\n  \"name\": \"<name of your mcp server>\",\n  \"transport\": \"streamable_http\",\n  \"description\": \"<description>\",\n  \"url\": \"<url of the mcp server>\",\n  \"bearer_token\": \"<optional bearer token for authentication>\"\n}\n```\n\n### Registering STDIO-based servers\n\nHere's an example configuration file (let's call it `filesystem.json`) for a MCP server that uses the STDIO transport:\n```json\n{\n  \"name\": \"filesystem\",\n  \"transport\": \"stdio\",\n  \"description\": \"filesystem mcp server\",\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \".\"]\n}\n```\n\nYou can register this MCP server in MCPJungle by providing the configuration file:\n```bash\nmcpjungle register -c ./filesystem.json\n```\n\nThe config file format for registering a STDIO-based MCP server is:\n\n```json\n{\n  \"name\": \"<name of your mcp server>\",\n  \"transport\": \"stdio\",\n  \"description\": \"<description>\",\n  \"command\": \"<command to run the mcp server, eg- 'npx', 'uvx'>\",\n  \"args\": [\"arguments\", \"to\", \"pass\", \"to\", \"the\", \"command\"],\n  \"env\": {\n    \"KEY\": \"value\"\n  }\n}\n```\n\nYou can also watch a quick video on [How to register a STDIO-based MCP server](https://youtu.be/YqHiuexR5fw).\n\n> [!TIP]\n> If your STDIO server fails or throws errors for some reason, check the mcpjungle server's logs to view its `stderr` output.\n\n**Limitation** üöß\n\nMCPJungle creates a new connection when a tool is called. This means a new sub-process for a STDIO mcp server is started for every tool call.\n\nThis has some performance overhead but ensures that there are no memory leaks.\n\nBut it also means that currently MCPJungle doesn't support stateful connections with your MCP server.\n\nWe want to hear your feedback to improve this mechanism, feel free to create an issue, start a discussion or just reach out on Discord.\n\n\n### Deregistering MCP servers\nYou can remove a MCP server from mcpjungle.\n\n```bash\nmcpjungle deregister calculator\nmcpjungle deregister filesystem\n```\n\nOnce removed, this mcp server and its tools are no longer available to you or your MCP clients.\n\n## Integration with other MCP Clients\nAssuming that MCPJungle is running on `http://localhost:8080`, use the following configurations to connect to it:\n\n### Claude\n```json\n{\n  \"mcpServers\": {\n    \"mcpjungle\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://localhost:8080/mcp\",\n        \"--allow-http\"\n      ]\n    }\n  }\n}\n```\n\n### Cursor\n```json\n{\n  \"mcpServers\": {\n    \"mcpjungle\": {\n      \"url\": \"http://localhost:8080/mcp\"\n    }\n  }\n}\n```\n\nYou can watch a quick video on [How to connect Cursor to MCPJungle](https://youtu.be/SaUqj-eLPnw).\n\n## Enabling/Disabling Tools\nYou can enable or disable a specific tool or all the tools provided by an MCP Server.\n\nIf a tool is disabled, it is not available via the MCPJungle Proxy, so no MCP clients can view or call it.\n\n```bash\n# disable the `get-library-docs` tool provided by the `context7` MCP server\nmcpjungle disable context7__get-library-docs\n\n# re-enable the tool\nmcpjungle enable context7__get-library-docs\n\n# disable all tools provided by the `context7` MCP server\nmcpjungle disable context7\n\n# re-enable all tools of `context7`\nmcpjungle enable context7\n```\n\nA disabled tool is still accessible via mcpjungle's HTTP API, so humans can still manage it from the CLI (or any other HTTP client).\n\n> [!NOTE]\n> When a new server is registered in MCPJungle, all its tools are **enabled** by default.\n\n## Tool Groups\nAs you add more MCP servers to MCPJungle, the number of tools available through the Gateway can grow significantly.\n\nIf your MCP client is exposed to hundreds of tools through the gateway MCP, its performance may degrade.\n\nMCPJungle allows you to **expose only a subset of all available tools to your MCP clients using Tool Groups**.\n\nYou can create a new group and only include specific tools that you wish to expose.\n\nOnce a group is created, mcpjungle returns a unique endpoint for it.\n\nYou can then configure your MCP client to use this group-specific endpoint instead of the main gateway endpoint.\n\n### Creating a Tool Group\nYou can create a new tool group by providing a JSON configuration file to the `create group` command.\n\nYou must specify a unique `name` for the group and a list of `included_tools` that you want to expose via its MCP proxy.\n\nHere is an example of a tool group configuration file (`claude-tools-group.json`):\n```json\n{\n  \"name\": \"claude-tools\",\n  \"description\": \"This group only contains tools for Claude Desktop to use\",\n  \"included_tools\": [\n    \"filesystem__read_file\",\n    \"deepwiki__read_wiki_contents\",\n    \"time__get_current_time\"\n  ]\n}\n```\n\nInstead of exposing 20 tools across all MCP servers, this group only exposes 3 handpicked ones.\n\nYou can create this group in mcpjungle:\n```bash\n$ mcpjungle create group -c ./claude-tools-group.json\n\nTool Group claude-tools created successfully\nIt is now accessible at the following streamable http endpoint:\n\n    http://127.0.0.1:8080/v0/groups/claude-tools/mcp\n\n```\n\nYou can then configure Claude (or any other MCP client) to use this group-specific endpoint to access the MCP server.\n\nThe client will then ONLY see and be able to use these 3 tools and will not be aware of any other tools registered in MCPJungle.\n\n> [!TIP]\n> You can run `mcpjungle list tools` to view all available tools and pick the ones you want to include in your group.\n\nYou can also watch a [Video on using Tool Groups](https://youtu.be/A21rfGgo38A).\n\n### Managing tool groups\nYou can currently perform operations like listing all groups, viewing details of a specific group and deleting a group.\n\n```bash\n# list all tool groups\nmcpjungle list groups\n\n# view details of a specific group\nmcpjungle get group claude-tools\n\n# delete a group\nmcpjungle delete group claude-tools\n```\n\n> [!NOTE]\n> If a tool is included in a group but is later disabled globally or deleted, then it will not be available via the group's MCP endpoint.\n>\n> But if the tool is re-enabled or added again later, it will automatically become available in the group again.\n\n**Limitations** üöß\n1. Currently, you cannot update an existing tool group. You must delete the group and create a new one with the modified configuration file.\n2. In `production` mode, currently only an admin can create a Tool Group. We're working on allowing standard Users to create their own groups as well.\n\n## Authentication\nMCPJungle currently supports authentication if your Streamable HTTP MCP Server accepts static tokens for auth.\n\nThis is useful when using SaaS-provided MCP Servers like HuggingFace, Stripe, etc. which require your API token for authentication.\n\nYou can supply your token while registering the MCP server:\n```bash\n# If you specify the `--bearer-token` flag, MCPJungle will add the `Authorization: Bearer <token>` header to all requests made to this MCP server.\nmcpjungle register --name huggingface --description \"HuggingFace MCP Server\" --url https://huggingface.co/mcp --bearer-token <your-hf-api-token>\n```\n\nOr from your configuration file\n```bash\n{\n  \"name\": \"huggingface\",\n  \"transport\": \"streamable_http\",\n  \"url\": \"https://huggingface.co/mcp\",\n  \"description\": \"hugging face mcp server\",\n  \"bearer_token\": \"<your-hf-api-token>\"\n}\n```\n\nSupport for Oauth flow is coming soon!\n\n## Enterprise Features üîí\n\nIf you're running MCPJungle in your organisation, we recommend running the Server in the `production` mode:\n```bash\n# enable enterprise features by running in production mode\nmcpjungle start --prod\n\n# you can also specify the server mode as environment variable (valid values are `development` and `production`)\nexport SERVER_MODE=production\nmcpjungle start\n\n# Or use the production docker compose file as described above\ndocker compose -f docker-compose.prod.yaml up -d\n```\n\nBy default, mcpjungle server runs in `development` mode which is ideal for individuals running it locally.\n\nIn Production mode, the server enforces stricter security policies and will provide additional features like Authentication, ACLs, observability and more.\n\nAfter starting the server in production mode, you must initialize it by running the following command on your client machine:\n```bash\nmcpjungle init-server\n```\n\nThis will create an admin user in the server and store its API access token in your home directory (`~/.mcpjungle.conf`).\n\nYou can then use the mcpjungle cli to make authenticated requests to the server.\n\n### Access Control\n\nIn `development` mode, all MCP clients have full access to all the MCP servers registered in MCPJungle Proxy.\n\n`production` mode lets you control which MCP clients can access which MCP servers.\n\nSuppose you have registered 2 MCP servers `calculator` and `github` in MCPJungle in production mode.\n\nBy default, no MCP client can access these servers. **You must create an MCP Client in mcpjungle and explicitly allow it to access the MCP servers.**\n\n```bash\n# Create a new MCP client for your Cursor IDE to use. It can access the calculator and github MCP servers\nmcpjungle create mcp-client cursor-local --allow \"calculator, github\"\n\nMCP client 'cursor-local' created successfully!\nServers accessible: calculator,github\n\nAccess token: 1YHf2LwE1LXtp5lW_vM-gmdYHlPHdqwnILitBhXE4Aw\nSend this token in the `Authorization: Bearer {token}` HTTP header.\n```\n\nMcpjungle creates an access token for your client.\nConfigure your client or agent to send this token in the `Authorization` header when making requests to the mcpjungle proxy.\n\nFor example, you can add the following configuration in Cursor to connect to MCPJungle:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcpjungle\": {\n      \"url\": \"http://localhost:8080/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer 1YHf2LwE1LXtp5lW_vM-gmdYHlPHdqwnILitBhXE4Aw\"\n      }\n    }\n  }\n}\n```\n\nA client that has access to a particular server this way can view and call all the tools provided by that server.\n\n> [!NOTE]\n> If you don't specify the `--allow` flag, the MCP client will not be able to access any MCP servers.\n\n### OpenTelemetry\nMCPJungle supports Prometheus-compatible OpenTelemetry Metrics for observability.\n\n- In `production` mode, OpenTelemetry is enabled by default.\n- In `development` mode, telemetry is disabled by default. You can enable it by setting the `OTEL_ENABLED` environment variable to `true` before starting the server:\n\n```bash\n# enable OpenTelemetry metrics\nexport OTEL_ENABLED=true\n\n# optionally, set additional attributes to be added to all metrics\nexport OTEL_RESOURCE_ATTRIBUTES=deployment.environment.name=production\n\n# start the server\nmcpjungle start\n```\n\nOnce the mcpjungle server is started, metrics are available at the `/metrics` endpoint.\n\n# Current limitations üöß\nWe're not perfect yet, but we're working hard to get there!\n\n### 1. MCPJungle doesn't maintain any long-running connections to the registered MCP Servers\nWhen you call a tool in a Streamable HTTP server, mcpjungle creates a new connection to the server to serve the request.\n\nWhen you call a tool in a STDIO server, mcpjungle creates a new connection and starts a new sub-process to run this server.\n\nAfter servicing your request, it terminates this sub-process.\n\nSo a new stdio server process is started for every tool call.\n\nThis has some performance overhead but ensures that there are no memory leaks.\n\nIt also means that if you rely on stateful connections with your MCP server, mcpjungle can currently not provide that.\n\nWe plan on improving this mechanism in future releases and are open to ideas from the community!\n\n### 2. MCPJungle does not support OAuth flow for authentication.\nThis is a work in progress.\n\nWe're collecting more feedback on how people use OAuth with MCP servers, so feel free to start a Discussion or open an issue to share your use case.\n\n# Contributing üíª\n\nWe welcome contributions from the community! \n\n- **For contribution guidelines and standards**, see [CONTRIBUTION.md](./CONTRIBUTION.md)\n- **For development setup and technical details**, see [DEVELOPMENT.md](./DEVELOPMENT.md)\n\nJoin our [Discord community](https://discord.gg/CapV4Z3krk) to connect with other contributors and maintainers.\n",
  "category": "AI Tools",
  "quality_score": 49,
  "archestra_config": {
    "client_config_permutations": {
      "mcpjungle-docker-compose": {
        "command": "docker-compose",
        "args": ["up", "-d"]
      },
      "mcpjungle-stdio-docker-compose": {
        "command": "docker-compose",
        "args": ["up", "-d"],
        "env": {
          "MCPJUNGLE_IMAGE_TAG": "latest-stdio"
        }
      },
      "mcpjungle": {
        "command": "mcpjungle",
        "args": ["start"]
      },
      "mcpjungle-mcpjungle-docker-configured": {
        "command": "docker",
        "args": [
          "run",
          "-e",
          "DATABASE_URL=postgres://admin:root@localhost:5432/mcpjungle_db",
          "mcpjungle/mcpjungle:latest"
        ],
        "env": {
          "DATABASE_URL": "postgres://admin:root@localhost:5432/mcpjungle_db"
        }
      },
      "mcpjungle-configured": {
        "command": "mcpjungle",
        "args": ["start"],
        "env": {
          "DATABASE_URL": "postgres://admin:root@localhost:5432/mcpjungle_db"
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": false
  },
  "github_info": {
    "owner": "duaraghav8",
    "repo": "MCPJungle",
    "url": "https://github.com/duaraghav8/MCPJungle",
    "name": "duaraghav8__mcpjungle",
    "path": null,
    "stars": 443,
    "contributors": 5,
    "issues": 0,
    "releases": true,
    "ci_cd": false,
    "latest_commit_hash": "4a11afeeb7ac39abbd0c628c1b4eeaa071e3195c"
  },
  "programming_language": "Go",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:05:10.612Z",
  "evaluation_model": "gemini-2.5-pro",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "gin-gonic/gin",
      "importance": 10
    },
    {
      "name": "mark3labs/mcp-go",
      "importance": 10
    },
    {
      "name": "gorm.io/gorm",
      "importance": 9
    },
    {
      "name": "gorm.io/driver/postgres",
      "importance": 8
    },
    {
      "name": "glebarez/sqlite",
      "importance": 8
    },
    {
      "name": "spf13/cobra",
      "importance": 7
    },
    {
      "name": "gorm.io/datatypes",
      "importance": 7
    },
    {
      "name": "go-yaml/yaml",
      "importance": 5
    },
    {
      "name": "joho/godotenv",
      "importance": 4
    }
  ],
  "raw_dependencies": "=== go.mod ===\nmodule github.com/mcpjungle/mcpjungle\n\ngo 1.24.3\n\nrequire (\n\tgithub.com/gin-gonic/gin v1.10.0\n\tgithub.com/glebarez/sqlite v1.11.0\n\tgithub.com/joho/godotenv v1.5.1\n\tgithub.com/mark3labs/mcp-go v0.32.0\n\tgithub.com/spf13/cobra v1.9.1\n\tgopkg.in/yaml.v3 v3.0.1\n\tgorm.io/datatypes v1.2.5\n\tgorm.io/driver/postgres v1.5.11\n\tgorm.io/gorm v1.26.1\n)\n\nrequire (\n\tfilippo.io/edwards25519 v1.1.0 // indirect\n\tgithub.com/bytedance/sonic v1.13.2 // indirect\n\tgithub.com/bytedance/sonic/loader v0.2.4 // indirect\n\tgithub.com/cloudwego/base64x v0.1.5 // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/gabriel-vasile/mimetype v1.4.9 // indirect\n\tgithub.com/gin-contrib/sse v1.1.0 // indirect\n\tgithub.com/glebarez/go-sqlite v1.21.2 // indirect\n\tgithub.com/go-playground/locales v0.14.1 // indirect\n\tgithub.com/go-playground/universal-translator v0.18.1 // indirect\n\tgithub.com/go-playground/validator/v10 v10.26.0 // indirect\n\tgithub.com/go-sql-driver/mysql v1.8.1 // indirect\n\tgithub.com/goccy/go-json v0.10.5 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/jackc/pgpassfile v1.0.0 // indirect\n\tgithub.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 // indirect\n\tgithub.com/jackc/pgx/v5 v5.7.5 // indirect\n\tgithub.com/jackc/puddle/v2 v2.2.2 // indirect\n\tgithub.com/jinzhu/inflection v1.0.0 // indirect\n\tgithub.com/jinzhu/now v1.1.5 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.10 // indirect\n\tgithub.com/leodido/go-urn v1.4.0 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mattn/go-sqlite3 v1.14.28 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.2.4 // indirect\n\tgithub.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec // indirect\n\tgithub.com/rogpeppe/go-internal v1.14.1 // indirect\n\tgithub.com/spf13/cast v1.7.1 // indirect\n\tgithub.com/spf13/pflag v1.0.6 // indirect\n\tgithub.com/twitchyliquid64/golang-asm v0.15.1 // indirect\n\tgithub.com/ugorji/go/codec v1.2.12 // indirect\n\tgithub.com/yosida95/uritemplate/v3 v3.0.2 // indirect\n\tgolang.org/x/arch v0.17.0 // indirect\n\tgolang.org/x/crypto v0.38.0 // indirect\n\tgolang.org/x/net v0.40.0 // indirect\n\tgolang.org/x/sync v0.14.0 // indirect\n\tgolang.org/x/sys v0.33.0 // indirect\n\tgolang.org/x/text v0.25.0 // indirect\n\tgoogle.golang.org/protobuf v1.36.6 // indirect\n\tgorm.io/driver/mysql v1.5.6 // indirect\n\tgorm.io/driver/sqlite v1.5.7 // indirect\n\tmodernc.org/libc v1.22.5 // indirect\n\tmodernc.org/mathutil v1.5.0 // indirect\n\tmodernc.org/memory v1.5.0 // indirect\n\tmodernc.org/sqlite v1.23.1 // indirect\n)\n"
}
