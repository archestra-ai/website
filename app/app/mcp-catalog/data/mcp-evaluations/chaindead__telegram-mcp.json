{
  "dxt_version": "0.1.0",
  "name": "chaindead__telegram-mcp",
  "display_name": "telegram-mcp",
  "version": "1.0.0",
  "description": "Telegram MCP for managing dialogs, messages, drafts, read statuses, and more.",
  "author": {
    "name": "chaindead"
  },
  "server": {
    "type": "binary",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "unknown",
      "args": [],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "[![](https://badge.mcpx.dev?type=server 'MCP Server')](https://github.com/punkpeye/awesome-mcp-servers?tab=readme-ov-file#communication)\n[![](https://img.shields.io/badge/OS_Agnostic-Works_Everywhere-purple)](https://github.com/chaindead/telegram-mcp?tab=readme-ov-file#installation)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Visitors](https://api.visitorbadge.io/api/visitors?path=https%3A%2F%2Fgithub.com%2Fchaindead%2Ftelegram-mcp&label=Visitors&labelColor=%23d9e3f0&countColor=%23697689&style=flat&labelStyle=none)](https://visitorbadge.io/status?path=https%3A%2F%2Fgithub.com%2Fchaindead%2Ftelegram-mcp)\n\n# Telegram MCP server\n\nThe server is a bridge between the Telegram API and the AI assistants and is based on the [Model Context Protocol](https://modelcontextprotocol.io).\n\n> [!IMPORTANT]\n> Ensure that you have read and understood the [Telegram API Terms of Service](https://core.telegram.org/api/terms) before using this server.\n> Any misuse of the Telegram API may result in the suspension of your account.\n\n## Table of Contents\n- [What is MCP?](#what-is-mcp)\n- [What does this server do?](#what-does-this-server-do)\n  - [Capabilities](#capabilities)\n  - [Prompt examples](#prompt-examples)\n    - [Message Management](#message-management)\n    - [Organization](#organization)\n    - [Communication](#communication)\n- [Installation](#installation)\n  - [Homebrew](#homebrew)\n  - [NPX](#npx)\n  - [From Releases](#from-releases)\n    - [MacOS](#macos)\n    - [Linux](#linux)\n    - [Windows](#windows)\n  - [From Source](#from-source)\n- [Configuration](#configuration)\n  - [Authorization](#authorization)\n  - [Client Configuration](#client-configuration)\n- [Star History](#star-history)\n\n## What is MCP?\n\nThe Model Context Protocol (MCP) is a system that lets AI apps, like Claude Desktop or Cursor, connect to external tools and data sources. It gives a clear and safe way for AI assistants to work with local services and APIs while keeping the user in control.\n\n## What does this server do?\n\n### Capabilities\n\n- [x] Get current account information (`tool: tg_me`)\n- [x] List dialogs with optional unread filter (`tool: tg_dialogs`)\n- [x] Mark dialog as read (`tool: tg_read`)\n- [x] Retrieve messages from specific dialog (`tool: tg_dialog`)\n- [x] Send draft messages to any dialog (`tool: tg_send`)\n\n### Prompt examples\n\nHere are some example prompts you can use with AI assistants:\n\n#### Message Management\n- \"Check for any unread important messages in my Telegram\"\n- \"Summarize all my unread Telegram messages\"\n- \"Read and analyze my unread messages, prepare draft responses where needed\"\n- \"Check non-critical unread messages and give me a brief overview\"\n\n#### Organization\n- \"Analyze my Telegram dialogs and suggest a folder structure\"\n- \"Help me categorize my Telegram chats by importance\"\n- \"Find all work-related conversations and suggest how to organize them\"\n\n#### Communication\n- \"Monitor specific chat for updates about [topic]\"\n- \"Draft a polite response to the last message in [chat]\"\n- \"Check if there are any unanswered questions in my chats\"\n\n## Installation\n\n### Homebrew\n\nYou can install a binary release on macOS/Linux using brew:\n\n```bash\n# Install\nbrew install chaindead/tap/telegram-mcp\n\n# Update\nbrew upgrade chaindead/tap/telegram-mcp\n```\n\n### NPX\n\nYou can run the latest version directly using npx (supports macOS, Linux, and Windows):\n\n```bash\nnpx -y @chaindead/telegram-mcp\n```\n\nWhen using NPX, modify the standard commands and configuration as follows:\n\n- [Authentication command](#authorization) becomes:\n```bash\nnpx -y @chaindead/telegram-mcp auth ...\n```\n\n- [Claude MCP server configuration](#client-configuration) becomes:\n```json\n{\n  \"mcpServers\": {\n    \"telegram\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@chaindead/telegram-mcp\"],\n      \"env\": {\n        \"TG_APP_ID\": \"<your-api-id>\",\n        \"TG_API_HASH\": \"<your-api-hash>\"\n      }\n    }\n  }\n}\n```\n\nFor complete setup instructions, see [Authorization](#authorization) and [Client Configuration](#client-configuration).\n\n### From Releases\n\n#### MacOS\n\n<details>\n\n> **Note:** The commands below install to `/usr/local/bin`. To install elsewhere, replace `/usr/local/bin` with your preferred directory in your PATH.\n\nFirst, download the archive for your architecture:\n\n```bash\n# For Intel Mac (x86_64)\ncurl -L -o telegram-mcp.tar.gz https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Darwin_x86_64.tar.gz\n\n# For Apple Silicon (M1/M2)\ncurl -L -o telegram-mcp.tar.gz https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Darwin_arm64.tar.gz\n```\n\nThen install the binary:\n\n```bash\n# Extract the binary\nsudo tar xzf telegram-mcp.tar.gz -C /usr/local/bin\n\n# Make it executable\nsudo chmod +x /usr/local/bin/telegram-mcp\n\n# Clean up\nrm telegram-mcp.tar.gz\n```\n</details>\n\n#### Linux\n<details>\n\n> **Note:** The commands below install to `/usr/local/bin`. To install elsewhere, replace `/usr/local/bin` with your preferred directory in your PATH.\n\nFirst, download the archive for your architecture:\n\n```bash\n# For x86_64 (64-bit)\ncurl -L -o telegram-mcp.tar.gz https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Linux_x86_64.tar.gz\n\n# For ARM64\ncurl -L -o telegram-mcp.tar.gz https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Linux_arm64.tar.gz\n```\n\nThen install the binary:\n\n```bash\n# Extract the binary\nsudo tar xzf telegram-mcp.tar.gz -C /usr/local/bin\n\n# Make it executable\nsudo chmod +x /usr/local/bin/telegram-mcp\n\n# Clean up\nrm telegram-mcp.tar.gz\n```\n</details>\n\n#### Windows\n\n<details>\n\n#### Windows\n1. Download the latest release for your architecture:\n   - [Windows x64](https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Windows_x86_64.zip)\n   - [Windows ARM64](https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Windows_arm64.zip)\n2. Extract the `.zip` file\n3. Add the extracted directory to your PATH or move `telegram-mcp.exe` to a directory in your PATH\n</details>\n\n### From Source\n\nRequirements:\n- Go 1.24 or later\n- GOBIN in PATH\n\n```bash\ngo install github.com/chaindead/telegram-mcp@latest\n```\n\n## Configuration\n\n### Authorization\n\nBefore you can use the server, you need to connect to the Telegram API.\n\n1. Get the API ID and hash from [Telegram API](https://my.telegram.org/auth)\n2. Run the following command:\n   > __Note:__\n   > If you have 2FA enabled: add --password <2fa_password>\n\n   >  __Note:__\n   > If you want to override existing session: add --new\n\n   ```bash\n   telegram-mcp auth --app-id <your-api-id> --api-hash <your-api-hash> --phone <your-phone-number>\n   ```\n\n   📩 Enter the code you received from Telegram to connect to the API.\n\n3. Done! Please give this project a ⭐️ to support its development.\n\n### Client Configuration\n\nExample of Configuring Claude Desktop to recognize the Telegram MCP server.\n\n1. Open the Claude Desktop configuration file:\n    - in MacOS, the configuration file is located at `~/Library/Application Support/Claude/claude_desktop_config.json`\n    - in Windows, the configuration file is located at `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n   > __Note:__\n   > You can also find claude_desktop_config.json inside the settings of Claude Desktop app\n\n2. Add the server configuration\n   \n   for Claude desktop:\n   ```json\n    {\n      \"mcpServers\": {\n        \"telegram\": {\n          \"command\": \"telegram-mcp\",\n          \"env\": {\n            \"TG_APP_ID\": \"<your-app-id>\",\n            \"TG_API_HASH\": \"<your-api-hash>\",\n            \"PATH\": \"<path_to_telegram-mcp_binary_dir>\",\n            \"HOME\": \"<path_to_your_home_directory\"\n          }\n        }\n      }\n    }\n   ```\n\n   for Cursor:\n    ```json\n    {\n      \"mcpServers\": {\n        \"telegram-mcp\": {\n          \"command\": \"telegram-mcp\",\n          \"env\": {\n            \"TG_APP_ID\": \"<your-app-id>\",\n            \"TG_API_HASH\": \"<your-api-hash>\"\n          }\n        }\n      }\n    }\n    ```\n\n## Star History\n\n<a href=\"https://www.star-history.com/#chaindead/telegram-mcp&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=chaindead/telegram-mcp&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=chaindead/telegram-mcp&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=chaindead/telegram-mcp&type=Date\" />\n </picture>\n</a>",
  "category": "Communication",
  "quality_score": 58,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {
        "chaindead-telegram-mcp": {
          "command": "npx",
          "args": ["-y", "@chaindead/telegram-mcp"],
          "env": {
            "TG_APP_ID": "<your-api-id>",
            "TG_API_HASH": "<your-api-hash>"
          }
        },
        "telegram-mcp": {
          "command": "telegram-mcp",
          "args": [],
          "env": {
            "TG_APP_ID": "<your-app-id>",
            "TG_API_HASH": "<your-api-hash>",
            "PATH": "<path_to_telegram-mcp_binary_dir>",
            "HOME": "<path_to_your_home_directory"
          }
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "chaindead",
    "repo": "telegram-mcp",
    "url": "https://github.com/chaindead/telegram-mcp",
    "name": "telegram-mcp",
    "path": null,
    "stars": 160,
    "contributors": 2,
    "issues": 5,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "956f664f17a20c985e4b10f267cb638bf1078825"
  },
  "programming_language": "Go",
  "framework": null,
  "last_scraped_at": "2025-08-04T09:33:28.907Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "gotd/td",
      "importance": 9
    },
    {
      "name": "metoro-io/mcp-golang",
      "importance": 10
    },
    {
      "name": "pkg/errors",
      "importance": 4
    },
    {
      "name": "rs/zerolog",
      "importance": 7
    },
    {
      "name": "spf13/pflag",
      "importance": 7
    },
    {
      "name": "tidwall/gjson",
      "importance": 6
    },
    {
      "name": "urfave/cli/v3",
      "importance": 8
    },
    {
      "name": "golang.org/x/time",
      "importance": 3
    }
  ],
  "raw_dependencies": "=== go.mod ===\nmodule github.com/chaindead/telegram-mcp\n\ngo 1.24\n\nrequire (\n\tgithub.com/gotd/td v0.121.0\n\tgithub.com/metoro-io/mcp-golang v0.8.0\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/rs/zerolog v1.34.0\n\tgithub.com/spf13/pflag v1.0.6\n\tgithub.com/tidwall/gjson v1.18.0\n\tgithub.com/urfave/cli/v3 v3.1.0\n\tgolang.org/x/time v0.11.0\n)\n\nrequire (\n\tgithub.com/bahlo/generic-list-go v0.2.0 // indirect\n\tgithub.com/buger/jsonparser v1.1.1 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.3.0 // indirect\n\tgithub.com/coder/websocket v1.8.13 // indirect\n\tgithub.com/dlclark/regexp2 v1.11.5 // indirect\n\tgithub.com/fatih/color v1.18.0 // indirect\n\tgithub.com/ghodss/yaml v1.0.0 // indirect\n\tgithub.com/go-faster/errors v0.7.1 // indirect\n\tgithub.com/go-faster/jx v1.1.0 // indirect\n\tgithub.com/go-faster/xor v1.0.0 // indirect\n\tgithub.com/go-faster/yaml v0.4.6 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/gotd/ige v0.2.2 // indirect\n\tgithub.com/gotd/neo v0.1.5 // indirect\n\tgithub.com/invopop/jsonschema v0.12.0 // indirect\n\tgithub.com/klauspost/compress v1.18.0 // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/mattn/go-colorable v0.1.14 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/ogen-go/ogen v1.10.1 // indirect\n\tgithub.com/segmentio/asm v1.2.0 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.1 // indirect\n\tgithub.com/tidwall/sjson v1.2.5 // indirect\n\tgithub.com/wk8/go-ordered-map/v2 v2.1.8 // indirect\n\tgo.opentelemetry.io/otel v1.35.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.35.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.35.0 // indirect\n\tgo.uber.org/atomic v1.11.0 // indirect\n\tgo.uber.org/multierr v1.11.0 // indirect\n\tgo.uber.org/zap v1.27.0 // indirect\n\tgolang.org/x/crypto v0.36.0 // indirect\n\tgolang.org/x/exp v0.0.0-20230725093048-515e97ebf090 // indirect\n\tgolang.org/x/mod v0.24.0 // indirect\n\tgolang.org/x/net v0.37.0 // indirect\n\tgolang.org/x/sync v0.12.0 // indirect\n\tgolang.org/x/sys v0.31.0 // indirect\n\tgolang.org/x/text v0.23.0 // indirect\n\tgolang.org/x/tools v0.31.0 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\trsc.io/qr v0.2.0 // indirect\n)\n"
}
