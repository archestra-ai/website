{
  "name": "nwc",
  "slug": "getalby__nwc-mcp-server",
  "description": "Connect a bitcoin lightning wallet to your LLM using Nostr Wallet Connect and Model Context Protocol",
  "readme": "# ⚠️ DEPRECATED ⚠️\n\n**Please use [Alby MCP](https://github.com/getAlby/mcp/) instead!** \n\nThis repository has been deprecated in favor of Alby MCP, which includes all the NWC tools along with additional Lightning tools.\n\n# NWC MCP Server\n\nConnect a bitcoin lightning wallet to your LLM using Nostr Wallet Connect ([NWC](https://nwc.dev/) or [NIP-47](https://github.com/nostr-protocol/nips/blob/master/47.md)).\n\nThis MCP server uses the [official MCP TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n\n> See also the [Alby MCP server](https://github.com/getAlby/mcp) which includes additional useful tools.\n\n## Quick Start\n\n### Use the Alby-Hosted MCP Server\n\nIf your agent supports SSE (e.g. N8N) or HTTP Streamable transports, you can connect to Alby's MCP server.\n\n- SSE: `https://mcp.getalby.com/sse`\n- HTTP Streamable: `https://mcp.getalby.com/mcp`\n\nBoth require providing an NWC connection secret as `Bearer` authentication.\n\n### Add to Claude Desktop\n\nAdd this to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"nwc\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@getalby/nwc-mcp-server\"],\n      \"env\": {\n        \"NWC_CONNECTION_STRING\": \"YOUR NWC CONNECTION STRING HERE\"\n      }\n    }\n  }\n}\n```\n\n### Add to Goose\n\n1. Type `goose configure`\n2. Add extension -> Command Line Extension\n3. Call it `nwc`\n4. What command should be run: `npx -y @getalby/nwc-mcp-server`\n5. Timeout: 30\n6. Description: no\n7. environment variables: yes\n8. environment variable name: `NWC_CONNECTION_STRING`\n9. environment variable value: `nostr+walletconnect://...` (your NWC connection secret here)\n\n### Add to Cline\n\n> Copy the below and paste it into a cline prompt. It should prompt you to update the connection string.\n\n```json\nAdd the following to my MCP servers list:\n\n\"nwc\": {\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@getalby/nwc-mcp-server\"],\n  \"env\": {\n    \"NWC_CONNECTION_STRING\": \"nostr+walletconnect://...\"\n  },\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\n### Add to N8N via SSE\n\nYou can use the native N8N MCP Client tool connected to an AI agent. Enter your SSE endpoint, set authentication to \"Bearer\" and paste your NWC connection secret.\n\nTested with OpenRouter + anthropic/claude-3.7-sonnet\n\nSee the [N8N workflow](examples/n8n-sse) for a simple example\n\n### Add to N8N via STDIO (Community Node)\n\nCurrently this MCP server only works via command line (STDIO).\n\nYou can install the [n8n-nodes-mcp](https://github.com/nerding-io/n8n-nodes-mcp) community node and run n8n with tools enabled e.g.\n\n```bash\nN8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true npx n8n\n```\n\nCreate a blank workflow and add an AI agent node. Configure your LLM model and add a new tool \"MCP Client\" (which will have a cube next to it showing it's a community node).\n\nConfigure the MCP Client by adding a credential with Command Line (STDIO) selected.\n\ncommand: `npx`\narguments: `-y @getalby/nwc-mcp-server`\nenvironments `NWC_CONNECTION_STRING=nostr+walletconnect://your_key_here` (create the whole line in a text editor and paste it in, since the password field cannot be switched to plaintext)\n\nSee the [N8N paid chat workflow](examples/n8n-paid-chat-stdio) for a full example\n\n## Modes\n\n### STDIO\n\nBy default NWC MCP Server runs locally in `STDIO` mode.\n\n### HTTP\n\nYou can set the following environment variable: `MODE=HTTP` which will enable Streamable HTTP (`http://localhost:3000/mcp`) and SSE (`http://localhost:3000/sse` Note: SSE is deprecated).\n\nHTTP requires bearer authorization, where the token is a wallet's NWC connection secret.\n\n## From Source\n\n### Prerequisites\n\n- Node.js 20+\n- Yarn\n- A connection string from a lightning wallet that supports NWC\n\n### Installation\n\n```bash\nyarn install\n```\n\n### Building\n\n```bash\nyarn build\n```\n\n### Add your NWC connection\n\nCopy `.env.example` to `.env` and update your connection string\n\n### Inspect the tools (use/test without an LLM)\n\n`yarn inspect`\n\n### Supported Tools\n\nSee the [tools directory](./src/tools)\n",
  "category": "AI Tools",
  "qualityScore": 47,
  "githubUrl": "https://github.com/getalby/nwc-mcp-server",
  "programmingLanguage": "TypeScript",
  "gitHubOrg": "getalby",
  "gitHubRepo": "nwc-mcp-server",
  "repositoryPath": null,
  "gh_stars": 13,
  "gh_contributors": 1,
  "gh_issues": 0,
  "gh_releases": false,
  "gh_ci_cd": true,
  "gh_latest_commit_hash": "842f87ba199082b890eab4c6bf0bfcd1440713f6",
  "last_scraped_at": "2025-08-04T09:37:14.395Z",
  "implementing_tools": true,
  "implementing_prompts": false,
  "implementing_resources": false,
  "implementing_sampling": false,
  "implementing_roots": false,
  "implementing_logging": false,
  "implementing_stdio": true,
  "implementing_streamable_http": true,
  "implementing_oauth2": false,
  "rawDependencies": "=== package.json ===\n{\n  \"name\": \"@getalby/nwc-mcp-server\",\n  \"description\": \"MCP server for controlling a Lightning wallet using Nostr Wallet Connect\",\n  \"repository\": \"https://github.com/getAlby/nwc-mcp-server.git\",\n  \"version\": \"1.2.0\",\n  \"type\": \"module\",\n  \"main\": \"build/index.js\",\n  \"bin\": {\n    \"nwc-mcp-server\": \"build/index.js\"\n  },\n  \"files\": [\n    \"build/**/*\"\n  ],\n  \"scripts\": {\n    \"prepack\": \"yarn build\",\n    \"build\": \"tsc && chmod 755 build/index.js\",\n    \"start\": \"node build/index.js\",\n    \"start:http\": \"MODE=HTTP node build/index.js\",\n    \"inspect\": \"npx @modelcontextprotocol/inspector node build/index.js\"\n  },\n  \"keywords\": [\n    \"lightning\",\n    \"nostr\",\n    \"nwc\",\n    \"wallet\",\n    \"mcp\",\n    \"model-context-protocol\",\n    \"ai\"\n  ],\n  \"author\": \"Alby contributors\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@getalby/sdk\": \"^4.1.1\",\n    \"@modelcontextprotocol/sdk\": \"^1.12.0\",\n    \"@types/node\": \"^20.11.5\",\n    \"dotenv\": \"^16.4.7\",\n    \"express\": \"^5.1.0\",\n    \"typescript\": \"^5.3.3\",\n    \"websocket-polyfill\": \"0.0.3\"\n  },\n  \"devDependencies\": {\n    \"@types/express\": \"^5.0.2\"\n  }\n}\n",
  "evaluation_model": "gemini-2.5-flash",
  "configForClients": {
    "mcpServers": {
      "getalby-nwc-mcp-server": {
        "command": "npx",
        "args": ["-y", "@getalby/nwc-mcp-server"],
        "env": {
          "NWC_CONNECTION_STRING": "YOUR NWC CONNECTION STRING HERE"
        }
      },
      "getalby-nwc-mcp-server-http": {
        "command": "npx",
        "args": ["-y", "@getalby/nwc-mcp-server"],
        "env": {
          "MODE": "HTTP",
          "NWC_CONNECTION_STRING": "YOUR NWC CONNECTION STRING HERE"
        }
      }
    }
  },
  "configForArchestra": {
    "command": "npx",
    "args": ["-y", "@getalby/nwc-mcp-server"],
    "env": {
      "server-basic": "",
      "server-configured": "",
      "server-docker": ""
    },
    "transport": "stdio",
    "oauth": {}
  },
  "dependencies": [
    {
      "importance": 9,
      "name": "@getalby/sdk"
    },
    {
      "importance": 10,
      "name": "@modelcontextprotocol/sdk"
    },
    {
      "importance": 2,
      "name": "@types/node"
    },
    {
      "importance": 4,
      "name": "dotenv"
    },
    {
      "importance": 10,
      "name": "express"
    },
    {
      "importance": 2,
      "name": "typescript"
    },
    {
      "importance": 8,
      "name": "websocket-polyfill"
    }
  ]
}
