{
  "dxt_version": "0.1.0",
  "name": "harry-027__jotdown",
  "display_name": "JotDown",
  "version": "1.0.0",
  "description": "An MCP Server in Rust for creating Notion pages & mdBooks with LLMs ü¶Ä",
  "author": {
    "name": "Harry-027"
  },
  "server": {
    "command": "${__dirname}/target/release/Jotdown",
    "args": [],
    "env": {
      "NOTION_TOKEN": "${user_config.notion_token}"
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "notion_token": {
      "type": "string",
      "title": "Notion Integration Token",
      "description": "Your Notion API token (internal integration secret) to integrate with Notion.",
      "sensitive": true,
      "required": true
    }
  },
  "readme": "# Jotdown - MCP Server for Notion Page Creation and mdBook Generation\n\nJotdown is a Model Context Protocol (MCP) server that allows large language models (LLMs) to interact with **Notion** and also generate **Markdown Books**. It provides two primary tools for LLMs:\n\n- üëâ  **Notion Integration**: Create or update pages in **Notion** with content generated by the LLM.\n- üëâ  **Mdbook Generation**: Generate a **mdbook** from content and manage the structure.\n\nJotdown enables LLMs to seamlessly integrate with these systems for various content management and publishing workflows.\n\n---\n\n## Certified by MCPHub\n- üëâ [JotDown](https://mcphub.com/mcp-servers/harry-027/jotdown)\n\n---\n\n## Features\n\n- üåø **Notion Integration**: Automatically create or update Notion pages with content generated by the LLM.\n- üåø **Mdbook Generation**: Create and manage **mdbooks** directly from content, including generating necessary files like `SUMMARY.md`, `README.md`, and individual chapter markdown files.\n- üåø **MCP Support**: Leverages the Model Context Protocol to maintain context over interactions, enabling more intelligent and consistent content creation and updates.\n\n---\n\n## Tools Provided by Jotdown\n\n### 1. **Notion Page Tool**\n   LLMs can use the Notion tool to create or update pages within Notion, allowing them to store structured content like articles or any other type of document directly in Notion.\n\n   #### Example:\n   - Create a new page in Notion with content that the LLM has generated.\n   - Update an existing Notion page with new information.\n\n### 2. **mdbook Tool**\n   With the mdbook tool, LLMs can automatically generate markdown books, handling the creation of multiple chapters, managing the structure, and adding a `SUMMARY.md` file for navigation.\n\n   #### Example:\n   - Generate a new book based on LLM-generated content.\n   - Automatically generate chapters with proper links in `SUMMARY.md`.\n\n---\n\n## Installation\n\n### Prerequisites\n\n- **Rust**: Make sure you have Rust installed. You can install it from [rust-lang.org](https://www.rust-lang.org/).\n- **Notion API Token**: You will need a Notion API token (`internal integration secret`) to integrate with Notion.\n- **Claude Desktop**: Make sure you have Claude desktop or any other MCP client (Cline, Continue etc) installed and configured with a Notion integration token.\n\n### Steps to Install\n\n1. Clone the repository:\n\n    ```bash\n    git clone https://github.com/Harry-027/JotDown\n    cd jotdown\n    ```\n\n2. Install dependencies:\n\n    ```bash\n    cargo build --release\n    ```\n\n3. Install mdbook cli (required for the book generation to work):\n\n    ```bash\n    cargo install mdbook\n    ```\n\n4. Notion setup:\n\n    * Setup Notion connection (internal intergation with access to Notion workspace) & copy the `internal intergration secret` for later use.\n    * Setup a page with title `Jot It Down` in your workspace and share it with your connection. This is required for the integration to work.\n\n5. Set up Claude desktop (or any other MCP client) configuration file (for Notion integration):\n    ```json\n      \"mcpServers\": {\n            \"Jotdown\": {\n                \"command\": \"/path_to_repo/Jotdown/target/release/Jotdown\",\n                \"args\": [],\n                \"env\": {\n                    \"NOTION_TOKEN\": \"your_notion_intergration_token\"\n                }\n            }\n      }\n    ```\n\n6. Restart Claude desktop and try it out!\n\n---\n\n### Notion Integration Example:\n\n- To create or update a Notion page, the LLM sends a request to the server specifying the content and page details. The server then interacts with the Notion API to either create a new page or update an existing one.\n\n### Mdbook Integration Example:\n\n- LLMs can send structured content to the server to create an entire mdbook, including chapter creation, `README.md`, and `SUMMARY.md` management. The server compiles the content into a complete book.\n\n---\n\n## üßë‚Äçüíª Demo\n\n### Notion Demo -\n\n![Demo Notion](./demo/demo_1.gif)\n\n### MdBook Demo -\n\n![Demo mdbook](./demo/demo_2.gif)\n\n### MdBook Screenshots -\n\n![Demo mdbook screenshot 1](./demo/demo_s_1.png)\n![Demo mdbook screenshot 2](./demo/demo_s_2.png)\n\n---\n\n## üßë‚Äçüíª Contributing\n\nFeel free to open issues or submit pull requests.\n\n---\n\n## üìú License\n\nJotdown is licensed under the **MIT License**. See the LICENSE file for details.\n\n---\n\n## üìß Contact\n\nFor support or inquiries, reach out at [harishmmp@gmail.com](mailto:harishmmp@gmail.com).\n",
  "category": "AI Tools",
  "quality_score": 44,
  "archestra_config": {
    "client_config_permutations": {
      "Jotdown": {
        "command": "/path_to_repo/Jotdown/target/release/Jotdown",
        "args": [],
        "env": {
          "NOTION_TOKEN": "your_notion_intergration_token"
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "Harry-027",
    "repo": "JotDown",
    "url": "https://github.com/Harry-027/JotDown",
    "name": "JotDown",
    "path": null,
    "stars": 20,
    "contributors": 3,
    "issues": 0,
    "releases": false,
    "ci_cd": false,
    "latest_commit_hash": "026b483a410b5e60f221fa18eab2973782cec45d"
  },
  "programming_language": "Rust",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:47.200Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "rmcp",
      "importance": 10
    },
    {
      "name": "tokio",
      "importance": 9
    },
    {
      "name": "serde",
      "importance": 8
    },
    {
      "name": "serde_json",
      "importance": 8
    },
    {
      "name": "reqwest",
      "importance": 8
    },
    {
      "name": "tracing",
      "importance": 6
    },
    {
      "name": "tracing-subscriber",
      "importance": 6
    },
    {
      "name": "anyhow",
      "importance": 5
    },
    {
      "name": "dotenv",
      "importance": 5
    },
    {
      "name": "regex",
      "importance": 5
    },
    {
      "name": "dirs",
      "importance": 4
    }
  ],
  "raw_dependencies": "=== Cargo.toml ===\n[package]\nname = \"Jotdown\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n[dependencies]\nrmcp = { version = \"0.1\", features = [\n    \"server\",\n    \"transport-sse-server\",\n    \"transport-io\",\n] }\ntokio = { version = \"1\", features = [\n    \"macros\",\n    \"rt\",\n    \"rt-multi-thread\",\n    \"io-std\",\n    \"signal\",\n] }\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\ntracing = \"0.1\"\ntracing-subscriber = { version = \"0.3\", features = [\n    \"env-filter\",\n    \"std\",\n    \"fmt\",\n] }\n\nanyhow = \"1.0\"\ndotenv = \"0.15\"\nreqwest = { version = \"0.11\", features = [\"json\"] }\nschemars = { version = \"0.8\", optional = true }\ndirs = \"5\"\nregex = \"1.9.5\""
}
