{
  "dxt_version": "0.1.0",
  "name": "fradser__mcp-server-apple-reminders",
  "display_name": "Apple Reminders",
  "version": "1.0.0",
  "description": "MCP server from FradSer/mcp-server-apple-reminders",
  "author": {
    "name": "FradSer"
  },
  "server": {
    "command": "npx",
    "args": ["-y", "mcp-server-apple-reminders"],
    "env": {}
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "# Apple Reminders MCP Server ![Version 0.7.2](https://img.shields.io/badge/version-0.7.2-blue) ![License: MIT](https://img.shields.io/badge/license-MIT-green)\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/FradSer?style=social)](https://twitter.com/FradSer)\n\nEnglish | [简体中文](README.zh-CN.md)\n\nA Model Context Protocol (MCP) server that provides native integration with Apple Reminders on macOS. This server allows you to interact with Apple Reminders through a standardized interface with comprehensive management capabilities.\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/fradser-mcp-server-apple-reminders-badge.png)](https://mseep.ai/app/fradser-mcp-server-apple-reminders)\n\n## Features\n\n### Core Functionality\n- **List Management**: View all reminders and reminder lists with advanced filtering\n- **Reminder Operations**: Create, update, delete, and move reminders across lists\n- **Rich Content**: Support for titles, notes, due dates, URLs, and completion status\n- **Native Integration**: Seamless integration with macOS Apple Reminders app\n\n### Advanced Features\n- **Smart Organization**: Automatic categorization by priority, due date, category, or completion status\n- **Powerful Search**: Filter reminders by completion status, due dates, and search terms\n- **Batch Operations**: Organize multiple reminders with intelligent strategies\n- **Permission Management**: Proactive validation of system permissions\n- **Flexible Date Handling**: Support for both date-only and date-time formats with locale awareness\n- **Unicode Support**: Full international character support with validation\n\n### Technical Excellence\n- **Unified API**: Streamlined tool architecture with action-based operations\n- **Type Safety**: Comprehensive TypeScript coverage with Zod validation\n- **Performance**: Swift binaries for performance-critical operations\n- **Error Handling**: Consistent error responses with detailed feedback\n\n## Prerequisites\n\n- **Node.js 18 or later**\n- **macOS** (required for Apple Reminders integration)\n- **Xcode Command Line Tools** (required for compiling Swift code)\n- **pnpm** (recommended for package management)\n\n## Quick Start\n\nInstall globally via npm:\n\n```bash\nnpm install -g mcp-server-apple-reminders\n```\n\n## Configuration\n\n### Configure Cursor\n\n1. Open Cursor\n2. Open Cursor settings\n3. Click on \"MCP\" in the sidebar\n4. Click \"Add new global MCP server\"\n5. Configure the server with the following settings:\n    ```json\n    {\n      \"mcpServers\": {\n        \"apple-reminders\": {\n          \"command\": \"mcp-server-apple-reminders\",\n          \"args\": []\n        }\n      }\n    }\n    ```\n\n### Configure ChatWise\n\n1. Open ChatWise\n2. Go to Settings\n3. Navigate to the Tools section\n4. Click the \"+\" button\n5. Configure the tool with the following settings:\n   - Type: `stdio`\n   - ID: `apple-reminders`\n   - Command: `mcp-server-apple-reminders`\n   - Args: (leave empty)\n\n### Configure Claude Desktop\n\nYou need to configure Claude Desktop to recognize the Apple Reminders MCP server. There are two ways to access the configuration:\n\n#### Option 1: Through Claude Desktop UI\n\n1. Open Claude Desktop app\n2. Enable Developer Mode from the top-left menu bar\n3. Open Settings and navigate to the Developer Option\n4. Click the Edit Config button to open `claude_desktop_config.json`\n\n#### Option 2: Direct File Access\n\nFor macOS:\n```bash\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\nFor Windows:\n```bash\ncode %APPDATA%\\Claude\\claude_desktop_config.json\n```\n\n### 2. Add Server Configuration\n\nAdd the following configuration to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"apple-reminders\": {\n      \"command\": \"mcp-server-apple-reminders\",\n      \"args\": []\n    }\n  }\n}\n```\n\n### 3. Restart Claude Desktop\n\nFor the changes to take effect:\n\n1. Completely quit Claude Desktop (not just close the window)\n2. Start Claude Desktop again\n3. Look for the tool icon to verify the Apple Reminders server is connected\n\n## Usage Examples\n\nOnce configured, you can ask Claude to interact with your Apple Reminders. Here are some example prompts:\n\n### Creating Reminders\n```\nCreate a reminder to \"Buy groceries\" for tomorrow at 5 PM.\nAdd a reminder to \"Call mom\" with a note \"Ask about weekend plans\".\nCreate a reminder in my \"Work\" list to \"Submit report\" due next Friday.\n```\n\n\n### Update Reminders\n```\nUpdate the reminder \"Buy groceries\" with a new title \"Buy organic groceries\".\nUpdate \"Call mom\" reminder to be due today at 6 PM.\nUpdate the reminder \"Submit report\" and mark it as completed.\nChange the notes on \"Buy groceries\" to \"Don't forget milk and eggs\".\n```\n\n### Managing Reminders\n```\nShow me all my reminders.\nList all reminders in my \"Shopping\" list.\nShow my completed reminders.\n```\n\n### Working with Lists\n```\nShow all my reminder lists.\nShow reminders from my \"Work\" list.\n```\n\nThe server will:\n- Process your natural language requests\n- Interact with Apple's native Reminders app\n- Return formatted results to Claude\n- Maintain native integration with macOS\n\n## Available MCP Tools\n\nThis server provides two unified MCP tools for comprehensive Apple Reminders management:\n\n### Reminders Tool\n\n**Tool Name**: `reminders`\n\nA comprehensive tool for managing Apple Reminders with action-based operations. Supports all reminder operations through a single unified interface.\n\n**Actions**: `list`, `create`, `update`, `delete`, `move`, `organize`\n\n#### Parameters by Action\n\n**List Action** (`action: \"list\"`):\n- `list` *(optional)*: Name of the reminder list to show\n- `showCompleted` *(optional)*: Include completed reminders (default: false)\n- `search` *(optional)*: Search term to filter reminders by title or content\n- `dueWithin` *(optional)*: Filter by due date range (\"today\", \"tomorrow\", \"this-week\", \"overdue\", \"no-date\")\n\n**Create Action** (`action: \"create\"`):\n- `title` *(required)*: Title of the reminder\n- `dueDate` *(optional)*: Due date in format 'YYYY-MM-DD' or 'YYYY-MM-DD HH:mm:ss'\n- `list` *(optional)*: Name of the reminders list to add to\n- `note` *(optional)*: Note text to attach to the reminder\n- `url` *(optional)*: URL to associate with the reminder\n\n**Update Action** (`action: \"update\"`):\n- `title` *(required)*: Current title of the reminder to update\n- `newTitle` *(optional)*: New title for the reminder\n- `dueDate` *(optional)*: New due date in format 'YYYY-MM-DD' or 'YYYY-MM-DD HH:mm:ss'\n- `note` *(optional)*: New note text\n- `completed` *(optional)*: Mark reminder as completed/uncompleted\n- `list` *(optional)*: Name of the list containing the reminder\n- `url` *(optional)*: New URL to attach to the reminder\n\n**Delete Action** (`action: \"delete\"`):\n- `title` *(required)*: Title of the reminder to delete\n- `list` *(optional)*: Name of the list containing the reminder\n\n**Move Action** (`action: \"move\"`):\n- `title` *(required)*: Title of the reminder to move\n- `fromList` *(optional)*: Source list name\n- `toList` *(required)*: Destination list name\n\n**Organize Action** (`action: \"organize\"`):\n- `strategy` *(required)*: Organization strategy (\"priority\", \"due_date\", \"category\", \"completion_status\")\n- `sourceList` *(optional)*: Source list to organize from\n- `createLists` *(optional)*: Create new lists automatically (default: true)\n\n#### Example Usage\n\n```json\n{\n  \"action\": \"create\",\n  \"title\": \"Buy groceries\",\n  \"dueDate\": \"2024-03-25 18:00:00\",\n  \"list\": \"Shopping\",\n  \"note\": \"Don't forget milk and eggs\",\n  \"url\": \"https://example.com/shopping-list\"\n}\n```\n\n```json\n{\n  \"action\": \"list\",\n  \"list\": \"Work\",\n  \"showCompleted\": false,\n  \"dueWithin\": \"today\"\n}\n```\n\n```json\n{\n  \"action\": \"organize\",\n  \"strategy\": \"category\",\n  \"sourceList\": \"Inbox\",\n  \"createLists\": true\n}\n```\n\n### Lists Tool\n\n**Tool Name**: `lists`\n\nManage reminder lists - view existing lists or create new ones for organizing reminders.\n\n**Actions**: `list`, `create`\n\n#### Parameters by Action\n\n**List Action** (`action: \"list\"`):\n- No additional parameters required\n\n**Create Action** (`action: \"create\"`):\n- `name` *(required)*: Name for new reminder list\n\n#### Example Usage\n\n```json\n{\n  \"action\": \"create\",\n  \"name\": \"Project Alpha\"\n}\n```\n\n#### Response Formats\n\n**Success Response**:\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Successfully created reminder: Buy groceries\"\n    }\n  ],\n  \"isError\": false\n}\n```\n\n**List Response**:\n```json\n{\n  \"reminders\": [\n    {\n      \"title\": \"Buy groceries\",\n      \"list\": \"Shopping\",\n      \"isCompleted\": false,\n      \"dueDate\": \"2024-03-25 18:00:00\",\n      \"notes\": \"Don't forget milk\",\n      \"url\": null\n    }\n  ],\n  \"total\": 1,\n  \"filter\": {\n    \"list\": \"Shopping\",\n    \"showCompleted\": false\n  }\n}\n```\n\n## Organization Strategies\n\nThe server provides intelligent reminder organization capabilities through four built-in strategies:\n\n### Priority Strategy\nAutomatically categorizes reminders based on priority keywords:\n- **High Priority**: Contains words like \"urgent\", \"important\", \"critical\", \"asap\"\n- **Medium Priority**: Default category for standard reminders\n- **Low Priority**: Contains words like \"later\", \"someday\", \"eventually\", \"maybe\"\n\n### Due Date Strategy\nOrganizes reminders based on their due dates:\n- **Overdue**: Past due dates\n- **Today**: Due today\n- **Tomorrow**: Due tomorrow\n- **This Week**: Due within the current week\n- **Next Week**: Due next week\n- **Future**: Due beyond next week\n- **No Date**: Reminders without due dates\n\n### Category Strategy\nIntelligently categorizes reminders by content analysis:\n- **Work**: Business, meetings, projects, office, client related\n- **Personal**: Home, family, friends, self-care related\n- **Shopping**: Buy, store, purchase, groceries related\n- **Health**: Doctor, exercise, medical, fitness, workout related\n- **Finance**: Bills, payments, bank, budget related\n- **Travel**: Trips, flights, hotels, vacation related\n- **Education**: Study, learn, courses, books, research related\n- **Uncategorized**: Doesn't match any specific category\n\n### Completion Status Strategy\nSimple binary organization:\n- **Active**: Incomplete reminders\n- **Completed**: Finished reminders\n\n### Usage Examples\n\nOrganize all reminders by priority:\n```\nOrganize my reminders by priority\n```\n\nCategorize work-related reminders:\n```\nOrganize reminders from Work list by category\n```\n\nSort overdue items:\n```\nOrganize overdue reminders by due date\n```\n\n## License\n\nMIT\n\n## Contributing\n\nContributions welcome! Please read the contributing guidelines first.\n\n## Development\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the project (TypeScript and Swift binary):\n```bash\nnpm run build\n```\n\n### Project Structure\n\n```\n.\n├── src/                          # Source code directory\n│   ├── index.ts                  # Main entry point\n│   ├── server/                   # MCP server implementation\n│   │   ├── server.ts             # Server configuration and lifecycle\n│   │   ├── handlers.ts           # Request handlers and routing\n│   │   └── *.test.ts             # Server tests\n│   ├── swift/                    # Native Swift integration code\n│   │   ├── bin/                  # Compiled Swift binaries\n│   │   ├── GetReminders.swift    # Swift source file\n│   │   └── build.sh              # Swift build script\n│   ├── tools/                    # MCP tool definitions and handlers\n│   │   ├── definitions.ts        # Tool schemas and validation\n│   │   ├── handlers.ts           # Tool implementation logic\n│   │   ├── index.ts              # Tool registration\n│   │   └── *.test.ts             # Tool tests\n│   ├── types/                    # TypeScript type definitions\n│   │   └── index.ts              # Core type definitions\n│   ├── utils/                    # Helper functions and utilities\n│   │   ├── __mocks__/            # Test mocks\n│   │   ├── *.ts                  # Utility modules\n│   │   └── *.test.ts             # Utility tests\n│   ├── validation/               # Schema validation utilities\n│   │   └── schemas.ts            # Zod validation schemas\n│   └── test-setup.ts             # Test environment setup\n├── dist/                         # Compiled JavaScript output\n│   ├── index.js                  # Main compiled entry point\n│   ├── swift/bin/                # Compiled Swift binaries\n│   ├── server/                   # Server compiled files\n│   ├── tools/                    # Tools compiled files\n│   ├── types/                    # Types compiled files\n│   ├── utils/                    # Utils compiled files\n│   └── validation/               # Validation compiled files\n├── node_modules/                 # Node.js dependencies\n├── package.json                  # Package configuration\n├── tsconfig.json                 # TypeScript configuration\n├── jest.config.mjs               # Jest test configuration\n├── pnpm-lock.yaml               # pnpm lock file\n└── *.md                         # Documentation files\n```\n\n### Available Scripts\n\n- `npm run build` - Build both TypeScript and Swift components (REQUIRED before starting server)\n- `npm run build:ts` - Build TypeScript code only\n- `npm run build:swift` - Build Swift binary only\n- `npm run dev` - TypeScript development mode with file watching\n- `npm run start` - Start the MCP server\n- `npm run test` - Run comprehensive test suite\n- `npm run clean` - Clean build artifacts\n\n### Dependencies\n\n**Runtime Dependencies:**\n- `@modelcontextprotocol/sdk ^1.5.0` - MCP protocol implementation\n- `moment ^2.30.1` - Date/time handling utilities\n- `zod ^3.24.2` - Runtime type validation\n\n**Development Dependencies:**\n- `typescript ^5.8.2` - TypeScript compiler\n- `@types/node ^20.0.0` - Node.js type definitions\n- `@types/jest ^29.5.12` - Jest type definitions\n- `jest ^29.7.0` - Testing framework\n- `ts-jest ^29.1.2` - Jest TypeScript support\n\n**Build Tools:**\n- Swift binaries for native macOS integration\n- TypeScript compilation for cross-platform compatibility\n",
  "category": "AI Tools",
  "quality_score": 63,
  "archestra_config": {
    "client_config_permutations": {
      "mcp-server-apple-reminders": {
        "command": "mcp-server-apple-reminders",
        "args": [],
        "env": {}
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": true
  },
  "github_info": {
    "owner": "FradSer",
    "repo": "mcp-server-apple-reminders",
    "url": "https://github.com/FradSer/mcp-server-apple-reminders",
    "name": "fradser__mcp-server-apple-reminders",
    "path": null,
    "stars": 104,
    "contributors": 5,
    "issues": 0,
    "releases": true,
    "ci_cd": false,
    "latest_commit_hash": "e6018772f08e4834b10197d4b14bafdb3a2789c9"
  },
  "programming_language": "TypeScript",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:05:13.786Z",
  "evaluation_model": "gemini-2.5-pro",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "@modelcontextprotocol/sdk",
      "importance": 10
    },
    {
      "name": "arktype",
      "importance": 4
    },
    {
      "name": "moment",
      "importance": 4
    },
    {
      "name": "zod",
      "importance": 4
    }
  ],
  "raw_dependencies": "=== package.json ===\n{\n  \"name\": \"mcp-server-apple-reminders\",\n  \"version\": \"0.7.3\",\n  \"description\": \"MCP server that provides native integration with Apple Reminders on macOS.\",\n  \"author\": \"Frad Lee <https://frad.me>\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://frad.me\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/fradser/mcp-server-apple-reminders.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/fradser/mcp-server-apple-reminders/issues\"\n  },\n  \"keywords\": [\n    \"mcp\",\n    \"apple\",\n    \"reminders\",\n    \"automation\"\n  ],\n  \"type\": \"module\",\n  \"main\": \"dist/index.js\",\n  \"module\": \"src/index.js\",\n  \"bin\": {\n    \"mcp-server-apple-reminders\": \"./dist/index.js\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build:swift && npm run build:ts\",\n    \"build:ts\": \"tsc\",\n    \"build:swift\": \"src/swift/build.sh && mkdir -p dist/swift/bin && cp -p src/swift/bin/GetReminders dist/swift/bin/GetReminders\",\n    \"dev\": \"tsc --watch\",\n    \"start\": \"node dist/index.js\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^1.5.0\",\n    \"moment\": \"^2.30.1\",\n    \"zod\": \"^3.24.2\"\n  },\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"2.2.2\",\n    \"@types/jest\": \"^29.5.12\",\n    \"@types/node\": \"^20.0.0\",\n    \"babel-jest\": \"^29.7.0\",\n    \"babel-plugin-transform-import-meta\": \"^2.3.3\",\n    \"jest\": \"^29.7.0\",\n    \"ts-jest\": \"^29.1.2\",\n    \"typescript\": \"^5.8.2\"\n  },\n  \"peerDependencies\": {\n    \"typescript\": \"^5.0.0\"\n  }\n}\n"
}
