{
  "dxt_version": "0.1.0",
  "name": "stackloklabs__mkp",
  "display_name": "mkp",
  "version": "1.0.0",
  "description": "MKP is a Model Context Protocol (MCP) server for Kubernetes",
  "author": {
    "name": "StacklokLabs"
  },
  "server": {
    "type": "binary",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "unknown",
      "args": [],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "# MKP - Model Kontext Protocol Server for Kubernetes\n\n<p align=\"center\">\n  <img src=\"docs/assets/mkp-logo.png\" width=\"400\" alt=\"MKP Logo\">\n</p>\n\nMKP is a Model Context Protocol (MCP) server for Kubernetes that allows\nLLM-powered applications to interact with Kubernetes clusters. It provides tools\nfor listing and applying Kubernetes resources through the MCP protocol.\n\n## Features\n\n- List resources supported by the Kubernetes API server\n- List clustered resources\n- List namespaced resources\n- Get resources and their subresources (including status, scale, logs, etc.)\n- Apply (create or update) clustered resources\n- Apply (create or update) namespaced resources\n- Execute commands in pods with timeout control\n- Generic and pluggable implementation using API Machinery's unstructured client\n- Built-in rate limiting for protection against excessive API calls\n\n## Why MKP?\n\nMKP offers several key advantages as a Model Context Protocol server for\nKubernetes:\n\n### Native Go Implementation\n\n- Built with the same language as Kubernetes itself\n- Excellent performance characteristics for server applications\n- Strong type safety and concurrency support\n- Seamless integration with Kubernetes libraries\n\n### Direct API Integration\n\n- Uses Kubernetes API machinery directly without external dependencies\n- No reliance on kubectl, helm, or other CLI tools\n- Communicates directly with the Kubernetes API server\n- Reduced overhead and improved reliability\n\n### Universal Resource Support\n\n- Works with any Kubernetes resource type through the unstructured client\n- No hardcoded resource schemas or specialized handlers needed\n- Automatically supports Custom Resource Definitions (CRDs)\n- Future-proof for new Kubernetes resources\n\n### Minimalist Design\n\n- Focused on core Kubernetes resource operations\n- Clean, maintainable codebase with clear separation of concerns\n- Lightweight with minimal dependencies\n- Easy to understand, extend, and contribute to\n\n### Production-Ready Architecture\n\n- Designed for reliability and performance in production environments\n- Proper error handling and resource management\n- Built-in rate limiting to protect against excessive API calls\n- Testable design with comprehensive unit tests\n- Follows Kubernetes development best practices\n\n## Prerequisites\n\n- Go 1.24 or later\n- Kubernetes cluster and kubeconfig\n- [Task](https://taskfile.dev/) for running tasks\n\n## Installation\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/StacklokLabs/mkp.git\n   cd mkp\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   task install\n   ```\n\n3. Build the server:\n\n   ```bash\n   task build\n   ```\n\n## Usage\n\n### Running the server\n\nTo run the server with the default kubeconfig:\n\n```bash\ntask run\n```\n\nTo run the server with a specific kubeconfig:\n\n```bash\nKUBECONFIG=/path/to/kubeconfig task run-with-kubeconfig\n```\n\nTo run the server on a specific port:\n\n```bash\nMCP_PORT=9091 task run\n```\n\n### MCP Tools\n\nThe MKP server provides the following MCP tools:\n\n#### get_resource\n\nGet a Kubernetes resource or its subresource.\n\nParameters:\n\n- `resource_type` (required): Type of resource to get (clustered or namespaced)\n- `group`: API group (e.g., apps, networking.k8s.io)\n- `version` (required): API version (e.g., v1, v1beta1)\n- `resource` (required): Resource name (e.g., deployments, services)\n- `namespace`: Namespace (required for namespaced resources)\n- `name` (required): Name of the resource to get\n- `subresource`: Subresource to get (e.g., status, scale, logs)\n- `parameters`: Optional parameters for the request (see examples below)\n\nExample:\n\n```json\n{\n  \"name\": \"get_resource\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"apps\",\n    \"version\": \"v1\",\n    \"resource\": \"deployments\",\n    \"namespace\": \"default\",\n    \"name\": \"nginx-deployment\",\n    \"subresource\": \"status\"\n  }\n}\n```\n\nExample of getting logs from a specific container with parameters:\n\n```json\n{\n  \"name\": \"get_resource\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"\",\n    \"version\": \"v1\",\n    \"resource\": \"pods\",\n    \"namespace\": \"default\",\n    \"name\": \"my-pod\",\n    \"subresource\": \"logs\",\n    \"parameters\": {\n      \"container\": \"my-container\",\n      \"sinceSeconds\": \"3600\",\n      \"timestamps\": \"true\",\n      \"limitBytes\": \"102400\"\n    }\n  }\n}\n```\n\nAvailable parameters for pod logs:\n\n- `container`: Specify which container to get logs from\n- `previous`: Get logs from previous container instance (true/false)\n- `sinceSeconds`: Only return logs newer than a relative duration in seconds\n- `sinceTime`: Only return logs after a specific time (RFC3339 format)\n- `timestamps`: Include timestamps on each line (true/false)\n- `limitBytes`: Maximum number of bytes to return\n- `tailLines`: Number of lines to return from the end of the logs\n\nBy default, pod logs are limited to the last 100 lines and 32KB to avoid\noverwhelming the LLM's context window. These defaults can be overridden using\nthe parameters above.\n\nAvailable parameters for regular resources:\n\n- `resourceVersion`: When specified, shows the resource at that particular\n  version\n\n#### list_resources\n\nLists Kubernetes resources of a specific type.\n\nParameters:\n\n- `resource_type` (required): Type of resource to list (clustered or namespaced)\n- `group`: API group (e.g., apps, networking.k8s.io)\n- `version` (required): API version (e.g., v1, v1beta1)\n- `resource` (required): Resource name (e.g., deployments, services)\n- `namespace`: Namespace (required for namespaced resources)\n\nExample:\n\n```json\n{\n  \"name\": \"list_resources\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"apps\",\n    \"version\": \"v1\",\n    \"resource\": \"deployments\",\n    \"namespace\": \"default\"\n  }\n}\n```\n\n#### apply_resource\n\nApplies (creates or updates) a Kubernetes resource.\n\nParameters:\n\n- `resource_type` (required): Type of resource to apply (clustered or\n  namespaced)\n- `group`: API group (e.g., apps, networking.k8s.io)\n- `version` (required): API version (e.g., v1, v1beta1)\n- `resource` (required): Resource name (e.g., deployments, services)\n- `namespace`: Namespace (required for namespaced resources)\n- `manifest` (required): Resource manifest\n\nExample:\n\n```json\n{\n  \"name\": \"apply_resource\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"apps\",\n    \"version\": \"v1\",\n    \"resource\": \"deployments\",\n    \"namespace\": \"default\",\n    \"manifest\": {\n      \"apiVersion\": \"apps/v1\",\n      \"kind\": \"Deployment\",\n      \"metadata\": {\n        \"name\": \"nginx-deployment\",\n        \"namespace\": \"default\"\n      },\n      \"spec\": {\n        \"replicas\": 3,\n        \"selector\": {\n          \"matchLabels\": {\n            \"app\": \"nginx\"\n          }\n        },\n        \"template\": {\n          \"metadata\": {\n            \"labels\": {\n              \"app\": \"nginx\"\n            }\n          },\n          \"spec\": {\n            \"containers\": [\n              {\n                \"name\": \"nginx\",\n                \"image\": \"nginx:latest\",\n                \"ports\": [\n                  {\n                    \"containerPort\": 80\n                  }\n                ]\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n#### post_resource\n\nPosts to a Kubernetes resource or its subresource, particularly useful for\nexecuting commands in pods.\n\nParameters:\n\n- `resource_type` (required): Type of resource to post to (clustered or\n  namespaced)\n- `group`: API group (e.g., apps, networking.k8s.io)\n- `version` (required): API version (e.g., v1, v1beta1)\n- `resource` (required): Resource name (e.g., deployments, services)\n- `namespace`: Namespace (required for namespaced resources)\n- `name` (required): Name of the resource to post to\n- `subresource`: Subresource to post to (e.g., exec)\n- `body` (required): Body to post to the resource\n- `parameters`: Optional parameters for the request\n\nExample of executing a command in a pod:\n\n```json\n{\n  \"name\": \"post_resource\",\n  \"arguments\": {\n    \"resource_type\": \"namespaced\",\n    \"group\": \"\",\n    \"version\": \"v1\",\n    \"resource\": \"pods\",\n    \"namespace\": \"default\",\n    \"name\": \"my-pod\",\n    \"subresource\": \"exec\",\n    \"body\": {\n      \"command\": [\"ls\", \"-la\", \"/\"],\n      \"container\": \"my-container\",\n      \"timeout\": 30\n    }\n  }\n}\n```\n\nThe `body` for pod exec supports the following fields:\n\n- `command` (required): Command to execute, either as a string or an array of\n  strings\n- `container` (optional): Container name to execute the command in (defaults to\n  the first container)\n- `timeout` (optional): Timeout in seconds (defaults to 15 seconds, maximum 60\n  seconds)\n\nNote on timeouts:\n\n- Default timeout: 15 seconds if not specified\n- Maximum timeout: 60 seconds (any larger value will be capped)\n- Commands that exceed the timeout will be terminated and return a timeout error\n\nThe response includes stdout, stderr, and any error message:\n\n```json\n{\n  \"apiVersion\": \"v1\",\n  \"kind\": \"Pod\",\n  \"metadata\": {\n    \"name\": \"my-pod\",\n    \"namespace\": \"default\"\n  },\n  \"spec\": {\n    \"command\": [\"ls\", \"-la\", \"/\"]\n  },\n  \"status\": {\n    \"stdout\": \"total 48\\ndrwxr-xr-x   1 root root 4096 May  5 14:30 .\\ndrwxr-xr-x   1 root root 4096 May  5 14:30 ..\\n...\",\n    \"stderr\": \"\",\n    \"error\": \"\"\n  }\n}\n```\n\n### MCP Resources\n\nThe MKP server provides access to Kubernetes resources through MCP resources.\nThe resource URIs follow these formats:\n\n- Clustered resources: `k8s://clustered/{group}/{version}/{resource}/{name}`\n- Namespaced resources:\n  `k8s://namespaced/{namespace}/{group}/{version}/{resource}/{name}`\n\n### Configuration\n\n#### Controlling Resource Discovery\n\nBy default, MKP serves all Kubernetes resources as MCP resources, which provides\nuseful context for LLMs. However, in large clusters with many resources, this\ncan consume significant context space in the LLM.\n\nYou can disable this behavior by using the `--serve-resources` flag:\n\n```bash\n# Run without serving cluster resources\n./build/mkp-server --serve-resources=false\n\n# Run with a specific kubeconfig without serving cluster resources\n./build/mkp-server --kubeconfig=/path/to/kubeconfig --serve-resources=false\n```\n\nEven with resource discovery disabled, the MCP tools (`get_resource`,\n`list_resources`, `apply_resource`, `delete_resource`, and `post_resource`)\nremain fully functional, allowing you to interact with your Kubernetes cluster.\n\n#### Enabling Write Operations\n\nBy default, MKP operates in read-only mode, meaning it does not allow write\noperations on the cluster, i.e. the `apply_resource`, `delete_resource`, and\n`post_resource` tools will not be available. You can enable write operations by\nusing the `--read-write` flag:\n\n```bash\n# Run with write operations enabled\n./build/mkp-server --read-write=true\n\n# Run with a specific kubeconfig and write operations enabled\n./build/mkp-server --kubeconfig=/path/to/kubeconfig --read-write=true\n```\n\n### Rate Limiting\n\nMKP includes a built-in rate limiting mechanism to protect the server from\nexcessive API calls, which is particularly important when used with AI agents.\nThe rate limiter uses a token bucket algorithm and applies different limits\nbased on the operation type:\n\n- Read operations (list_resources, get_resource): 120 requests per minute\n- Write operations (apply_resource, delete_resource): 30 requests per minute\n- Default for other operations: 60 requests per minute\n\nRate limits are applied per client session, ensuring fair resource allocation\nacross multiple clients. The rate limiting feature can be enabled or disabled\nvia the command line flag:\n\n```bash\n# Run with rate limiting enabled (default)\n./build/mkp-server\n\n# Run with rate limiting disabled\n./build/mkp-server --enable-rate-limiting=false\n```\n\n## Development\n\n### Running tests\n\n```bash\ntask test\n```\n\n### Formatting code\n\n```bash\ntask fmt\n```\n\n### Linting code\n\n```bash\ntask lint\n```\n\n### Updating dependencies\n\n```bash\ntask deps\n```\n\n## Running as an MCP Server with ToolHive\n\nMKP can be run as a Model Context Protocol (MCP) server using\n[ToolHive](https://github.com/stacklok/toolhive), which simplifies the\ndeployment and management of MCP servers.\n\n### Prerequisites\n\n1. Install ToolHive by following the\n   [installation instructions](https://docs.stacklok.com/toolhive/guides-cli/install).\n2. Ensure you have Docker or Podman installed on your system.\n3. Configure your Kubernetes credentials (kubeconfig) for the cluster you want\n   to interact with.\n\n### Running MKP with ToolHive (Recommended)\n\nThe easiest way to run MKP is using the packaged version available in ToolHive's\nregistry:\n\n```bash\n# Register a supported client so ToolHive can auto-configure your environment\nthv client setup\n\n# Run the MKP server (packaged as 'k8s' in ToolHive)\n# Mount your kubeconfig so the server can access your Kubernetes cluster\nthv run --volume $HOME/.kube:/home/nonroot/.kube:ro k8s\n\n# List running servers\nthv list\n\n# Get detailed information about the server\nthv registry info k8s\n```\n\nThis will mount your Kubernetes credentials and make the server available to\nyour MCP-compatible clients.\n\n### Advanced Usage with Custom Configuration\n\nFor advanced users who need custom configuration, you can also run MKP using the\ncontainer image directly:\n\n```bash\n# Run the MKP server using the published container image\nthv run --name mkp --transport sse --target-port 8080 --volume $HOME/.kube:/home/nonroot/.kube:ro ghcr.io/stackloklabs/mkp/server:latest\n```\n\nThis command:\n\n- Names the server instance \"mkp\"\n- Uses the SSE transport protocol\n- Mounts your local kubeconfig into the container (read-only)\n- Uses the latest published MKP image from GitHub Container Registry\n\nTo use a specific version instead of the latest:\n\n```bash\nthv run --name mkp --transport sse --target-port 8080 --volume $HOME/.kube:/home/nonroot/.kube:ro ghcr.io/stackloklabs/mkp/server:v0.0.1\n```\n\n### Managing the MKP Server\n\nTo verify that the MKP server is running:\n\n```bash\nthv list\n```\n\nThis will show all running MCP servers managed by ToolHive, including the MKP\nserver.\n\nTo stop the MKP server:\n\n```bash\n# For packaged version\nthv stop k8s\n\n# For custom named version\nthv stop mkp\n```\n\nTo remove the server instance completely:\n\n```bash\n# For packaged version\nthv rm k8s\n\n# For custom named version\nthv rm mkp\n```\n\n## Contributing\n\nWe welcome contributions to this MCP server! If you'd like to contribute, please\nreview the [CONTRIBUTING guide](./CONTRIBUTING.md) for details on how to get\nstarted.\n\nIf you run into a bug or have a feature request, please\n[open an issue](https://github.com/StacklokLabs/mkp/issues) in the repository or\njoin us in the `#mcp-servers` channel on our\n[community Discord server](https://discord.gg/stacklok).\n\n## License\n\nThis project is licensed under the Apache v2 License - see the LICENSE file for\ndetails.\n",
  "category": "AI Tools",
  "quality_score": 67,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {
        "mkp": {
          "command": "task",
          "args": [
            "run"
          ],
          "env": {}
        },
        "mkp-with-kubeconfig": {
          "command": "task",
          "args": [
            "run-with-kubeconfig"
          ],
          "env": {
            "KUBECONFIG": "/path/to/kubeconfig"
          }
        },
        "mkp-with-port": {
          "command": "task",
          "args": [
            "run"
          ],
          "env": {
            "MCP_PORT": "9091"
          }
        }
      }
    },
    "oauth": {
      "provider": "google",
      "required": true
    }
  },
  "github_info": {
    "owner": "StacklokLabs",
    "repo": "mkp",
    "url": "https://github.com/StacklokLabs/mkp",
    "name": "mkp",
    "path": null,
    "stars": 43,
    "contributors": 9,
    "issues": 0,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "8ff9533e8717e9d28bfaacc423a809698bfe6cd7"
  },
  "programming_language": "Go",
  "framework": null,
  "last_scraped_at": "2025-08-04T09:32:58.155Z",
  "evaluation_model": "gemini-2.5-pro",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": true,
    "implementing_stdio": false,
    "implementing_streamable_http": true,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "mark3labs/mcp-go",
      "importance": 10
    },
    {
      "name": "k8s.io/client-go",
      "importance": 9
    },
    {
      "name": "k8s.io/api",
      "importance": 8
    },
    {
      "name": "k8s.io/apimachinery",
      "importance": 8
    }
  ],
  "raw_dependencies": "=== go.mod ===\nmodule github.com/StacklokLabs/mkp\n\ngo 1.24.2\n\nrequire (\n\tgithub.com/mark3labs/mcp-go v0.36.0\n\tgithub.com/stretchr/testify v1.10.0\n\tk8s.io/api v0.33.3\n\tk8s.io/apimachinery v0.33.3\n\tk8s.io/client-go v0.33.3\n)\n\nrequire (\n\tgithub.com/bahlo/generic-list-go v0.2.0 // indirect\n\tgithub.com/buger/jsonparser v1.1.1 // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/emicklei/go-restful/v3 v3.11.0 // indirect\n\tgithub.com/fxamacker/cbor/v2 v2.7.0 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-openapi/jsonpointer v0.21.0 // indirect\n\tgithub.com/go-openapi/jsonreference v0.20.2 // indirect\n\tgithub.com/go-openapi/swag v0.23.0 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/google/gnostic-models v0.6.9 // indirect\n\tgithub.com/google/go-cmp v0.7.0 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/gorilla/websocket v1.5.4-0.20250319132907-e064f32e3674 // indirect\n\tgithub.com/invopop/jsonschema v0.13.0 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/moby/spdystream v0.5.0 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/spf13/cast v1.7.1 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/stretchr/objx v0.5.2 // indirect\n\tgithub.com/wk8/go-ordered-map/v2 v2.1.8 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgithub.com/yosida95/uritemplate/v3 v3.0.2 // indirect\n\tgolang.org/x/net v0.38.0 // indirect\n\tgolang.org/x/oauth2 v0.27.0 // indirect\n\tgolang.org/x/sys v0.31.0 // indirect\n\tgolang.org/x/term v0.30.0 // indirect\n\tgolang.org/x/text v0.23.0 // indirect\n\tgolang.org/x/time v0.9.0 // indirect\n\tgoogle.golang.org/protobuf v1.36.5 // indirect\n\tgopkg.in/evanphx/json-patch.v4 v4.12.0 // indirect\n\tgopkg.in/inf.v0 v0.9.1 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\tk8s.io/klog/v2 v2.130.1 // indirect\n\tk8s.io/kube-openapi v0.0.0-20250318190949-c8a335a9a2ff // indirect\n\tk8s.io/utils v0.0.0-20241104100929-3ea5e8cea738 // indirect\n\tsigs.k8s.io/json v0.0.0-20241010143419-9aa6b5e7a4b3 // indirect\n\tsigs.k8s.io/randfill v1.0.0 // indirect\n\tsigs.k8s.io/structured-merge-diff/v4 v4.6.0 // indirect\n\tsigs.k8s.io/yaml v1.4.0 // indirect\n)\n"
}