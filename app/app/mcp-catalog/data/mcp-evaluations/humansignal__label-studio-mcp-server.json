{
  "name": "humansignal__label-studio-mcp-server",
  "display_name": "label-studio-mcp-server",
  "description": "MCP server from HumanSignal/label-studio-mcp-server",
  "author": {
    "name": "HumanSignal"
  },
  "server": {
    "command": "uvx",
    "args": ["--from", "git+https://github.com/HumanSignal/label-studio-mcp-server", "mcp-label-studio"],
    "env": {
      "LABEL_STUDIO_API_KEY": "${user_config.label_studio_api_key}",
      "LABEL_STUDIO_URL": "${user_config.label_studio_url}"
    },
    "type": "local"
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "label_studio_api_key": {
      "type": "string",
      "title": "Label Studio API Key",
      "description": "Your API key for authentication with Label Studio.",
      "sensitive": true,
      "required": true
    },
    "label_studio_url": {
      "type": "string",
      "title": "Label Studio URL",
      "description": "The URL of your running Label Studio instance (e.g., http://localhost:8080).",
      "default": "http://localhost:8080",
      "required": true
    }
  },
  "readme": "# Label Studio MCP Server\n\n## Overview\n\nThis project provides a Model Context Protocol (MCP) server that allows interaction with a [Label Studio](https://labelstud.io/) instance using the `label-studio-sdk`. It enables programmatic management of labeling projects, tasks, and predictions via natural language or structured calls from MCP clients. Using this MCP Server, you can make requests like: \n\n* \"Create a project in label studio with this data ...\" \n* \"How many tasks are labeled in my RAG review project?\" \n* \"Add predictions for my tasks.\" \n* \"Update my labeling template to include a comment box.\" \n\n<img src=\"./static/example.png\" alt=\"Example usage of Label Studio MCP Server\" width=\"600\">\n\n## Features\n\n*   **Project Management**: Create, update, list, and view details/configurations of Label Studio projects.\n*   **Task Management**: Import tasks from files, list tasks within projects, and retrieve task data/annotations.\n*   **Prediction Integration**: Add model predictions to specific tasks.\n*   **SDK Integration**: Leverages the official `label-studio-sdk` for communication.\n\n## Prerequisites\n\n1.  **Running Label Studio Instance:** You need a running instance of Label Studio accessible from where this MCP server will run.\n2.  **API Key:** Obtain an API key from your user account settings in Label Studio.\n\n## Configuration\n\nThe MCP server requires [the URL and API key for your Label Studio instance](https://labelstud.io/guide/access_tokens). If launching the server via an MCP client configuration file, you can specify the environment variables directly within the server definition. This is often preferred for client-managed servers.\n\nAdd the following JSON entry to your `claude_desktop_config.json` file or Cursor MCP settings:\n\n```json\n{\n    \"mcpServers\": {\n        \"label-studio\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"--from\",\n                \"git+https://github.com/HumanSignal/label-studio-mcp-server\",\n                \"mcp-label-studio\"\n            ],\n            \"env\": {\n                \"LABEL_STUDIO_API_KEY\": \"your_actual_api_key_here\", // <-- Your API key\n                \"LABEL_STUDIO_URL\": \"http://localhost:8080\"\n            }\n        }\n    }\n}\n```\n<!-- \n## Installation\nFollow these instructions to install the server. \n```bash\ngit clone https://github.com/HumanSignal/label-studio-mcp-server.git \ncd label-studio-mcp-server\n\n# Install dependencies using uv\nuv venv\nsource .venv/bin/activate \nuv sync\n```\n\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"label-studio\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/your/label-studio-mcp-server\", // <-- Update this path\n                \"run\",\n                \"label-studio-mcp.py\"\n            ],\n            \"env\": {\n                \"LABEL_STUDIO_API_KEY\": \"your_actual_api_key_here\", // <-- Your API key\n                \"LABEL_STUDIO_URL\": \"http://localhost:8080\"\n            }\n        }\n      }\n    }\n    ```\n    When configured this way, the `env` block injects the variables into the server process environment, and the script's `os.getenv()` calls will pick them up. -->\n\n## Tools\n\nThe MCP server exposes the following tools:\n\n### Project Management\n\n*   **`get_label_studio_projects_tool()`**: Lists available projects (ID, title, task count).\n*   **`get_label_studio_project_details_tool(project_id: int)`**: Retrieves detailed information for a specific project.\n*   **`get_label_studio_project_config_tool(project_id: int)`**: Fetches the XML labeling configuration for a project.\n*   **`create_label_studio_project_tool(title: str, label_config: str, ...)`**: Creates a new project with a title, XML config, and optional settings. Returns project details including a URL.\n*   **`update_label_studio_project_config_tool(project_id: int, new_label_config: str)`**: Updates the XML labeling configuration for an existing project.\n\n### Task Management\n\n*   **`list_label_studio_project_tasks_tool(project_id: int)`**: Lists task IDs within a project (up to 100).\n*   **`get_label_studio_task_data_tool(project_id: int, task_id: int)`**: Retrieves the data payload for a specific task.\n*   **`get_label_studio_task_annotations_tool(project_id: int, task_id: int)`**: Fetches existing annotations for a specific task.\n*   **`import_label_studio_project_tasks_tool(project_id: int, tasks_file_path: str)`**: Imports tasks from a JSON file (containing a list of task objects) into a project. Returns import summary and project URL.\n\n### Predictions\n\n*   **`create_label_studio_prediction_tool(task_id: int, result: List[Dict[str, Any]], ...)`**: Creates a prediction for a specific task. Requires the prediction result as a list of dictionaries matching the Label Studio format. Optional `model_version` and `score`.\n\n## Example Use Case\n\n1.  Create a new project using `create_label_studio_project_tool`.\n2.  Prepare a JSON file (`tasks.json`) with task data.\n3.  Import tasks using `import_label_studio_project_tasks_tool`, providing the project ID from step 1 and the path to `tasks.json`.\n4.  List task IDs using `list_label_studio_project_tasks_tool`.\n5.  Get data for a specific task using `get_label_studio_task_data_tool`.\n6.  Generate a prediction result structure (list of dicts).\n7.  Add the prediction using `create_label_studio_prediction_tool`.\n\n\n\n## Contact\n\nFor questions or support, reach out via [GitHub Issues](https://github.com/HumanSignal/label-studio-mcp-server/issues).\n",
  "category": "AI Tools",
  "quality_score": 45,
  "archestra_config": {
    "client_config_permutations": {
      "mcp-label-studio": {
        "command": "uvx",
        "args": ["--from", "git+https://github.com/HumanSignal/label-studio-mcp-server", "mcp-label-studio"],
        "env": {
          "LABEL_STUDIO_API_KEY": "your_actual_api_key_here",
          "LABEL_STUDIO_URL": "http://localhost:8080"
        }
      },
      "label-studio-mcp": {
        "command": "uv",
        "args": ["--directory", "/path/to/your/label-studio-mcp-server", "run", "label-studio-mcp.py"],
        "env": {
          "LABEL_STUDIO_API_KEY": "your_actual_api_key_here",
          "LABEL_STUDIO_URL": "http://localhost:8080"
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": false
  },
  "github_info": {
    "owner": "HumanSignal",
    "repo": "label-studio-mcp-server",
    "url": "https://github.com/HumanSignal/label-studio-mcp-server",
    "name": "humansignal__label-studio-mcp-server",
    "path": null,
    "stars": 16,
    "contributors": 4,
    "issues": 0,
    "releases": false,
    "ci_cd": true,
    "latest_commit_hash": "9505071cbe28bf3f4af47ad1ea55e2929ace59fc"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:05.065Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "httpx",
      "importance": 7
    },
    {
      "name": "label-studio-sdk",
      "importance": 9
    },
    {
      "name": "markdownify",
      "importance": 4
    },
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "protego",
      "importance": 5
    },
    {
      "name": "readabilipy",
      "importance": 6
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"label-studio-mcp\"\nversion = \"0.1.0\"\ndescription = \"A Model Context Protocol (MCP) server for Label Studio\"\nauthors = [\n    { name = \"HumanSignal\", email = \"support@humansignal.com\" },\n]\nreadme = \"README.md\"\nlicense = \"Apache-2.0\"\nclassifiers = [\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python :: 3\"\n]\nrequires-python = \">=3.10\"\ndependencies = [\n    \"httpx>=0.28.1\",\n    \"label-studio-sdk>=1.0.11\",\n    \"markdownify>=1.1.0\",\n    \"mcp[cli]>=1.6.0\",\n    \"protego>=0.4.0\",\n    \"readabilipy>=0.3.0\",\n]\n\n[project.scripts]\nmcp-label-studio = \"label_studio_mcp.main:main\"\n\n[project.urls]\nHome = \"https://github.com/HumanSignal/label-studio-mcp-server\"\n\n[tool.setuptools]\npackages = [\"label_studio_mcp\"]"
}
