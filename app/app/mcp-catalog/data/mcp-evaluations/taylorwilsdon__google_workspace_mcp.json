{
  "dxt_version": "0.1.0",
  "name": "taylorwilsdon__google_workspace_mcp",
  "display_name": "google_workspace_mcp",
  "version": "1.0.0",
  "description": "Control Gmail, Google Calendar, Docs, Sheets, Slides, Chat, Forms, Tasks, Search & Drive with AI - Comprehensive Google Workspace / G Suite MCP Server",
  "author": {
    "name": "taylorwilsdon"
  },
  "server": {
    "type": "python",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "unknown",
      "args": [],
      "env": {}
    }
  },
  "server_overridden": {
    "type": "python",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "uvx",
      "args": ["workspace-mcp"],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "<div align=\"center\">\n\n# Google Workspace MCP Server <img src=\"https://github.com/user-attachments/assets/b89524e4-6e6e-49e6-ba77-00d6df0c6e5c\" width=\"80\" align=\"right\" />\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python 3.10+](https://img.shields.io/badge/Python-3.10%2B-blue.svg)](https://www.python.org/downloads/)\n[![PyPI](https://img.shields.io/pypi/v/workspace-mcp.svg)](https://pypi.org/project/workspace-mcp/)\n[![PyPI Downloads](https://static.pepy.tech/badge/workspace-mcp/month)](https://pepy.tech/projects/workspace-mcp)\n[![Website](https://img.shields.io/badge/Website-workspacemcp.com-green.svg)](https://workspacemcp.com)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/eebbc4a6-0f8c-41b2-ace8-038e5516dba0)\n\n**This is the single most feature-complete Google Workspace MCP server** now with 1-click Claude installation\n\n*Full natural language control over Google Calendar, Drive, Gmail, Docs, Sheets, Slides, Forms, Tasks, and Chat through all MCP clients, AI assistants and developer tools.*\n\n###### Support for all free Google accounts (Gmail, Docs, Drive etc) & Google Workspace plans (Starter, Standard, Plus, Enterprise, Non Profit etc) with their expanded app options like Chat & Spaces.\n\n</div>\n\n<div align=\"center\">\n<a href=\"https://glama.ai/mcp/servers/@taylorwilsdon/google_workspace_mcp\">\n  <img width=\"195\" src=\"https://glama.ai/mcp/servers/@taylorwilsdon/google_workspace_mcp/badge\" alt=\"Google Workspace Server MCP server\" align=\"center\"/>\n</a>\n<a href=\"https://www.pulsemcp.com/servers/taylorwilsdon-google-workspace\">\n<img width=\"456\" src=\"https://github.com/user-attachments/assets/0794ef1a-dc1c-447d-9661-9c704d7acc9d\" align=\"center\"/>\n</a>\n</div>\n\n---\n\n\n**See it in action:**\n<div align=\"center\">\n  <video width=\"832\" src=\"https://github.com/user-attachments/assets/a342ebb4-1319-4060-a974-39d202329710\"></video>\n</div>\n\n---\n\n### A quick plug for AI-Enhanced Docs\n<details>\n<summary>But why?</summary>\n\n**This README was written with AI assistance, and here's why that matters**\n>\n> As a solo dev building open source tools that many never see outside use, comprehensive documentation often wouldn't happen without AI help. Using agentic dev tools like **Roo** & **Claude Code** that understand the entire codebase, AI doesn't just regurgitate generic content - it extracts real implementation details and creates accurate, specific documentation.\n>\n> In this case, Sonnet 4 took a pass & a human (me) verified them 7/10/25.\n</details>\n\n## Overview\n\nA production-ready MCP server that integrates all major Google Workspace services with AI assistants. Built with FastMCP for optimal performance, featuring advanced authentication handling, service caching, and streamlined development patterns.\n\n## Features\n\n- **🔐 Advanced OAuth 2.0**: Secure authentication with automatic token refresh, transport-aware callback handling, session management, and centralized scope management\n- **📅 Google Calendar**: Full calendar management with event CRUD operations\n- **📁 Google Drive**: File operations with native Microsoft Office format support (.docx, .xlsx)\n- **📧 Gmail**: Complete email management with search, send, and draft capabilities\n- **📄 Google Docs**: Document operations including content extraction, creation, and comment management\n- **📊 Google Sheets**: Comprehensive spreadsheet management with flexible cell operations and comment management\n- **🖼️ Google Slides**: Presentation management with slide creation, updates, content manipulation, and comment management\n- **📝 Google Forms**: Form creation, retrieval, publish settings, and response management\n- **✓ Google Tasks**: Complete task and task list management with hierarchy, due dates, and status tracking\n- **💬 Google Chat**: Space management and messaging capabilities\n- **🔍 Google Custom Search**: Programmable Search Engine (PSE) integration for custom web searches\n- **🔄 All Transports**: Stdio, Streamable HTTP & SSE, OpenAPI compatibility via `mcpo`\n- **⚡ High Performance**: Service caching, thread-safe sessions, FastMCP integration\n- **🧩 Developer Friendly**: Minimal boilerplate, automatic service injection, centralized configuration\n\n---\n\n## 🚀 Quick Start\n\n### 1. One-Click Claude Desktop Install (Recommended)\n\n1. **Download:** Grab the latest `google_workspace_mcp.dxt` from the “Releases” page\n2. **Install:** Double-click the file – Claude Desktop opens and prompts you to **Install**\n3. **Configure:** In Claude Desktop → **Settings → Extensions → Google Workspace MCP**, paste your Google OAuth credentials\n4. **Use it:** Start a new Claude chat and call any Google Workspace tool\n\n>\n**Why DXT?**\n> Desktop Extensions (`.dxt`) bundle the server, dependencies, and manifest so users go from download → working MCP in **one click** – no terminal, no JSON editing, no version conflicts.\n\n#### Required Configuration\n<details>\n<summary>Environment - you will configure these in Claude itself, see screenshot:</summary>\n\n| Variable | Purpose |\n|----------|---------|\n| `GOOGLE_OAUTH_CLIENT_ID` | OAuth client ID from Google Cloud |\n| `GOOGLE_OAUTH_CLIENT_SECRET` | OAuth client secret |\n| `USER_GOOGLE_EMAIL` *(optional)* | Default email for single-user auth |\n| `GOOGLE_PSE_API_KEY` *(optional)* | API key for Google Custom Search - see [Custom Search Setup](#google-custom-search-setup) |\n| `GOOGLE_PSE_ENGINE_ID` *(optional)* | Programmable Search Engine ID for Custom Search |\n| `OAUTHLIB_INSECURE_TRANSPORT=1` | Development only (allows `http://` redirect) |\n\nClaude Desktop stores these securely in the OS keychain; set them once in the extension pane.\n</details>\n\n<div align=\"center\">\n  <video width=\"832\" src=\"https://github.com/user-attachments/assets/83cca4b3-5e94-448b-acb3-6e3a27341d3a\"></video>\n</div>\n---\n\n### Prerequisites\n\n- **Python 3.10+**\n- **[uvx](https://github.com/astral-sh/uv)** (for instant installation) or [uv](https://github.com/astral-sh/uv) (for development)\n- **Google Cloud Project** with OAuth 2.0 credentials\n\n### Configuration\n\n1. **Google Cloud Setup**:\n   - Create OAuth 2.0 credentials (web application) in [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project (or use an existing one) for your MCP server.\n   - Navigate to APIs & Services → Credentials.\n   - Click Create Credentials → OAuth Client ID.\n   - Choose Web Application as the application type.\n   - Add redirect URI: `http://localhost:8000/oauth2callback`\n\n   - **Enable APIs**:\n   - In the Google Cloud Console, go to APIs & Services → Library.\n   - Search for & enable Calendar, Drive, Gmail, Docs, Sheets, Slides, Forms, Tasks, Chat\n   - Expand the section below marked \"API Enablement Links\" for direct links to each!\n<details>\n  <summary>API Enablement Links</summary>\n  You can enable each one by clicking the links below (make sure you're logged into the Google Cloud Console and have the correct project selected):\n\n* [Enable Google Calendar API](https://console.cloud.google.com/flows/enableapi?apiid=calendar-json.googleapis.com)\n* [Enable Google Drive API](https://console.cloud.google.com/flows/enableapi?apiid=drive.googleapis.com)\n* [Enable Gmail API](https://console.cloud.google.com/flows/enableapi?apiid=gmail.googleapis.com)\n* [Enable Google Docs API](https://console.cloud.google.com/flows/enableapi?apiid=docs.googleapis.com)\n* [Enable Google Sheets API](https://console.cloud.google.com/flows/enableapi?apiid=sheets.googleapis.com)\n* [Enable Google Slides API](https://console.cloud.google.com/flows/enableapi?apiid=slides.googleapis.com)\n* [Enable Google Forms API](https://console.cloud.google.com/flows/enableapi?apiid=forms.googleapis.com)\n* [Enable Google Tasks API](https://console.cloud.google.com/flows/enableapi?apiid=tasks.googleapis.com)\n* [Enable Google Chat API](https://console.cloud.google.com/flows/enableapi?apiid=chat.googleapis.com)\n* [Enable Google Custom Search API](https://console.cloud.google.com/flows/enableapi?apiid=customsearch.googleapis.com)\n\n</details>\n\n1.1. **Credentials**:\n   - Configure credentials using one of these methods:\n\n     **Option A: Environment Variables (Recommended for Production)**\n     ```bash\n     export GOOGLE_OAUTH_CLIENT_ID=\"your-client-id.apps.googleusercontent.com\"\n     export GOOGLE_OAUTH_CLIENT_SECRET=\"your-client-secret\"\n     export GOOGLE_OAUTH_REDIRECT_URI=\"http://localhost:8000/oauth2callback\"  # Optional\n     ```\n\n     **Option B: File-based (Traditional)**\n     - Download credentials as `client_secret.json` in project root\n     - To use a different location, set `GOOGLE_CLIENT_SECRET_PATH` (or legacy `GOOGLE_CLIENT_SECRETS`) environment variable with the file path\n\n   **Credential Loading Priority**:\n   1. Environment variables (`GOOGLE_OAUTH_CLIENT_ID`, `GOOGLE_OAUTH_CLIENT_SECRET`)\n   2. File specified by `GOOGLE_CLIENT_SECRET_PATH` or `GOOGLE_CLIENT_SECRETS` environment variable\n   3. Default file (`client_secret.json` in project root)\n\n   **Why Environment Variables?**\n   - ✅ Containerized deployments (Docker, Kubernetes)\n   - ✅ Cloud platforms (Heroku, Railway, etc.)\n   - ✅ CI/CD pipelines\n   - ✅ No secrets in version control\n   - ✅ Easy credential rotation\n\n2. **Environment**:\n   ```bash\n   export OAUTHLIB_INSECURE_TRANSPORT=1  # Development only\n   export USER_GOOGLE_EMAIL=your.email@gmail.com  # Optional: Default email for auth - use this for single user setups and you won't need to set your email in system prompt for magic auth\n   export GOOGLE_PSE_API_KEY=your-custom-search-api-key  # Optional: Only needed for Google Custom Search tools\n   export GOOGLE_PSE_ENGINE_ID=your-search-engine-id  # Optional: Only needed for Google Custom Search tools\n   ```\n\n3. **Server Configuration**:\n   The server's base URL and port can be customized using environment variables:\n   - `WORKSPACE_MCP_BASE_URI`: Sets the base URI for the server (default: http://localhost). This affects the `server_url` used to construct the default `OAUTH_REDIRECT_URI` if `GOOGLE_OAUTH_REDIRECT_URI` is not set.\n   - `WORKSPACE_MCP_PORT`: Sets the port the server listens on (default: 8000). This affects the server_url, port, and OAUTH_REDIRECT_URI.\n   - `USER_GOOGLE_EMAIL`: Optional default email for authentication flows. If set, the LLM won't need to specify your email when calling `start_google_auth`.\n   - `GOOGLE_OAUTH_REDIRECT_URI`: Sets an override for OAuth redirect specifically, must include a full address (i.e. include port if necessary). Use this if you want to run your OAuth redirect separately from the MCP. This is not recommended outside of very specific cases\n\n### Google Custom Search Setup\n\nTo use the Google Custom Search tools, you need to:\n\n1. **Create a Programmable Search Engine**:\n   - Go to [Programmable Search Engine Control Panel](https://programmablesearchengine.google.com/controlpanel/create)\n   - Configure sites to search (or search the entire web)\n   - Note your Search Engine ID (cx parameter)\n\n2. **Get an API Key**:\n   - Visit [Google Developers Console](https://developers.google.com/custom-search/v1/overview)\n   - Create or select a project\n   - Enable the Custom Search API\n   - Create credentials (API Key)\n   - Set the `GOOGLE_PSE_API_KEY` environment variable with your API key\n\n3. **Configure Environment Variables**:\n   - Set `GOOGLE_PSE_API_KEY` to your Custom Search API key\n   - Set `GOOGLE_PSE_ENGINE_ID` to your Search Engine ID (the cx parameter from step 1)\n\nFor detailed setup instructions, see the [Custom Search JSON API documentation](https://developers.google.com/custom-search/v1/overview).\n\n### Start the Server\n\n```bash\n# Default (stdio mode for MCP clients)\nuv run main.py\n\n# HTTP mode (for web interfaces and debugging)\nuv run main.py --transport streamable-http\n\n# Single-user mode (simplified authentication)\nuv run main.py --single-user\n\n# Selective tool registration (only register specific tools)\nuv run main.py --tools gmail drive calendar tasks\nuv run main.py --tools sheets docs\nuv run main.py --single-user --tools gmail  # Can combine with other flags\n\n# Docker\ndocker build -t workspace-mcp .\ndocker run -p 8000:8000 -v $(pwd):/app workspace-mcp --transport streamable-http\n```\n\n**Available Tools for `--tools` flag**: `gmail`, `drive`, `calendar`, `docs`, `sheets`, `forms`, `tasks`, `chat`, `search`\n\n### Connect to Claude Desktop\n\nThe server supports two transport modes:\n\n#### Stdio Mode (Default - Recommended for Claude Desktop)\n\n**Guided Setup (Recommended if not using DXT)**\n\n```bash\npython install_claude.py\n```\n\nThis script automatically:\n- Prompts you for your Google OAuth credentials (Client ID and Secret)\n- Creates the Claude Desktop config file in the correct location\n- Sets up all necessary environment variables\n- No manual file editing required!\n\nAfter running the script, just restart Claude Desktop and you're ready to go.\n\n**Manual Claude Configuration (Alternative)**\n1. Open Claude Desktop Settings → Developer → Edit Config\n   1. **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   2. **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n2. Add the server configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"google_workspace\": {\n         \"command\": \"uvx\",\n         \"args\": [\"workspace-mcp\"],\n         \"env\": {\n           \"GOOGLE_OAUTH_CLIENT_ID\": \"your-client-id.apps.googleusercontent.com\",\n           \"GOOGLE_OAUTH_CLIENT_SECRET\": \"your-client-secret\",\n           \"OAUTHLIB_INSECURE_TRANSPORT\": \"1\"\n         }\n       }\n     }\n   }\n   ```\n\n### 2. Advanced / Cross-Platform Installation\n\nIf you’re developing, deploying to servers, or using another MCP-capable client, keep reading.\n\n#### Instant CLI (uvx)\n\n```bash\n# Requires Python 3.10+ and uvx\nexport GOOGLE_OAUTH_CLIENT_ID=\"xxx\"\nexport GOOGLE_OAUTH_CLIENT_SECRET=\"yyy\"\nuvx workspace-mcp --tools gmail drive calendar\n```\n\n> Run instantly without manual installation - you must configure OAuth credentials when using uvx. You can use either environment variables (recommended for production) or set the `GOOGLE_CLIENT_SECRET_PATH` (or legacy `GOOGLE_CLIENT_SECRETS`) environment variable to point to your `client_secret.json` file.\n\n```bash\n# Set OAuth credentials via environment variables (recommended)\nexport GOOGLE_OAUTH_CLIENT_ID=\"your-client-id.apps.googleusercontent.com\"\nexport GOOGLE_OAUTH_CLIENT_SECRET=\"your-client-secret\"\n\n# Start the server with all Google Workspace tools\nuvx workspace-mcp\n\n# Start with specific tools only\nuvx workspace-mcp --tools gmail drive calendar tasks\n\n# Start in HTTP mode for debugging\nuvx workspace-mcp --transport streamable-http\n```\n\n*Requires Python 3.10+ and [uvx](https://github.com/astral-sh/uv). The package is available on [PyPI](https://pypi.org/project/workspace-mcp).*\n\n### Development Installation\n\nFor development or customization:\n\n```bash\ngit clone https://github.com/taylorwilsdon/google_workspace_mcp.git\ncd google_workspace_mcp\nuv run main.py\n```\n\n**Development Installation (For Contributors)**:\n```json\n{\n  \"mcpServers\": {\n    \"google_workspace\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/path/to/repo/google_workspace_mcp\",\n        \"main.py\"\n      ],\n      \"env\": {\n        \"GOOGLE_OAUTH_CLIENT_ID\": \"your-client-id.apps.googleusercontent.com\",\n        \"GOOGLE_OAUTH_CLIENT_SECRET\": \"your-client-secret\",\n        \"OAUTHLIB_INSECURE_TRANSPORT\": \"1\"\n      }\n    }\n  }\n}\n```\n\n#### HTTP Mode (For debugging or web interfaces)\nIf you need to use HTTP mode with Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"google_workspace\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-remote\", \"http://localhost:8000/mcp\"]\n    }\n  }\n}\n```\n\n*Note: Make sure to start the server with `--transport streamable-http` when using HTTP mode.*\n\n### First-Time Authentication\n\nThe server features **transport-aware OAuth callback handling**:\n\n- **Stdio Mode**: Automatically starts a minimal HTTP server on port 8000 for OAuth callbacks\n- **HTTP Mode**: Uses the existing FastAPI server for OAuth callbacks\n- **Same OAuth Flow**: Both modes use `http://localhost:8000/oauth2callback` for consistency\n\nWhen calling a tool:\n1. Server returns authorization URL\n2. Open URL in browser and authorize\n3. Server handles OAuth callback automatically (on port 8000 in both modes)\n4. Retry the original request\n\n---\n\n## 🧰 Available Tools\n\n> **Note**: All tools support automatic authentication via `@require_google_service()` decorators with 30-minute service caching.\n\n### 📅 Google Calendar ([`calendar_tools.py`](gcalendar/calendar_tools.py))\n\n| Tool | Description |\n|------|-------------|\n| `list_calendars` | List accessible calendars |\n| `get_events` | Retrieve events with time range filtering |\n| `get_event` | Fetch detailed information of a single event by ID |\n| `create_event` | Create events (all-day or timed) with optional Drive file attachments |\n| `modify_event` | Update existing events |\n| `delete_event` | Remove events |\n\n### 📁 Google Drive ([`drive_tools.py`](gdrive/drive_tools.py))\n\n| Tool | Description |\n|------|-------------|\n| `search_drive_files` | Search files with query syntax |\n| `get_drive_file_content` | Read file content (supports Office formats) |\n| `list_drive_items` | List folder contents |\n| `create_drive_file` | Create new files or fetch content from public URLs |\n\n### 📧 Gmail ([`gmail_tools.py`](gmail/gmail_tools.py))\n\n| Tool | Description |\n|------|-------------|\n| `search_gmail_messages` | Search with Gmail operators |\n| `get_gmail_message_content` | Retrieve message content |\n| `send_gmail_message` | Send emails |\n| `draft_gmail_message` | Create drafts |\n\n### 📝 Google Docs ([`docs_tools.py`](gdocs/docs_tools.py))\n\n| Tool | Description |\n|------|-------------|\n| `search_docs` | Find documents by name |\n| `get_doc_content` | Extract document text |\n| `list_docs_in_folder` | List docs in folder |\n| `create_doc` | Create new documents |\n| `read_doc_comments` | Read all comments and replies |\n| `create_doc_comment` | Create new comments |\n| `reply_to_comment` | Reply to existing comments |\n| `resolve_comment` | Resolve comments |\n\n### 📊 Google Sheets ([`sheets_tools.py`](gsheets/sheets_tools.py))\n\n| Tool | Description |\n|------|-------------|\n| `list_spreadsheets` | List accessible spreadsheets |\n| `get_spreadsheet_info` | Get spreadsheet metadata |\n| `read_sheet_values` | Read cell ranges |\n| `modify_sheet_values` | Write/update/clear cells |\n| `create_spreadsheet` | Create new spreadsheets |\n| `create_sheet` | Add sheets to existing files |\n| `read_sheet_comments` | Read all comments and replies |\n| `create_sheet_comment` | Create new comments |\n| `reply_to_sheet_comment` | Reply to existing comments |\n| `resolve_sheet_comment` | Resolve comments |\n\n### 🖼️ Google Slides ([`slides_tools.py`](gslides/slides_tools.py))\n\n| Tool | Description |\n|------|-------------|\n| `create_presentation` | Create new presentations |\n| `get_presentation` | Retrieve presentation details |\n| `batch_update_presentation` | Apply multiple updates at once |\n| `get_page` | Get specific slide information |\n| `get_page_thumbnail` | Generate slide thumbnails |\n| `read_presentation_comments` | Read all comments and replies |\n| `create_presentation_comment` | Create new comments |\n| `reply_to_presentation_comment` | Reply to existing comments |\n| `resolve_presentation_comment` | Resolve comments |\n\n### 📝 Google Forms ([`forms_tools.py`](gforms/forms_tools.py))\n\n| Tool | Description |\n|------|-------------|\n| `create_form` | Create new forms with title and description |\n| `get_form` | Retrieve form details, questions, and URLs |\n| `set_publish_settings` | Configure form template and authentication settings |\n| `get_form_response` | Get individual form response details |\n| `list_form_responses` | List all responses to a form with pagination |\n\n### ✓ Google Tasks ([`tasks_tools.py`](gtasks/tasks_tools.py))\n\n| Tool | Description |\n|------|-------------|\n| `list_task_lists` | List all task lists with pagination support |\n| `get_task_list` | Retrieve details of a specific task list |\n| `create_task_list` | Create new task lists with custom titles |\n| `update_task_list` | Modify existing task list titles |\n| `delete_task_list` | Remove task lists and all contained tasks |\n| `list_tasks` | List tasks in a specific list with filtering options |\n| `get_task` | Retrieve detailed information about a specific task |\n| `create_task` | Create new tasks with title, notes, due dates, and hierarchy |\n| `update_task` | Modify task properties including title, notes, status, and due dates |\n| `delete_task` | Remove tasks from task lists |\n| `move_task` | Reposition tasks within lists or move between lists |\n| `clear_completed_tasks` | Hide all completed tasks from a list |\n\n### 💬 Google Chat ([`chat_tools.py`](gchat/chat_tools.py))\n\n| Tool | Description |\n|------|-------------|\n| `list_spaces` | List chat spaces/rooms |\n| `get_messages` | Retrieve space messages |\n| `send_message` | Send messages to spaces |\n| `search_messages` | Search across chat history |\n\n### 🔍 Google Custom Search ([`search_tools.py`](gsearch/search_tools.py))\n\n| Tool | Description |\n|------|-------------|\n| `search_custom` | Perform web searches using Programmable Search Engine |\n| `get_search_engine_info` | Retrieve search engine metadata and configuration |\n| `search_custom_siterestrict` | Search within specific sites/domains |\n\n---\n\n## 🛠️ Development\n\n### Project Structure\n\n```\ngoogle_workspace_mcp/\n├── auth/              # Authentication system with decorators\n├── core/              # MCP server and utilities\n├── g{service}/        # Service-specific tools\n├── main.py            # Server entry point\n├── client_secret.json # OAuth credentials (not committed)\n└── pyproject.toml     # Dependencies\n```\n\n### Adding New Tools\n\n```python\nfrom auth.service_decorator import require_google_service\n\n@require_google_service(\"drive\", \"drive_read\")  # Service + scope group\nasync def your_new_tool(service, param1: str, param2: int = 10):\n    \"\"\"Tool description\"\"\"\n    # service is automatically injected and cached\n    result = service.files().list().execute()\n    return result  # Return native Python objects\n```\n\n### Architecture Highlights\n\n- **Service Caching**: 30-minute TTL reduces authentication overhead\n- **Scope Management**: Centralized in `SCOPE_GROUPS` for easy maintenance\n- **Error Handling**: Native exceptions instead of manual error construction\n- **Multi-Service Support**: `@require_multiple_services()` for complex tools\n\n---\n\n## 🔒 Security\n\n- **Credentials**: Never commit `client_secret.json` or `.credentials/` directory\n- **OAuth Callback**: Uses `http://localhost:8000/oauth2callback` for development (requires `OAUTHLIB_INSECURE_TRANSPORT=1`)\n- **Transport-Aware Callbacks**: Stdio mode starts a minimal HTTP server only for OAuth, ensuring callbacks work in all modes\n- **Production**: Use HTTPS for callback URIs and configure accordingly\n- **Network Exposure**: Consider authentication when using `mcpo` over networks\n- **Scope Minimization**: Tools request only necessary permissions\n\n---\n\n## 🌐 Integration with Open WebUI\n\nTo use this server as a tool provider within Open WebUI:\n\n### Instant Start (No Config Needed)\nJust copy and paste the below, set your values and you're off!\n```bash\nGOOGLE_OAUTH_CLIENT_ID=\"your_client_id\" GOOGLE_OAUTH_CLIENT_SECRET=\"your_client_secret\" uvx mcpo --port 8000 --api-key \"top-secret\" -- uvx workspace-mcp\n```\n\nOtherwise:\n\n### 1. Create MCPO Configuration\n\nCreate a file named `config.json` with the following structure to have `mcpo` make the streamable HTTP endpoint available as an OpenAPI spec tool:\n\n```json\n{\n  \"mcpServers\": {\n    \"google_workspace\": {\n      \"type\": \"streamablehttp\",\n      \"url\": \"http://localhost:8000/mcp\"\n    }\n  }\n}\n```\n\n### 2. Start the MCPO Server\n\n```bash\nmcpo --port 8001 --config config.json --api-key \"your-optional-secret-key\"\n```\n\nThis command starts the `mcpo` proxy, serving your active (assuming port 8000) Google Workspace MCP on port 8001.\n\n### 3. Configure Open WebUI\n\n1. Navigate to your Open WebUI settings\n2. Go to **\"Connections\"** → **\"Tools\"**\n3. Click **\"Add Tool\"**\n4. Enter the **Server URL**: `http://localhost:8001/google_workspace` (matching the mcpo base URL and server name from config.json)\n5. If you used an `--api-key` with mcpo, enter it as the **API Key**\n6. Save the configuration\n\nThe Google Workspace tools should now be available when interacting with models in Open WebUI.\n\n---\n\n## 📄 License\n\nMIT License - see `LICENSE` file for details.\n\n---\n\n<div align=\"center\">\n<img width=\"810\" alt=\"Gmail Integration\" src=\"https://github.com/user-attachments/assets/656cea40-1f66-40c1-b94c-5a2c900c969d\" />\n<img width=\"810\" alt=\"Calendar Management\" src=\"https://github.com/user-attachments/assets/d3c2a834-fcca-4dc5-8990-6d6dc1d96048\" />\n<img width=\"842\" alt=\"Batch Emails\" src=\"https://github.com/user-attachments/assets/0876c789-7bcc-4414-a144-6c3f0aaffc06\" />\n</div>\n",
  "category": "Development",
  "quality_score": 67,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {}
    },
    "oauth": {
      "provider": "google",
      "required": true
    }
  },
  "github_info": {
    "owner": "taylorwilsdon",
    "repo": "google_workspace_mcp",
    "url": "https://github.com/taylorwilsdon/google_workspace_mcp",
    "name": "google_workspace_mcp",
    "path": null,
    "stars": 390,
    "contributors": 16,
    "issues": 17,
    "releases": true,
    "ci_cd": false,
    "latest_commit_hash": "6cb5b05da1c5469db3c34ab1bf0b83d4f950d3ba"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-08-03T20:55:51.886Z",
  "evaluation_model": "gemini-2.5-pro",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": true
  },
  "dependencies": [
    {
      "name": "fastapi",
      "importance": 10
    },
    {
      "name": "fastmcp",
      "importance": 10
    },
    {
      "name": "google-api-python-client",
      "importance": 9
    },
    {
      "name": "google-auth-httplib2",
      "importance": 9
    },
    {
      "name": "google-auth-oauthlib",
      "importance": 9
    },
    {
      "name": "httpx",
      "importance": 7
    },
    {
      "name": "pyjwt",
      "importance": 7
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[build-system]\nrequires = [ \"setuptools>=61.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"workspace-mcp\"\nversion = \"1.1.17\"\ndescription = \"Comprehensive, highly performant Google Workspace Streamable HTTP & SSE MCP Server for Calendar, Gmail, Docs, Sheets, Slides & Drive\"\nreadme = \"README.md\"\nkeywords = [ \"mcp\", \"google\", \"workspace\", \"llm\", \"ai\", \"claude\", \"model\", \"context\", \"protocol\", \"server\"]\nrequires-python = \">=3.10\"\ndependencies = [\n \"fastapi>=0.115.12\",\n \"fastmcp>=2.10.6\",\n \"google-api-python-client>=2.168.0\",\n \"google-auth-httplib2>=0.2.0\",\n \"google-auth-oauthlib>=1.2.2\",\n \"httpx>=0.28.1\",\n \"pyjwt>=2.10.1\",\n \"ruff>=0.12.4\",\n \"tomlkit\",\n]\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Environment :: Console\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Natural Language :: English\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n    \"Topic :: Internet :: WWW/HTTP :: HTTP Servers\",\n    \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n    \"Topic :: Communications :: Chat\",\n    \"Topic :: Office/Business\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    \"Typing :: Typed\"\n]\n\n[[project.authors]]\nname = \"Taylor Wilsdon\"\nemail = \"taylor@taylorwilsdon.com\"\n\n[project.license]\ntext = \"MIT\"\n\n[project.urls]\nHomepage = \"https://workspacemcp.com\"\nRepository = \"https://github.com/taylorwilsdon/google_workspace_mcp\"\nDocumentation = \"https://github.com/taylorwilsdon/google_workspace_mcp#readme\"\nIssues = \"https://github.com/taylorwilsdon/google_workspace_mcp/issues\"\nChangelog = \"https://github.com/taylorwilsdon/google_workspace_mcp/releases\"\n\n[project.scripts]\nworkspace-mcp = \"main:main\"\n\n[tool.setuptools]\npackages = [ \"auth\", \"gcalendar\", \"core\", \"gdocs\", \"gdrive\", \"gmail\", \"gchat\", \"gsheets\", \"gforms\", \"gslides\", \"gtasks\", \"gsearch\"]\npy-modules = [ \"main\"]\n"
}
