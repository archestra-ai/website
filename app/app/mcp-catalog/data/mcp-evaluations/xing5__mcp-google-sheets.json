{
  "dxt_version": "0.1.0",
  "name": "xing5__mcp-google-sheets",
  "display_name": "mcp-google-sheets",
  "version": "1.0.0",
  "description": "This MCP server integrates with your Google Drive and Google Sheets, to enable creating and modifying spreadsheets.",
  "author": {
    "name": "xing5"
  },
  "server": {
    "command": "uvx",
    "args": ["mcp-google-sheets@latest"],
    "env": {
      "SERVICE_ACCOUNT_PATH": "${user_config.service_account_path}",
      "DRIVE_FOLDER_ID": "${user_config.drive_folder_id}",
      "CREDENTIALS_CONFIG": "${user_config.credentials_config}"
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "service_account_path": {
      "type": "file",
      "title": "Service Account Key Path",
      "description": "Path to your Google Cloud Service Account JSON key file.",
      "sensitive": true,
      "required": true
    },
    "drive_folder_id": {
      "type": "string",
      "title": "Google Drive Folder ID",
      "description": "The ID of the Google Drive folder where spreadsheets will be created/accessed.",
      "sensitive": false,
      "required": true
    },
    "credentials_config": {
      "type": "string",
      "title": "Credentials Configuration",
      "description": "Direct injection of Google Cloud credentials configuration (e.g., JSON string). This is an alternative to using a service account path.",
      "sensitive": true,
      "required": false
    }
  },
  "readme": "\n<div align=\"center\">\n  <!-- Main Title Link -->\n  <b>mcp-google-sheets</b>\n\n  <!-- Description Paragraph -->\n  <p align=\"center\">\n    <i>Your AI Assistant's Gateway to Google Sheets! </i>üìä\n  </p>\n\n[![PyPI - Version](https://img.shields.io/pypi/v/mcp-google-sheets)](https://pypi.org/project/mcp-google-sheets/)\n[![PyPI Downloads](https://static.pepy.tech/badge/mcp-google-sheets)](https://pepy.tech/projects/mcp-google-sheets)\n![GitHub License](https://img.shields.io/github/license/xing5/mcp-google-sheets)\n![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/xing5/mcp-google-sheets/release.yml)\n</div>\n\n---\n\n## ü§î What is this?\n\n`mcp-google-sheets` is a Python-based MCP server that acts as a bridge between any MCP-compatible client (like Claude Desktop) and the Google Sheets API. It allows you to interact with your Google Spreadsheets using a defined set of tools, enabling powerful automation and data manipulation workflows driven by AI.\n\n\n## üöÄ Quick Start (Using `uvx`)\n\nEssentially the server runs in one line: `uvx mcp-google-sheets@latest`. \n\nThis cmd will automatically download the latest code and run it. **We recommend always using `@latest`** to ensure you have the newest version with the latest features and bug fixes.\n\n1.  **‚òÅÔ∏è Prerequisite: Google Cloud Setup**\n    *   You **must** configure Google Cloud Platform credentials and enable the necessary APIs first. We strongly recommend using a **Service Account**.\n    *   ‚û°Ô∏è Jump to the [**Detailed Google Cloud Platform Setup**](#-google-cloud-platform-setup-detailed) guide below.\n\n2.  **üêç Install `uv`**\n    *   `uvx` is part of `uv`, a fast Python package installer and resolver. Install it if you haven't already:\n        ```bash\n        # macOS / Linux\n        curl -LsSf https://astral.sh/uv/install.sh | sh\n        # Windows\n        powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n        # Or using pip:\n        # pip install uv\n        ```\n        *Follow instructions in the installer output to add `uv` to your PATH if needed.*\n\n3.  **üîë Set Essential Environment Variables (Service Account Recommended)**\n    *   You need to tell the server how to authenticate. Set these variables in your terminal:\n    *   **(Linux/macOS)**\n        ```bash\n        # Replace with YOUR actual path and folder ID from the Google Setup step\n        export SERVICE_ACCOUNT_PATH=\"/path/to/your/service-account-key.json\"\n        export DRIVE_FOLDER_ID=\"YOUR_DRIVE_FOLDER_ID\"\n        ```\n    *   **(Windows CMD)**\n        ```cmd\n        set SERVICE_ACCOUNT_PATH=\"C:\\path\\to\\your\\service-account-key.json\"\n        set DRIVE_FOLDER_ID=\"YOUR_DRIVE_FOLDER_ID\"\n        ```\n    *   **(Windows PowerShell)**\n        ```powershell\n        $env:SERVICE_ACCOUNT_PATH = \"C:\\path\\to\\your\\service-account-key.json\"\n        $env:DRIVE_FOLDER_ID = \"YOUR_DRIVE_FOLDER_ID\"\n        ```\n    *   ‚û°Ô∏è See [**Detailed Authentication & Environment Variables**](#-authentication--environment-variables-detailed) for other options (OAuth, `CREDENTIALS_CONFIG`).\n\n4.  **üèÉ Run the Server!**\n    *   `uvx` will automatically download and run the latest version of `mcp-google-sheets`:\n        ```bash\n        uvx mcp-google-sheets@latest\n        ```\n    *   The server will start and print logs indicating it's ready.\n    *   \n    *   > **üí° Pro Tip:** Always use `@latest` to ensure you get the newest version with bug fixes and features. Without `@latest`, `uvx` may use a cached older version.\n\n5.  **üîå Connect your MCP Client**\n    *   Configure your client (e.g., Claude Desktop) to connect to the running server.\n    *   Depending on the client you use, you might not need step 4 because the client can launch the server for you. But it's a good practice to test run step 4 anyway to make sure things are set up properly.\n    *   ‚û°Ô∏è See [**Usage with Claude Desktop**](#-usage-with-claude-desktop) for examples.\n\nYou're ready! Start issuing commands via your MCP client.\n\n---\n\n## ‚ú® Key Features\n\n*   **Seamless Integration:** Connects directly to Google Drive & Google Sheets APIs.\n*   **Comprehensive Tools:** Offers a wide range of operations (CRUD, listing, batching, sharing, formatting, etc.).\n*   **Flexible Authentication:** Supports **Service Accounts (recommended)**, OAuth 2.0, and direct credential injection via environment variables.\n*   **Easy Deployment:** Run instantly with `uvx` (zero-install feel) or clone for development using `uv`.\n*   **AI-Ready:** Designed for use with MCP-compatible clients, enabling natural language spreadsheet interaction.\n\n---\n\n## üõ†Ô∏è Available Tools & Resources\n\nThis server exposes the following tools for interacting with Google Sheets:\n\n*(Input parameters are typically strings unless otherwise specified)*\n\n*   **`list_spreadsheets`**: Lists spreadsheets in the configured Drive folder (Service Account) or accessible by the user (OAuth).\n    *   _Returns:_ List of objects `[{id: string, title: string}]`\n*   **`create_spreadsheet`**: Creates a new spreadsheet.\n    *   `title` (string): The desired title.\n    *   _Returns:_ Object with spreadsheet info, including `spreadsheetId`.\n*   **`get_sheet_data`**: Reads data from a range in a sheet.\n    *   `spreadsheet_id` (string)\n    *   `sheet` (string): Name of the sheet.\n    *   `range` (optional string): A1 notation (e.g., `'A1:C10'`, `'Sheet1!B2:D'`). If omitted, reads the whole sheet.\n    *   `include_grid_data` (optional boolean, default False): If True, includes cell formatting and other metadata (larger response). If False, returns values only (more efficient).\n    *   _Returns:_ If `include_grid_data=True`, full grid data with metadata. If `False`, a values result object from the Values API.\n*   **`get_sheet_formulas`**: Reads formulas from a range in a sheet.\n    *   `spreadsheet_id` (string)\n    *   `sheet` (string): Name of the sheet.\n    *   `range` (optional string): A1 notation (e.g., `'A1:C10'`, `'Sheet1!B2:D'`). If omitted, reads the whole sheet.\n    *   _Returns:_ 2D array of cell formulas.\n*   **`update_cells`**: Writes data to a specific range. Overwrites existing data.\n    *   `spreadsheet_id` (string)\n    *   `sheet` (string)\n    *   `range` (string): A1 notation.\n    *   `data` (2D array): Values to write.\n    *   _Returns:_ Update result object.\n*   **`batch_update_cells`**: Updates multiple ranges in one API call.\n    *   `spreadsheet_id` (string)\n    *   `sheet` (string)\n    *   `ranges` (object): Dictionary mapping range strings (A1 notation) to 2D arrays of values `{ \"A1:B2\": [[1, 2], [3, 4]], \"D5\": [[\"Hello\"]] }`.\n    *   _Returns:_ Batch update result object.\n*   **`add_rows`**: Appends rows to the end of a sheet (after the last row with data).\n    *   `spreadsheet_id` (string)\n    *   `sheet` (string)\n    *   `data` (2D array): Rows to append.\n    *   _Returns:_ Update result object.\n*   **`list_sheets`**: Lists all sheet names within a spreadsheet.\n    *   `spreadsheet_id` (string)\n    *   _Returns:_ List of sheet name strings `[\"Sheet1\", \"Sheet2\"]`.\n*   **`create_sheet`**: Adds a new sheet (tab) to a spreadsheet.\n    *   `spreadsheet_id` (string)\n    *   `title` (string): Name for the new sheet.\n    *   _Returns:_ New sheet properties object.\n*   **`get_multiple_sheet_data`**: Fetches data from multiple ranges across potentially different spreadsheets in one call.\n    *   `queries` (array of objects): Each object needs `spreadsheet_id`, `sheet`, and `range`. `[{spreadsheet_id: 'abc', sheet: 'Sheet1', range: 'A1:B2'}, ...]`.\n    *   _Returns:_ List of objects, each containing the query params and fetched `data` or an `error`.\n*   **`get_multiple_spreadsheet_summary`**: Gets titles, sheet names, headers, and first few rows for multiple spreadsheets.\n    *   `spreadsheet_ids` (array of strings)\n    *   `rows_to_fetch` (optional integer, default 5): How many rows (including header) to preview.\n    *   _Returns:_ List of summary objects for each spreadsheet.\n*   **`share_spreadsheet`**: Shares a spreadsheet with specified users/emails and roles.\n    *   `spreadsheet_id` (string)\n    *   `recipients` (array of objects): `[{email_address: 'user@example.com', role: 'writer'}, ...]`. Roles: `reader`, `commenter`, `writer`.\n    *   `send_notification` (optional boolean, default True): Send email notifications.\n    *   _Returns:_ Dictionary with `successes` and `failures` lists.\n*   **`add_columns`**: Adds columns to a sheet. *(Verify parameters if implemented)*\n*   **`copy_sheet`**: Duplicates a sheet within a spreadsheet. *(Verify parameters if implemented)*\n*   **`rename_sheet`**: Renames an existing sheet. *(Verify parameters if implemented)*\n\n**MCP Resources:**\n\n*   **`spreadsheet://{spreadsheet_id}/info`**: Get basic metadata about a Google Spreadsheet.\n    *   _Returns:_ JSON string with spreadsheet information.\n\n---\n\n## ‚òÅÔ∏è Google Cloud Platform Setup (Detailed)\n\nThis setup is **required** before running the server.\n\n1.  **Create/Select a GCP Project:** Go to the [Google Cloud Console](https://console.cloud.google.com/).\n2.  **Enable APIs:** Navigate to \"APIs & Services\" -> \"Library\". Search for and enable:\n    *   `Google Sheets API`\n    *   `Google Drive API`\n3.  **Configure Credentials:** You need to choose *one* authentication method below (Service Account is recommended).\n\n---\n\n## üîë Authentication & Environment Variables (Detailed)\n\nThe server needs credentials to access Google APIs. Choose one method:\n\n### Method A: Service Account (Recommended for Servers/Automation) ‚úÖ\n\n*   **Why?** Headless (no browser needed), secure, ideal for server environments. Doesn't expire easily.\n*   **Steps:**\n    1.  **Create Service Account:** In GCP Console -> \"IAM & Admin\" -> \"Service Accounts\".\n        *   Click \"+ CREATE SERVICE ACCOUNT\". Name it (e.g., `mcp-sheets-service`).\n        *   Grant Roles: Add `Editor` role for broad access, or more granular roles (like `roles/drive.file` and specific Sheets roles) for stricter permissions.\n        *   Click \"Done\". Find the account, click Actions (‚ãÆ) -> \"Manage keys\".\n        *   Click \"ADD KEY\" -> \"Create new key\" -> **JSON** -> \"CREATE\".\n        *   **Download and securely store** the JSON key file.\n    2.  **Create & Share Google Drive Folder:**\n        *   In [Google Drive](https://drive.google.com/), create a folder (e.g., \"AI Managed Sheets\").\n        *   Note the **Folder ID** from the URL: `https://drive.google.com/drive/folders/THIS_IS_THE_FOLDER_ID`.\n        *   Right-click the folder -> \"Share\" -> \"Share\".\n        *   Enter the Service Account's email (from the JSON file `client_email`).\n        *   Grant **Editor** access. Uncheck \"Notify people\". Click \"Share\".\n    3.  **Set Environment Variables:**\n        *   `SERVICE_ACCOUNT_PATH`: Full path to the downloaded JSON key file.\n        *   `DRIVE_FOLDER_ID`: The ID of the shared Google Drive folder.\n        *(See [Ultra Quick Start](#-ultra-quick-start-using-uvx) for OS-specific examples)*\n\n### Method B: OAuth 2.0 (Interactive / Personal Use) üßë‚Äçüíª\n\n*   **Why?** For personal use or local development where interactive browser login is okay.\n*   **Steps:**\n    1.  **Configure OAuth Consent Screen:** In GCP Console -> \"APIs & Services\" -> \"OAuth consent screen\". Select \"External\", fill required info, add scopes (`.../auth/spreadsheets`, `.../auth/drive`), add test users if needed.\n    2.  **Create OAuth Client ID:** In GCP Console -> \"APIs & Services\" -> \"Credentials\". \"+ CREATE CREDENTIALS\" -> \"OAuth client ID\" -> Type: **Desktop app**. Name it. \"CREATE\". **Download JSON**.\n    3.  **Set Environment Variables:**\n        *   `CREDENTIALS_PATH`: Path to the downloaded OAuth credentials JSON file (default: `credentials.json`).\n        *   `TOKEN_PATH`: Path to store the user's refresh token after first login (default: `token.json`). Must be writable.\n\n### Method C: Direct Credential Injection (Advanced) üîí\n\n*   **Why?** Useful in environments like Docker, Kubernetes, or CI/CD where managing files is hard, but environment variables are easy/secure. Avoids file system access.\n*   **How?** Instead of providing a *path* to the credentials file, you provide the *content* of the file, encoded in Base64, directly in an environment variable.\n*   **Steps:**\n    1.  **Get your credentials JSON file** (either Service Account key or OAuth Client ID file). Let's call it `your_credentials.json`.\n    2.  **Generate the Base64 string:**\n        *   **(Linux/macOS):** `base64 -w 0 your_credentials.json`\n        *   **(Windows PowerShell):**\n            ```powershell\n            $filePath = \"C:\\path\\to\\your_credentials.json\"; # Use actual path\n            $bytes = [System.IO.File]::ReadAllBytes($filePath);\n            $base64 = [System.Convert]::ToBase64String($bytes);\n            $base64 # Copy this output\n            ```\n        *   **(Caution):** Avoid pasting sensitive credentials into untrusted online encoders.\n    3.  **Set the Environment Variable:**\n        *   `CREDENTIALS_CONFIG`: Set this variable to the **full Base64 string** you just generated.\n            ```bash\n            # Example (Linux/macOS) - Use the actual string generated\n            export CREDENTIALS_CONFIG=\"ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb...\"\n            ```\n\n### Method D: Application Default Credentials (ADC) üåê\n\n*   **Why?** Ideal for Google Cloud environments (GKE, Compute Engine, Cloud Run) and local development with `gcloud auth application-default login`. No explicit credential files needed.\n*   **How?** Uses Google's Application Default Credentials chain to automatically discover credentials from multiple sources.\n*   **ADC Search Order:**\n    1.  `GOOGLE_APPLICATION_CREDENTIALS` environment variable (path to service account key) - **Google's standard variable**\n    2.  `gcloud auth application-default login` credentials (local development)\n    3.  Attached service account from metadata server (GKE, Compute Engine, etc.)\n*   **Setup:**\n    *   **Local Development:** \n        1. Run `gcloud auth application-default login --scopes=https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/spreadsheets,https://www.googleapis.com/auth/drive` once\n        2. Set a quota project: `gcloud auth application-default set-quota-project <project_id>` (replace `<project_id>` with your Google Cloud project ID)\n    *   **Google Cloud:** Attach a service account to your compute resource\n    *   **Environment Variable:** Set `GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json` (Google's standard)\n*   **No additional environment variables needed** - ADC is used automatically as a fallback when other methods fail.\n\n**Note:** `GOOGLE_APPLICATION_CREDENTIALS` is Google's official standard environment variable, while `SERVICE_ACCOUNT_PATH` is specific to this MCP server. If you set `GOOGLE_APPLICATION_CREDENTIALS`, ADC will find it automatically.\n\n### Authentication Priority & Summary\n\nThe server checks for credentials in this order:\n\n1.  `CREDENTIALS_CONFIG` (Base64 content)\n2.  `SERVICE_ACCOUNT_PATH` (Path to Service Account JSON)\n3.  `CREDENTIALS_PATH` (Path to OAuth JSON) - triggers interactive flow if token is missing/expired\n4.  **Application Default Credentials (ADC)** - automatic fallback\n\n**Environment Variable Summary:**\n\n| Variable               | Method(s)                   | Description                                                     | Default          |\n| :--------------------- | :-------------------------- | :-------------------------------------------------------------- | :--------------- |\n| `SERVICE_ACCOUNT_PATH` | Service Account             | Path to the Service Account JSON key file (MCP server specific). | -                |\n| `GOOGLE_APPLICATION_CREDENTIALS` | ADC                   | Path to service account key (Google's standard variable).       | -                |\n| `DRIVE_FOLDER_ID`      | Service Account             | ID of the Google Drive folder shared with the Service Account.  | -                |\n| `CREDENTIALS_PATH`     | OAuth 2.0                   | Path to the OAuth 2.0 Client ID JSON file.                    | `credentials.json` |\n| `TOKEN_PATH`           | OAuth 2.0                   | Path to store the generated OAuth token.                        | `token.json`     |\n| `CREDENTIALS_CONFIG`   | Service Account / OAuth 2.0 | Base64 encoded JSON string of credentials content.              | -                |\n\n---\n\n## ‚öôÔ∏è Running the Server (Detailed)\n\n### Method 1: Using `uvx` (Recommended for Users)\n\nAs shown in the [Ultra Quick Start](#-ultra-quick-start-using-uvx), this is the easiest way. Set environment variables, then run:\n\n```bash\nuvx mcp-google-sheets@latest\n```\n`uvx` handles fetching and running the package temporarily.\n\n### Method 2: For Development (Cloning the Repo)\n\nIf you want to modify the code:\n\n1.  **Clone:** `git clone https://github.com/yourusername/mcp-google-sheets.git && cd mcp-google-sheets` (Use actual URL)\n2.  **Set Environment Variables:** As described above.\n3.  **Run using `uv`:** (Uses the local code)\n    ```bash\n    uv run mcp-google-sheets\n    # Or via the script name if defined in pyproject.toml, e.g.:\n    # uv run start\n    ```\n\n---\n\n## üîå Usage with Claude Desktop\n\nAdd the server config to `claude_desktop_config.json` under `mcpServers`. Choose the block matching your setup:\n\n**‚ö†Ô∏è Important Notes:**\n- **üçé macOS Users:** use the full path: `\"/Users/yourusername/.local/bin/uvx\"` instead of just `\"uvx\"`\n\n<details>\n<summary>üîµ Config: uvx + Service Account (Recommended)</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"google-sheets\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-google-sheets@latest\"],\n      \"env\": {\n        \"SERVICE_ACCOUNT_PATH\": \"/full/path/to/your/service-account-key.json\",\n        \"DRIVE_FOLDER_ID\": \"your_shared_folder_id_here\"\n      }\n    }\n  }\n}\n```\n\n**üçé macOS Note:** If you get a `spawn uvx ENOENT` error, use the full path to `uvx`:\n```json\n{\n  \"mcpServers\": {\n    \"google-sheets\": {\n      \"command\": \"/Users/yourusername/.local/bin/uvx\",\n      \"args\": [\"mcp-google-sheets@latest\"],\n      \"env\": {\n        \"SERVICE_ACCOUNT_PATH\": \"/full/path/to/your/service-account-key.json\",\n        \"DRIVE_FOLDER_ID\": \"your_shared_folder_id_here\"\n      }\n    }\n  }\n}\n```\n*Replace `yourusername` with your actual username.*\n</details>\n\n<details>\n<summary>üîµ Config: uvx + OAuth 2.0</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"google-sheets\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-google-sheets@latest\"],\n      \"env\": {\n        \"CREDENTIALS_PATH\": \"/full/path/to/your/credentials.json\",\n        \"TOKEN_PATH\": \"/full/path/to/your/token.json\"\n      }\n    }\n  }\n}\n```\n*Note: A browser may open for Google login on first use. Ensure TOKEN_PATH is writable.*\n\n**üçé macOS Note:** If you get a `spawn uvx ENOENT` error, replace `\"command\": \"uvx\"` with `\"command\": \"/Users/yourusername/.local/bin/uvx\"` (replace `yourusername` with your actual username).\n</details>\n\n<details>\n<summary>üîµ Config: uvx + CREDENTIALS_CONFIG (Service Account Example)</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"google-sheets\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-google-sheets@latest\"],\n      \"env\": {\n        \"CREDENTIALS_CONFIG\": \"ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAi...\",\n        \"DRIVE_FOLDER_ID\": \"your_shared_folder_id_here\"\n      }\n    }\n  }\n}\n```\n*Note: Paste the full Base64 string for CREDENTIALS_CONFIG. DRIVE_FOLDER_ID is still needed for Service Account folder context.*\n\n**üçé macOS Note:** If you get a `spawn uvx ENOENT` error, replace `\"command\": \"uvx\"` with `\"command\": \"/Users/yourusername/.local/bin/uvx\"` (replace `yourusername` with your actual username).\n</details>\n\n<details>\n<summary>üîµ Config: uvx + Application Default Credentials (ADC)</summary>\n\n**Option 1: With GOOGLE_APPLICATION_CREDENTIALS**\n```json\n{\n  \"mcpServers\": {\n    \"google-sheets\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-google-sheets@latest\"],\n      \"env\": {\n        \"GOOGLE_APPLICATION_CREDENTIALS\": \"/path/to/service-account.json\"\n      }\n    }\n  }\n}\n```\n\n**Option 2: With gcloud auth (no env vars needed)**\n```json\n{\n  \"mcpServers\": {\n    \"google-sheets\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-google-sheets@latest\"],\n      \"env\": {}\n    }\n  }\n}\n```\n*Prerequisites:* \n1. *Run `gcloud auth application-default login --scopes=https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/spreadsheets,https://www.googleapis.com/auth/drive` first.*\n2. *Set quota project: `gcloud auth application-default set-quota-project <project_id>`*\n\n**üçé macOS Note:** If you get a `spawn uvx ENOENT` error, replace `\"command\": \"uvx\"` with `\"command\": \"/Users/yourusername/.local/bin/uvx\"` (replace `yourusername` with your actual username).\n</details>\n\n<details>\n<summary>üü° Config: Development (Running from cloned repo)</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-google-sheets-local\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/path/to/your/mcp-google-sheets\",\n        \"mcp-google-sheets\"\n      ],\n      \"env\": {\n        \"SERVICE_ACCOUNT_PATH\": \"/path/to/your/mcp-google-sheets/service_account.json\",\n        \"DRIVE_FOLDER_ID\": \"your_drive_folder_id_here\"\n      }\n    }\n  }\n}\n```\n*Note: Use `--directory` flag to specify the project path, and adjust paths to match your actual workspace location.*\n</details>\n\n---\n\n## üí¨ Example Prompts for Claude\n\nOnce connected, try prompts like:\n\n*   \"List all spreadsheets I have access to.\" (or \"in my AI Managed Sheets folder\")\n*   \"Create a new spreadsheet titled 'Quarterly Sales Report Q3 2024'.\"\n*   \"In the 'Quarterly Sales Report' spreadsheet, get the data from Sheet1 range A1 to E10.\"\n*   \"Add a new sheet named 'Summary' to the spreadsheet with ID `1aBcDeFgHiJkLmNoPqRsTuVwXyZ`.\"\n*   \"In my 'Project Tasks' spreadsheet, Sheet 'Tasks', update cell B2 to 'In Progress'.\"\n*   \"Append these rows to the 'Log' sheet in spreadsheet `XYZ`: `[['2024-07-31', 'Task A Completed'], ['2024-08-01', 'Task B Started']]`\"\n*   \"Get a summary of the spreadsheets 'Sales Data' and 'Inventory Count'.\"\n*   \"Share the 'Team Vacation Schedule' spreadsheet with `team@example.com` as a reader and `manager@example.com` as a writer. Don't send notifications.\"\n\n---\n\n## ü§ù Contributing\n\nContributions are welcome! Please open an issue to discuss bugs or feature requests. Pull requests are appreciated.\n\n---\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n## üôè Credits\n\n*   Built with [FastMCP](https://github.com/cognitiveapis/fastmcp).\n*   Inspired by [kazz187/mcp-google-spreadsheet](https://github.com/kazz187/mcp-google-spreadsheet).\n*   Uses Google API Python Client libraries.\n",
  "category": "Data",
  "quality_score": 73,
  "archestra_config": {
    "client_config_permutations": {
      "mcp-google-sheets": {
        "command": "uvx",
        "args": ["mcp-google-sheets@latest"],
        "env": {}
      },
      "mcp-google-sheets-configured": {
        "command": "uvx",
        "args": ["mcp-google-sheets@latest"],
        "env": {
          "SERVICE_ACCOUNT_PATH": "/path/to/your/service-account-key.json",
          "DRIVE_FOLDER_ID": "YOUR_DRIVE_FOLDER_ID"
        }
      }
    },
    "oauth": {
      "provider": "google",
      "required": true
    }
  },
  "github_info": {
    "owner": "xing5",
    "repo": "mcp-google-sheets",
    "url": "https://github.com/xing5/mcp-google-sheets",
    "name": "xing5__mcp-google-sheets",
    "path": null,
    "stars": 381,
    "contributors": 8,
    "issues": 0,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "592bd62d9d3ac1450b94f350b0821e578b52c313"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-07T22:15:09.349Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": true,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": true
  },
  "dependencies": [
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "google-auth",
      "importance": 8
    },
    {
      "name": "google-auth-oauthlib",
      "importance": 8
    },
    {
      "name": "google-api-python-client",
      "importance": 9
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"mcp-google-sheets\"\ndynamic = [\"version\"]\ndescription = \"This MCP server integrates with your Google Drive and Google Sheets, to enable creating and modifying spreadsheets.\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\ndependencies = [\n    \"mcp>=1.5.0\",\n    \"google-auth>=2.28.1\",\n    \"google-auth-oauthlib>=1.2.0\",\n    \"google-api-python-client>=2.117.0\",\n]\n[[project.authors]]\nname = \"Xing Wu\"\nemail = \"xingwu.cs@gmail.com\"\n\n[project.urls]\n\"Homepage\" = \"https://github.com/xing5/mcp-google-sheets\"\n\"Bug Tracker\" = \"https://github.com/xing5/mcp-google-sheets/issues\"\n\"Repository\" = \"https://github.com/xing5/mcp-google-sheets.git\"\n\n[build-system]\nrequires = [\"hatchling\", \"uv-dynamic-versioning\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.hatch.version]\nsource = \"uv-dynamic-versioning\"\n\n[tool.uv-dynamic-versioning]\npattern = \"default\"\nstrict = true\n\n[project.scripts]\nmcp-google-sheets = \"mcp_google_sheets:main\"\n"
}
