{
  "name": "jlowin__fastmcp",
  "display_name": "fastmcp",
  "description": "üöÄ The fast, Pythonic way to build MCP servers and clients",
  "author": {
    "name": "jlowin"
  },
  "server": {
    "command": "python",
    "args": ["${__dirname}/server.py"],
    "env": {},
    "type": "local"
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "<div align=\"center\">\n\n<!-- omit in toc -->\n# FastMCP v2 üöÄ\n\n<strong>The fast, Pythonic way to build MCP servers and clients.</strong>\n\n*Made with ‚òïÔ∏è by [Prefect](https://www.prefect.io/)*\n\n[![Docs](https://img.shields.io/badge/docs-gofastmcp.com-blue)](https://gofastmcp.com)\n[![PyPI - Version](https://img.shields.io/pypi/v/fastmcp.svg)](https://pypi.org/project/fastmcp)\n[![Tests](https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml/badge.svg)](https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml)\n[![License](https://img.shields.io/github/license/jlowin/fastmcp.svg)](https://github.com/jlowin/fastmcp/blob/main/LICENSE)\n\n<a href=\"https://trendshift.io/repositories/13266\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/13266\" alt=\"jlowin%2Ffastmcp | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>\n</div>\n\n> [!Note]\n>\n> #### Beyond the Protocol\n>\n> FastMCP is the standard framework for working with the Model Context Protocol. FastMCP 1.0 was incorporated into the [official MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk) in 2024.\n>\n> This is FastMCP 2.0, the **actively maintained version** that provides a complete toolkit for working with the MCP ecosystem.\n>\n> FastMCP 2.0 has a comprehensive set of features that go far beyond the core MCP specification, all in service of providing **the simplest path to production**. These include deployment, auth, clients, server proxying and composition, generating servers from REST APIs, dynamic tool rewriting, built-in testing tools, integrations, and more.\n>\n> Ready to upgrade or get started? Follow the [installation instructions](https://gofastmcp.com/getting-started/installation), which include steps for upgrading from the official MCP SDK.\n\n---\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io) is a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers and clients simple and intuitive. Create tools, expose resources, define prompts, and connect components with clean, Pythonic code.\n\n```python\n# server.py\nfrom fastmcp import FastMCP\n\nmcp = FastMCP(\"Demo üöÄ\")\n\n@mcp.tool\ndef add(a: int, b: int) -> int:\n    \"\"\"Add two numbers\"\"\"\n    return a + b\n\nif __name__ == \"__main__\":\n    mcp.run()\n```\n\nRun the server locally:\n\n```bash\nfastmcp run server.py\n```\n\n### üìö Documentation\n\nFastMCP's complete documentation is available at **[gofastmcp.com](https://gofastmcp.com)**, including detailed guides, API references, and advanced patterns. This readme provides only a high-level overview.\n\nDocumentation is also available in [llms.txt format](https://llmstxt.org/), which is a simple markdown standard that LLMs can consume easily.\n\nThere are two ways to access the LLM-friendly documentation:\n\n- [`llms.txt`](https://gofastmcp.com/llms.txt) is essentially a sitemap, listing all the pages in the documentation.\n- [`llms-full.txt`](https://gofastmcp.com/llms-full.txt) contains the entire documentation. Note this may exceed the context window of your LLM.\n\n---\n\n<!-- omit in toc -->\n## Table of Contents\n\n- [What is MCP?](#what-is-mcp)\n- [Why FastMCP?](#why-fastmcp)\n- [Installation](#installation)\n- [Core Concepts](#core-concepts)\n  - [The `FastMCP` Server](#the-fastmcp-server)\n  - [Tools](#tools)\n  - [Resources \\& Templates](#resources--templates)\n  - [Prompts](#prompts)\n  - [Context](#context)\n  - [MCP Clients](#mcp-clients)\n- [Advanced Features](#advanced-features)\n  - [Proxy Servers](#proxy-servers)\n  - [Composing MCP Servers](#composing-mcp-servers)\n  - [OpenAPI \\& FastAPI Generation](#openapi--fastapi-generation)\n  - [Authentication \\& Security](#authentication--security)\n- [Running Your Server](#running-your-server)\n- [Contributing](#contributing)\n  - [Prerequisites](#prerequisites)\n  - [Setup](#setup)\n  - [Unit Tests](#unit-tests)\n  - [Static Checks](#static-checks)\n  - [Pull Requests](#pull-requests)\n\n---\n\n## What is MCP?\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io) lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. It is often described as \"the USB-C port for AI\", providing a uniform way to connect LLMs to resources they can use. It may be easier to think of it as an API, but specifically designed for LLM interactions. MCP servers can:\n\n- Expose data through **Resources** (think of these sort of like GET endpoints; they are used to load information into the LLM's context)\n- Provide functionality through **Tools** (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)\n- Define interaction patterns through **Prompts** (reusable templates for LLM interactions)\n- And more!\n\nFastMCP provides a high-level, Pythonic interface for building, managing, and interacting with these servers.\n\n## Why FastMCP?\n\nThe MCP protocol is powerful but implementing it involves a lot of boilerplate - server setup, protocol handlers, content types, error management. FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. It's designed to be high-level and Pythonic; in most cases, decorating a function is all you need.\n\nFastMCP 2.0 has evolved into a comprehensive platform that goes far beyond basic protocol implementation. While 1.0 provided server-building capabilities (and is now part of the official MCP SDK), 2.0 offers a complete ecosystem including client libraries, authentication systems, deployment tools, integrations with major AI platforms, testing frameworks, and production-ready infrastructure patterns.\n\nFastMCP aims to be:\n\nüöÄ **Fast:** High-level interface means less code and faster development\n\nüçÄ **Simple:** Build MCP servers with minimal boilerplate\n\nüêç **Pythonic:** Feels natural to Python developers\n\nüîç **Complete:** A comprehensive platform for all MCP use cases, from dev to prod\n\n## Installation\n\nWe recommend installing FastMCP with [uv](https://docs.astral.sh/uv/):\n\n```bash\nuv pip install fastmcp\n```\n\nFor full installation instructions, including verification, upgrading from the official MCPSDK, and developer setup, see the [**Installation Guide**](https://gofastmcp.com/getting-started/installation).\n\n## Core Concepts\n\nThese are the building blocks for creating MCP servers and clients with FastMCP.\n\n### The `FastMCP` Server\n\nThe central object representing your MCP application. It holds your tools, resources, and prompts, manages connections, and can be configured with settings like authentication.\n\n```python\nfrom fastmcp import FastMCP\n\n# Create a server instance\nmcp = FastMCP(name=\"MyAssistantServer\")\n```\n\nLearn more in the [**FastMCP Server Documentation**](https://gofastmcp.com/servers/fastmcp).\n\n### Tools\n\nTools allow LLMs to perform actions by executing your Python functions (sync or async). Ideal for computations, API calls, or side effects (like `POST`/`PUT`). FastMCP handles schema generation from type hints and docstrings. Tools can return various types, including text, JSON-serializable objects, and even images or audio aided by the FastMCP media helper classes.\n\n```python\n@mcp.tool\ndef multiply(a: float, b: float) -> float:\n    \"\"\"Multiplies two numbers.\"\"\"\n    return a * b\n```\n\nLearn more in the [**Tools Documentation**](https://gofastmcp.com/servers/tools).\n\n### Resources & Templates\n\nResources expose read-only data sources (like `GET` requests). Use `@mcp.resource(\"your://uri\")`. Use `{placeholders}` in the URI to create dynamic templates that accept parameters, allowing clients to request specific data subsets.\n\n```python\n# Static resource\n@mcp.resource(\"config://version\")\ndef get_version(): \n    return \"2.0.1\"\n\n# Dynamic resource template\n@mcp.resource(\"users://{user_id}/profile\")\ndef get_profile(user_id: int):\n    # Fetch profile for user_id...\n    return {\"name\": f\"User {user_id}\", \"status\": \"active\"}\n```\n\nLearn more in the [**Resources & Templates Documentation**](https://gofastmcp.com/servers/resources).\n\n### Prompts\n\nPrompts define reusable message templates to guide LLM interactions. Decorate functions with `@mcp.prompt`. Return strings or `Message` objects.\n\n```python\n@mcp.prompt\ndef summarize_request(text: str) -> str:\n    \"\"\"Generate a prompt asking for a summary.\"\"\"\n    return f\"Please summarize the following text:\\n\\n{text}\"\n```\n\nLearn more in the [**Prompts Documentation**](https://gofastmcp.com/servers/prompts).\n\n### Context\n\nAccess MCP session capabilities within your tools, resources, or prompts by adding a `ctx: Context` parameter. Context provides methods for:\n\n- **Logging:** Log messages to MCP clients with `ctx.info()`, `ctx.error()`, etc.\n- **LLM Sampling:** Use `ctx.sample()` to request completions from the client's LLM.\n- **HTTP Request:** Use `ctx.http_request()` to make HTTP requests to other servers.\n- **Resource Access:** Use `ctx.read_resource()` to access resources on the server\n- **Progress Reporting:** Use `ctx.report_progress()` to report progress to the client.\n- and more...\n\nTo access the context, add a parameter annotated as `Context` to any mcp-decorated function. FastMCP will automatically inject the correct context object when the function is called.\n\n```python\nfrom fastmcp import FastMCP, Context\n\nmcp = FastMCP(\"My MCP Server\")\n\n@mcp.tool\nasync def process_data(uri: str, ctx: Context):\n    # Log a message to the client\n    await ctx.info(f\"Processing {uri}...\")\n\n    # Read a resource from the server\n    data = await ctx.read_resource(uri)\n\n    # Ask client LLM to summarize the data\n    summary = await ctx.sample(f\"Summarize: {data.content[:500]}\")\n\n    # Return the summary\n    return summary.text\n```\n\nLearn more in the [**Context Documentation**](https://gofastmcp.com/servers/context).\n\n### MCP Clients\n\nInteract with *any* MCP server programmatically using the `fastmcp.Client`. It supports various transports (Stdio, SSE, In-Memory) and often auto-detects the correct one. The client can also handle advanced patterns like server-initiated **LLM sampling requests** if you provide an appropriate handler.\n\nCritically, the client allows for efficient **in-memory testing** of your servers by connecting directly to a `FastMCP` server instance via the `FastMCPTransport`, eliminating the need for process management or network calls during tests.\n\n```python\nfrom fastmcp import Client\n\nasync def main():\n    # Connect via stdio to a local script\n    async with Client(\"my_server.py\") as client:\n        tools = await client.list_tools()\n        print(f\"Available tools: {tools}\")\n        result = await client.call_tool(\"add\", {\"a\": 5, \"b\": 3})\n        print(f\"Result: {result.content[0].text}\")\n\n    # Connect via SSE\n    async with Client(\"http://localhost:8000/sse\") as client:\n        # ... use the client\n        pass\n```\n\nTo use clients to test servers, use the following pattern:\n\n```python\nfrom fastmcp import FastMCP, Client\n\nmcp = FastMCP(\"My MCP Server\")\n\nasync def main():\n    # Connect via in-memory transport\n    async with Client(mcp) as client:\n        # ... use the client\n```\n\nFastMCP also supports connecting to multiple servers through a single unified client using the standard MCP configuration format:\n\n```python\nfrom fastmcp import Client\n\n# Standard MCP configuration with multiple servers\nconfig = {\n    \"mcpServers\": {\n        \"weather\": {\"url\": \"https://weather-api.example.com/mcp\"},\n        \"assistant\": {\"command\": \"python\", \"args\": [\"./assistant_server.py\"]}\n    }\n}\n\n# Create a client that connects to all servers\nclient = Client(config)\n\nasync def main():\n    async with client:\n        # Access tools and resources with server prefixes\n        forecast = await client.call_tool(\"weather_get_forecast\", {\"city\": \"London\"})\n        answer = await client.call_tool(\"assistant_answer_question\", {\"query\": \"What is MCP?\"})\n```\n\nLearn more in the [**Client Documentation**](https://gofastmcp.com/clients/client) and [**Transports Documentation**](https://gofastmcp.com/clients/transports).\n\n## Advanced Features\n\nFastMCP introduces powerful ways to structure and deploy your MCP applications.\n\n### Proxy Servers\n\nCreate a FastMCP server that acts as an intermediary for another local or remote MCP server using `FastMCP.as_proxy()`. This is especially useful for bridging transports (e.g., remote SSE to local Stdio) or adding a layer of logic to a server you don't control.\n\nLearn more in the [**Proxying Documentation**](https://gofastmcp.com/patterns/proxy).\n\n### Composing MCP Servers\n\nBuild modular applications by mounting multiple `FastMCP` instances onto a parent server using `mcp.mount()` (live link) or `mcp.import_server()` (static copy).\n\nLearn more in the [**Composition Documentation**](https://gofastmcp.com/patterns/composition).\n\n### OpenAPI & FastAPI Generation\n\nAutomatically generate FastMCP servers from existing OpenAPI specifications (`FastMCP.from_openapi()`) or FastAPI applications (`FastMCP.from_fastapi()`), instantly bringing your web APIs to the MCP ecosystem.\n\nLearn more: [**OpenAPI Integration**](https://gofastmcp.com/integrations/openapi) | [**FastAPI Integration**](https://gofastmcp.com/integrations/fastapi).\n\n### Authentication & Security\n\nFastMCP provides built-in authentication support to secure both your MCP servers and clients in production environments. Protect your server endpoints from unauthorized access and authenticate your clients against secured MCP servers using industry-standard protocols.\n\n- **Server Protection**: Secure your FastMCP server endpoints with configurable authentication providers\n- **Client Authentication**: Connect to authenticated MCP servers with automatic credential management\n- **Production Ready**: Support for common authentication patterns used in enterprise environments\n\nLearn more in the **Authentication Documentation** for [servers](https://gofastmcp.com/servers/auth) and [clients](https://gofastmcp.com/clients/auth).\n\n## Running Your Server\n\nThe main way to run a FastMCP server is by calling the `run()` method on your server instance:\n\n```python\n# server.py\nfrom fastmcp import FastMCP\n\nmcp = FastMCP(\"Demo üöÄ\")\n\n@mcp.tool\ndef hello(name: str) -> str:\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    mcp.run()  # Default: uses STDIO transport\n```\n\nFastMCP supports three transport protocols:\n\n**STDIO (Default)**: Best for local tools and command-line scripts.\n\n```python\nmcp.run(transport=\"stdio\")  # Default, so transport argument is optional\n```\n\n**Streamable HTTP**: Recommended for web deployments.\n\n```python\nmcp.run(transport=\"http\", host=\"127.0.0.1\", port=8000, path=\"/mcp\")\n```\n\n**SSE**: For compatibility with existing SSE clients.\n\n```python\nmcp.run(transport=\"sse\", host=\"127.0.0.1\", port=8000)\n```\n\nSee the [**Running Server Documentation**](https://gofastmcp.com/deployment/running-server) for more details.\n\n## Contributing\n\nContributions are the core of open source! We welcome improvements and features.\n\n### Prerequisites\n\n- Python 3.10+\n- [uv](https://docs.astral.sh/uv/) (Recommended for environment management)\n\n### Setup\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/jlowin/fastmcp.git \n   cd fastmcp\n   ```\n\n2. Create and sync the environment:\n\n   ```bash\n   uv sync\n   ```\n\n   This installs all dependencies, including dev tools.\n\n3. Activate the virtual environment (e.g., `source .venv/bin/activate` or via your IDE).\n\n### Unit Tests\n\nFastMCP has a comprehensive unit test suite. All PRs must introduce or update tests as appropriate and pass the full suite.\n\nRun tests using pytest:\n\n```bash\npytest\n```\n\nor if you want an overview of the code coverage\n\n```bash\nuv run pytest --cov=src --cov=examples --cov-report=html\n```\n\n### Static Checks\n\nFastMCP uses `pre-commit` for code formatting, linting, and type-checking. All PRs must pass these checks (they run automatically in CI).\n\nInstall the hooks locally:\n\n```bash\nuv run pre-commit install\n```\n\nThe hooks will now run automatically on `git commit`. You can also run them manually at any time:\n\n```bash\npre-commit run --all-files\n# or via uv\nuv run pre-commit run --all-files\n```\n\n### Pull Requests\n\n1. Fork the repository on GitHub.\n2. Create a feature branch from `main`.\n3. Make your changes, including tests and documentation updates.\n4. Ensure tests and pre-commit hooks pass.\n5. Commit your changes and push to your fork.\n6. Open a pull request against the `main` branch of `jlowin/fastmcp`.\n\nPlease open an issue or discussion for questions or suggestions before starting significant work!\n",
  "category": "AI Tools",
  "quality_score": 77,
  "archestra_config": {
    "client_config_permutations": {
      "fastmcp": {
        "command": "fastmcp",
        "args": ["run", "server.py"],
        "env": {}
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": false
  },
  "github_info": {
    "owner": "jlowin",
    "repo": "fastmcp",
    "url": "https://github.com/jlowin/fastmcp",
    "name": "fastmcp",
    "path": null,
    "stars": 15645,
    "contributors": 89,
    "issues": 134,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "5ee159a4b343bac1c5575788366d31bc836331fc"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:54.344Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": true,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": false,
    "implementing_streamable_http": true,
    "implementing_oauth2": true
  },
  "dependencies": [
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "pydantic",
      "importance": 9
    },
    {
      "name": "httpx",
      "importance": 8
    },
    {
      "name": "authlib",
      "importance": 8
    },
    {
      "name": "openapi-pydantic",
      "importance": 7
    },
    {
      "name": "openapi-core",
      "importance": 7
    },
    {
      "name": "cyclopts",
      "importance": 6
    },
    {
      "name": "python-dotenv",
      "importance": 4
    },
    {
      "name": "rich",
      "importance": 4
    },
    {
      "name": "exceptiongroup",
      "importance": 3
    },
    {
      "name": "pyperclip",
      "importance": 3
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"fastmcp\"\ndynamic = [\"version\"]\ndescription = \"The fast, Pythonic way to build MCP servers and clients.\"\nauthors = [{ name = \"Jeremiah Lowin\" }]\ndependencies = [\n    \"python-dotenv>=1.1.0\",\n    \"exceptiongroup>=1.2.2\",\n    \"httpx>=0.28.1\",\n    \"mcp>=1.10.0\",\n    \"openapi-pydantic>=0.5.1\",\n    \"rich>=13.9.4\",\n    \"cyclopts>=3.0.0\",\n    \"authlib>=1.5.2\",\n    \"pydantic[email]>=2.11.7\",\n    \"pyperclip>=1.9.0\",\n    \"openapi-core>=0.19.5\",\n]\nrequires-python = \">=3.10\"\nreadme = \"README.md\"\nlicense = \"Apache-2.0\"\n\nkeywords = [\n    \"mcp\",\n    \"mcp server\",\n    \"mcp client\",\n    \"model context protocol\",\n    \"fastmcp\",\n    \"llm\",\n    \"agent\",\n]\nclassifiers = [\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Typing :: Typed\",\n]\n\n[dependency-groups]\ndev = [\n    \"copychat>=0.5.2\",\n    \"dirty-equals>=0.9.0\",\n    \"fastapi>=0.115.12\",\n    \"ipython>=8.12.3\",\n    \"pdbpp>=0.10.3\",\n    \"pre-commit\",\n    \"pyinstrument>=5.0.2\",\n    \"pyperclip>=1.9.0\",\n    \"pyright>=1.1.389\",\n    \"pytest>=8.3.3\",\n    \"pytest-asyncio>=0.23.5\",\n    \"pytest-cov>=6.1.1\",\n    \"pytest-env>=1.1.5\",\n    \"pytest-flakefinder\",\n    \"pytest-httpx>=0.35.0\",\n    \"pytest-report>=0.2.1\",\n    \"pytest-timeout>=2.4.0\",\n    \"pytest-xdist>=3.6.1\",\n    \"ruff\",\n]\n\n[project.scripts]\nfastmcp = \"fastmcp.cli:app\"\n\n[project.urls]\nHomepage = \"https://gofastmcp.com\"\nRepository = \"https://github.com/jlowin/fastmcp\"\nDocumentation = \"https://gofastmcp.com\"\n\n[project.optional-dependencies]\nwebsockets = [\"websockets>=15.0.1\"]\n\n[build-system]\nrequires = [\"hatchling\", \"uv-dynamic-versioning>=0.7.0\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.hatch.version]\nsource = \"uv-dynamic-versioning\"\n\n[tool.hatch.metadata]\nallow-direct-references = true\n\n[tool.uv-dynamic-versioning]\nvcs = \"git\"\nstyle = \"pep440\"\nbump = true\nfallback-version = \"0.0.0\"\n\n\n[tool.pytest.ini_options]\nasyncio_mode = \"auto\"\nasyncio_default_fixture_loop_scope = \"session\"\nasyncio_default_test_loop_scope = \"session\"\n# filterwarnings = [\"error::DeprecationWarning\"]\ntimeout = 3\nenv = [\n    \"FASTMCP_TEST_MODE=1\",\n    'D:FASTMCP_LOG_LEVEL=DEBUG',\n    'D:FASTMCP_ENABLE_RICH_TRACEBACKS=0',\n\n]\nmarkers = [\n    \"integration: marks tests as integration tests (deselect with '-m \\\"not integration\\\"')\",\n    \"client_process: marks tests that spawn client processes via stdio transport. These can create issues when run in the same CI environment as other subprocess-based tests.\",\n]\n# Automatically mark all tests in integration_tests folder\npythonpath = [\".\"]\ntestpaths = [\"tests\"]\npython_files = [\"test_*.py\", \"*_test.py\"]\npython_classes = [\"Test*\"]\npython_functions = [\"test_*\"]\n\n[tool.pyright]\ninclude = [\"src\", \"tests\"]\nexclude = [\"**/node_modules\", \"**/__pycache__\", \".venv\", \".git\", \"dist\"]\npythonVersion = \"3.10\"\npythonPlatform = \"Darwin\"\ntypeCheckingMode = \"basic\"\nreportMissingImports = true\nreportMissingTypeStubs = false\nuseLibraryCodeForTypes = true\nvenvPath = \".\"\nvenv = \".venv\"\nstrict = [\"src/fastmcp/server/server.py\"]\n\n[tool.ruff.lint]\nextend-select = [\"I\", \"UP\"]\n\n[tool.ruff.lint.per-file-ignores]\n\"__init__.py\" = [\"F401\", \"I001\", \"RUF013\"]\n# allow imports not at the top of the file\n\"src/fastmcp/__init__.py\" = [\"E402\"]\n"
}
