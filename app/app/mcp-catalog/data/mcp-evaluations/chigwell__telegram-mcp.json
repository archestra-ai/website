{
  "dxt_version": "0.1.0",
  "name": "chigwell__telegram-mcp",
  "display_name": "telegram-mcp",
  "version": "1.0.0",
  "description": "MCP server from chigwell/telegram-mcp",
  "author": {
    "name": "chigwell"
  },
  "server": {
    "command": "unknown",
    "args": [],
    "env": {}
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "# Telegram MCP Server\n\n![MCP Badge](https://badge.mcpx.dev)\n[![License: Apache 2.0](https://img.shields.io/badge/license-Apache%202.0-green?style=flat-square)](https://opensource.org/licenses/Apache-2.0)\n[![Python Lint & Format Check](https://github.com/chigwell/telegram-mcp/actions/workflows/python-lint-format.yml/badge.svg)](https://github.com/chigwell/telegram-mcp/actions/workflows/python-lint-format.yml)\n[![Docker Build & Compose Validation](https://github.com/chigwell/telegram-mcp/actions/workflows/docker-build.yml/badge.svg)](https://github.com/chigwell/telegram-mcp/actions/workflows/docker-build.yml)\n\n---\n\n## ü§ñ MCP in Action\n\nHere's a demonstration of the Telegram MCP capabilities in [Claude](https://docs.anthropic.com/en/docs/agents-and-tools/mcp):\n\n **Basic usage example:**\n\n![Telegram MCP in action](screenshots/1.png)\n\n1. **Example: Asking Claude to analyze chat history and send a response:**\n\n![Telegram MCP Request](screenshots/2.png)\n\n2. **Successfully sent message to the group:**\n\n![Telegram MCP Result](screenshots/3.png)\n\nAs you can see, the AI can seamlessly interact with your Telegram account, retrieving and displaying your chats, messages, and other data in a natural way.\n\n---\n\nA full-featured Telegram integration for Claude, Cursor, and any MCP-compatible client, powered by [Telethon](https://docs.telethon.dev/) and the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/). This project lets you interact with your Telegram account programmatically, automating everything from messaging to group management.\n\n\n---\n\n## üöÄ Features & Tools\n\nThis MCP server exposes a huge suite of Telegram tools. **Every major Telegram/Telethon feature is available as a tool!**\n\n### Chat & Group Management\n- **get_chats(page, page_size)**: Paginated list of chats\n- **list_chats(chat_type, limit)**: List chats with metadata and filtering\n- **get_chat(chat_id)**: Detailed info about a chat\n- **create_group(title, user_ids)**: Create a new group\n- **create_channel(title, about, megagroup)**: Create a channel or supergroup\n- **edit_chat_title(chat_id, title)**: Change chat/group/channel title\n- **delete_chat_photo(chat_id)**: Remove chat/group/channel photo\n- **leave_chat(chat_id)**: Leave a group or channel\n- **get_participants(chat_id)**: List all participants\n- **get_admins(chat_id)**: List all admins\n- **get_banned_users(chat_id)**: List all banned users\n- **promote_admin(chat_id, user_id)**: Promote user to admin\n- **demote_admin(chat_id, user_id)**: Demote admin to user\n- **ban_user(chat_id, user_id)**: Ban user\n- **unban_user(chat_id, user_id)**: Unban user\n- **get_invite_link(chat_id)**: Get invite link\n- **export_chat_invite(chat_id)**: Export invite link\n- **import_chat_invite(hash)**: Join chat by invite hash\n- **join_chat_by_link(link)**: Join chat by invite link\n\n### Messaging\n- **get_messages(chat_id, page, page_size)**: Paginated messages\n- **list_messages(chat_id, limit, search_query, from_date, to_date)**: Filtered messages\n- **send_message(chat_id, message)**: Send a message\n- **reply_to_message(chat_id, message_id, text)**: Reply to a message\n- **edit_message(chat_id, message_id, new_text)**: Edit your message\n- **delete_message(chat_id, message_id)**: Delete a message\n- **forward_message(from_chat_id, message_id, to_chat_id)**: Forward a message\n- **pin_message(chat_id, message_id)**: Pin a message\n- **unpin_message(chat_id, message_id)**: Unpin a message\n- **mark_as_read(chat_id)**: Mark all as read\n- **get_message_context(chat_id, message_id, context_size)**: Context around a message\n- **get_history(chat_id, limit)**: Full chat history\n- **get_pinned_messages(chat_id)**: List pinned messages\n- **get_last_interaction(contact_id)**: Most recent message with a contact\n\n### Contact Management\n- **list_contacts()**: List all contacts\n- **search_contacts(query)**: Search contacts\n- **add_contact(phone, first_name, last_name)**: Add a contact\n- **delete_contact(user_id)**: Delete a contact\n- **block_user(user_id)**: Block a user\n- **unblock_user(user_id)**: Unblock a user\n- **import_contacts(contacts)**: Bulk import contacts\n- **export_contacts()**: Export all contacts as JSON\n- **get_blocked_users()**: List blocked users\n- **get_contact_ids()**: List all contact IDs\n- **get_direct_chat_by_contact(contact_query)**: Find direct chat with a contact\n- **get_contact_chats(contact_id)**: List all chats with a contact\n\n### User & Profile\n- **get_me()**: Get your user info\n- **update_profile(first_name, last_name, about)**: Update your profile\n- **delete_profile_photo()**: Remove your profile photo\n- **get_user_photos(user_id, limit)**: Get a user's profile photos\n- **get_user_status(user_id)**: Get a user's online status\n\n### Media\n- **get_media_info(chat_id, message_id)**: Get info about media in a message\n\n### Search & Discovery\n- **search_public_chats(query)**: Search public chats/channels/bots\n- **search_messages(chat_id, query, limit)**: Search messages in a chat\n- **resolve_username(username)**: Resolve a username to ID\n\n### Stickers, GIFs, Bots\n- **get_sticker_sets()**: List sticker sets\n- **get_bot_info(bot_username)**: Get info about a bot\n- **set_bot_commands(bot_username, commands)**: Set bot commands (bot accounts only)\n\n### Privacy, Settings, and Misc\n- **get_privacy_settings()**: Get privacy settings\n- **set_privacy_settings(key, allow_users, disallow_users)**: Set privacy settings\n- **mute_chat(chat_id)**: Mute notifications\n- **unmute_chat(chat_id)**: Unmute notifications\n- **archive_chat(chat_id)**: Archive a chat\n- **unarchive_chat(chat_id)**: Unarchive a chat\n- **get_recent_actions(chat_id)**: Get recent admin actions\n\n## Removed Functionality\n\nPlease note that tools requiring direct file path access on the server (`send_file`, `download_media`, `set_profile_photo`, `edit_chat_photo`, `send_voice`, `send_sticker`, `upload_file`) have been removed from `main.py`. This is due to limitations in the current MCP environment regarding handling file attachments and local file system paths.\n\nAdditionally, GIF-related tools (`get_gif_search`, `get_saved_gifs`, `send_gif`) have been removed due to ongoing issues with reliability in the Telethon library or Telegram API interactions.\n\n---\n\n## üìã Requirements\n- Python 3.10+\n- [Telethon](https://docs.telethon.dev/)\n- [MCP Python SDK](https://modelcontextprotocol.io/docs/)\n- [Claude Desktop](https://claude.ai/desktop) or [Cursor](https://cursor.so/) (or any MCP client)\n\n---\n\n## üîß Installation & Setup\n\n### 1. Fork & Clone\n\n```bash\ngit clone https://github.com/chigwell/telegram-mcp.git\ncd telegram-mcp\n```\n\n### 2. Create a Virtual Environment\n\n```bash\npython3 -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -r requirements.txt\n```\n\n### 3. Generate a Session String\n\n```bash\npython3 session_string_generator.py\n```\nFollow the prompts to authenticate and update your `.env` file.\n\n### 4. Configure .env\n\nCopy `.env.example` to `.env` and fill in your values:\n\n```\nTELEGRAM_API_ID=your_api_id_here\nTELEGRAM_API_HASH=your_api_hash_here\nTELEGRAM_SESSION_NAME=anon\nTELEGRAM_SESSION_STRING=your_session_string_here\n```\nGet your API credentials at [my.telegram.org/apps](https://my.telegram.org/apps).\n\n---\n\n## üê≥ Running with Docker\n\nIf you have Docker and Docker Compose installed, you can build and run the server in a container, simplifying dependency management.\n\n### 1. Build the Image\n\nFrom the project root directory, build the Docker image:\n\n```bash\ndocker build -t telegram-mcp:latest .\n```\n\n### 2. Running the Container\n\nYou have two options:\n\n**Option A: Using Docker Compose (Recommended for Local Use)**\n\nThis method uses the `docker-compose.yml` file and automatically reads your credentials from a `.env` file.\n\n1.  **Create `.env` File:** Ensure you have a `.env` file in the project root containing your `TELEGRAM_API_ID`, `TELEGRAM_API_HASH`, and `TELEGRAM_SESSION_STRING` (or `TELEGRAM_SESSION_NAME`). Use `.env.example` as a template.\n2.  **Run Compose:**\n    ```bash\n    docker compose up --build\n    ```\n    *   Use `docker compose up -d` to run in detached mode (background).\n    *   Press `Ctrl+C` to stop the server.\n\n**Option B: Using `docker run`**\n\nYou can run the container directly, passing credentials as environment variables.\n\n```bash\ndocker run -it --rm \\\n  -e TELEGRAM_API_ID=\"YOUR_API_ID\" \\\n  -e TELEGRAM_API_HASH=\"YOUR_API_HASH\" \\\n  -e TELEGRAM_SESSION_STRING=\"YOUR_SESSION_STRING\" \\\n  telegram-mcp:latest\n```\n*   Replace placeholders with your actual credentials.\n*   Use `-e TELEGRAM_SESSION_NAME=your_session_file_name` instead of `TELEGRAM_SESSION_STRING` if you prefer file-based sessions (requires volume mounting, see `docker-compose.yml` for an example).\n*   The `-it` flags are crucial for interacting with the server.\n\n---\n\n## ‚öôÔ∏è Configuration for Claude & Cursor\n\n### MCP Configuration\nEdit your Claude desktop config (e.g. `~/Library/Application Support/Claude/claude_desktop_config.json`) or Cursor config (`~/.cursor/mcp.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"telegram-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/full/path/to/telegram-mcp\",\n        \"run\",\n        \"main.py\"\n      ]\n    }\n  }\n}\n```\n\n## üìù Tool Examples with Code & Output\n\nBelow are examples of the most commonly used tools with their implementation and sample output.\n\n### Getting Your Chats\n\n```python\n@mcp.tool()\nasync def get_chats(page: int = 1, page_size: int = 20) -> str:\n    \"\"\"\n    Get a paginated list of chats.\n    Args:\n        page: Page number (1-indexed).\n        page_size: Number of chats per page.\n    \"\"\"\n    try:\n        dialogs = await client.get_dialogs()\n        start = (page - 1) * page_size\n        end = start + page_size\n        if start >= len(dialogs):\n            return \"Page out of range.\"\n        chats = dialogs[start:end]\n        lines = []\n        for dialog in chats:\n            entity = dialog.entity\n            chat_id = entity.id\n            title = getattr(entity, \"title\", None) or getattr(entity, \"first_name\", \"Unknown\")\n            lines.append(f\"Chat ID: {chat_id}, Title: {title}\")\n        return \"\\n\".join(lines)\n    except Exception as e:\n        logger.exception(f\"get_chats failed (page={page}, page_size={page_size})\")\n        return \"An error occurred (code: GETCHATS-ERR-001). Check mcp_errors.log for details.\"\n```\n\nExample output:\n```\nChat ID: 123456789, Title: John Doe\nChat ID: -100987654321, Title: My Project Group\nChat ID: 111223344, Title: Jane Smith\nChat ID: -200123456789, Title: News Channel\n```\n\n### Sending Messages\n\n```python\n@mcp.tool()\nasync def send_message(chat_id: int, message: str) -> str:\n    \"\"\"\n    Send a message to a specific chat.\n    Args:\n        chat_id: The ID of the chat.\n        message: The message content to send.\n    \"\"\"\n    try:\n        entity = await client.get_entity(chat_id)\n        await client.send_message(entity, message)\n        return \"Message sent successfully.\"\n    except Exception as e:\n        logger.exception(f\"send_message failed (chat_id={chat_id})\")\n        return \"An error occurred (code: SENDMSG-ERR-001). Check mcp_errors.log for details.\"\n```\n\nExample output:\n```\nMessage sent successfully.\n```\n\n### Getting Chat Invite Links\n\nThe `get_invite_link` function is particularly robust with multiple fallback methods:\n\n```python\n@mcp.tool()\nasync def get_invite_link(chat_id: int) -> str:\n    \"\"\"\n    Get the invite link for a group or channel.\n    \"\"\"\n    try:\n        entity = await client.get_entity(chat_id)\n        \n        # Try using ExportChatInviteRequest first\n        try:\n            from telethon.tl import functions\n            result = await client(functions.messages.ExportChatInviteRequest(\n                peer=entity\n            ))\n            return result.link\n        except AttributeError:\n            # If the function doesn't exist in the current Telethon version\n            logger.warning(\"ExportChatInviteRequest not available, using alternative method\")\n        except Exception as e1:\n            # If that fails, log and try alternative approach\n            logger.warning(f\"ExportChatInviteRequest failed: {e1}\")\n            \n        # Alternative approach using client.export_chat_invite_link\n        try:\n            invite_link = await client.export_chat_invite_link(entity)\n            return invite_link\n        except Exception as e2:\n            logger.warning(f\"export_chat_invite_link failed: {e2}\")\n            \n        # Last resort: Try directly fetching chat info\n        try:\n            if isinstance(entity, (Chat, Channel)):\n                full_chat = await client(functions.messages.GetFullChatRequest(\n                    chat_id=entity.id\n                ))\n                if hasattr(full_chat, 'full_chat') and hasattr(full_chat.full_chat, 'invite_link'):\n                    return full_chat.full_chat.invite_link or \"No invite link available.\"\n        except Exception as e3:\n            logger.warning(f\"GetFullChatRequest failed: {e3}\")\n            \n        return \"Could not retrieve invite link for this chat.\"\n    except Exception as e:\n        logger.exception(f\"get_invite_link failed (chat_id={chat_id})\")\n        return f\"Error getting invite link: {e}\"\n```\n\nExample output:\n```\nhttps://t.me/+AbCdEfGhIjKlMnOp\n```\n\n### Joining Chats via Invite Links\n\n```python\n@mcp.tool()\nasync def join_chat_by_link(link: str) -> str:\n    \"\"\"\n    Join a chat by invite link.\n    \"\"\"\n    try:\n        # Extract the hash from the invite link\n        if '/' in link:\n            hash_part = link.split('/')[-1]\n            if hash_part.startswith('+'):\n                hash_part = hash_part[1:]  # Remove the '+' if present\n        else:\n            hash_part = link\n            \n        # Try checking the invite before joining\n        try:\n            # Try to check invite info first (will often fail if not a member)\n            invite_info = await client(functions.messages.CheckChatInviteRequest(hash=hash_part))\n            if hasattr(invite_info, 'chat') and invite_info.chat:\n                # If we got chat info, we're already a member\n                chat_title = getattr(invite_info.chat, 'title', 'Unknown Chat')\n                return f\"You are already a member of this chat: {chat_title}\"\n        except Exception:\n            # This often fails if not a member - just continue\n            pass\n            \n        # Join the chat using the hash\n        result = await client(functions.messages.ImportChatInviteRequest(hash=hash_part))\n        if result and hasattr(result, 'chats') and result.chats:\n            chat_title = getattr(result.chats[0], 'title', 'Unknown Chat')\n            return f\"Successfully joined chat: {chat_title}\"\n        return f\"Joined chat via invite hash.\"\n    except Exception as e:\n        err_str = str(e).lower()\n        if \"expired\" in err_str:\n            return \"The invite hash has expired and is no longer valid.\"\n        elif \"invalid\" in err_str:\n            return \"The invite hash is invalid or malformed.\"\n        elif \"already\" in err_str and \"participant\" in err_str:\n            return \"You are already a member of this chat.\"\n        logger.exception(f\"join_chat_by_link failed (link={link})\")\n        return f\"Error joining chat: {e}\"\n```\n\nExample output:\n```\nSuccessfully joined chat: Developer Community\n```\n\n### Searching Public Chats\n\n```python\n@mcp.tool()\nasync def search_public_chats(query: str) -> str:\n    \"\"\"\n    Search for public chats, channels, or bots by username or title.\n    \"\"\"\n    try:\n        result = await client(functions.contacts.SearchRequest(q=query, limit=20))\n        return json.dumps([format_entity(u) for u in result.users], indent=2)\n    except Exception as e:\n        return f\"Error searching public chats: {e}\"\n```\n\nExample output:\n```json\n[\n  {\n    \"id\": 123456789,\n    \"name\": \"TelegramBot\",\n    \"type\": \"user\",\n    \"username\": \"telegram_bot\"\n  },\n  {\n    \"id\": 987654321,\n    \"name\": \"Telegram News\",\n    \"type\": \"user\",\n    \"username\": \"telegram_news\"\n  }\n]\n```\n\n### Getting Direct Chats with Contacts\n\n```python\n@mcp.tool()\nasync def get_direct_chat_by_contact(contact_query: str) -> str:\n    \"\"\"\n    Find a direct chat with a specific contact by name, username, or phone.\n    \n    Args:\n        contact_query: Name, username, or phone number to search for.\n    \"\"\"\n    try:\n        # Fetch all contacts using the correct Telethon method\n        result = await client(functions.contacts.GetContactsRequest(hash=0))\n        contacts = result.users\n        found_contacts = []\n        for contact in contacts:\n            if not contact:\n                continue\n            name = f\"{getattr(contact, 'first_name', '')} {getattr(contact, 'last_name', '')}\".strip()\n            username = getattr(contact, 'username', '')\n            phone = getattr(contact, 'phone', '')\n            if (contact_query.lower() in name.lower() or \n                (username and contact_query.lower() in username.lower()) or \n                (phone and contact_query in phone)):\n                found_contacts.append(contact)\n        if not found_contacts:\n            return f\"No contacts found matching '{contact_query}'.\"\n        # If we found contacts, look for direct chats with them\n        results = []\n        dialogs = await client.get_dialogs()\n        for contact in found_contacts:\n            contact_name = f\"{getattr(contact, 'first_name', '')} {getattr(contact, 'last_name', '')}\".strip()\n            for dialog in dialogs:\n                if isinstance(dialog.entity, User) and dialog.entity.id == contact.id:\n                    chat_info = f\"Chat ID: {dialog.entity.id}, Contact: {contact_name}\"\n                    if getattr(contact, 'username', ''):\n                        chat_info += f\", Username: @{contact.username}\"\n                    if dialog.unread_count:\n                        chat_info += f\", Unread: {dialog.unread_count}\"\n                    results.append(chat_info)\n                    break\n        \n        if not results:\n            return f\"Found contacts matching '{contact_query}', but no direct chats with them.\"\n        \n        return \"\\n\".join(results)\n    except Exception as e:\n        return f\"Error searching for direct chat: {e}\"\n```\n\nExample output:\n```\nChat ID: 123456789, Contact: John Smith, Username: @johnsmith, Unread: 3\n```\n\n---\n\n## üéÆ Usage Examples\n\n- \"Show my recent chats\"\n- \"Send 'Hello world' to chat 123456789\"\n- \"Add contact with phone +1234567890, name John Doe\"\n- \"Create a group 'Project Team' with users 111, 222, 333\"\n- \"Download the media from message 42 in chat 123456789\"\n- \"Mute notifications for chat 123456789\"\n- \"Promote user 111 to admin in group 123456789\"\n- \"Search for public channels about 'news'\"\n- \"Join the Telegram group with invite link https://t.me/+AbCdEfGhIjK\"\n- \"Send a sticker to my Saved Messages\"\n- \"Get all my sticker sets\"\n\nYou can use these tools via natural language in Claude, Cursor, or any MCP-compatible client.\n\n---\n\n## üß† Error Handling & Robustness\n\nThis implementation includes comprehensive error handling:\n\n- **Session management**: Works with both file-based and string-based sessions\n- **Error reporting**: Detailed errors logged to `mcp_errors.log`\n- **Graceful degradation**: Multiple fallback approaches for critical functions\n- **User-friendly messages**: Clear, actionable error messages instead of technical errors\n- **Account type detection**: Functions that require bot accounts detect and notify when used with user accounts\n- **Invite link processing**: Handles various link formats and already-member cases\n\nThe code is designed to be robust against common Telegram API issues and limitations.\n\n---\n\n## üõ†Ô∏è Contribution Guide\n\n1. **Fork this repo:** [chigwell/telegram-mcp](https://github.com/chigwell/telegram-mcp)\n2. **Clone your fork:**\n   ```bash\n   git clone https://github.com/<your-github-username>/telegram-mcp.git\n   ```\n3. **Create a new branch:**\n   ```bash\n   git checkout -b my-feature\n   ```\n4. **Make your changes, add tests/docs if needed.**\n5. **Push and open a Pull Request** to [chigwell/telegram-mcp](https://github.com/chigwell/telegram-mcp) with a clear description.\n6. **Tag @chigwell or @l1v0n1** in your PR for review.\n\n---\n\n## üîí Security Considerations\n- **Never commit your `.env` or session string.**\n- The session string gives full access to your Telegram account‚Äîkeep it safe!\n- All processing is local; no data is sent anywhere except Telegram's API.\n- Use `.env.example` as a template and keep your actual `.env` file private.\n- Test files are automatically excluded in `.gitignore`.\n\n---\n\n## üõ†Ô∏è Troubleshooting\n- **Check logs** in your MCP client (Claude/Cursor) and the terminal for errors.\n- **Detailed error logs** can be found in `mcp_errors.log`.\n- **Interpreter errors?** Make sure your `.venv` is created and selected.\n- **Database lock?** Use session string authentication, not file-based sessions.\n- **iCloud/Dropbox issues?** Move your project to a local path without spaces if you see odd errors.\n- **Regenerate session string** if you change your Telegram password or see auth errors.\n- **Bot-only functions** will show clear messages when used with regular user accounts.\n- **Test script failures?** Check test configuration in `.env` for valid test accounts/groups.\n\n---\n\n## üìÑ License\n\nThis project is licensed under the [Apache 2.0 License](LICENSE).\n\n---\n\n## üôè Acknowledgements\n- [Telethon](https://github.com/LonamiWebs/Telethon)\n- [Model Context Protocol](https://modelcontextprotocol.io/)\n- [Claude](https://www.anthropic.com/) and [Cursor](https://cursor.so/)\n- [chigwell/telegram-mcp](https://github.com/chigwell/telegram-mcp) (upstream)\n\n---\n\n**Maintained by [@chigwell](https://github.com/chigwell) and [@l1v0n1](https://github.com/l1v0n1). PRs welcome!**\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=chigwell/telegram-mcp&type=Date)](https://www.star-history.com/#chigwell/telegram-mcp&Date)\n",
  "category": "Messengers",
  "quality_score": 55,
  "archestra_config": {
    "client_config_permutations": {
      "telegram-mcp-docker-compose": {
        "command": "docker-compose",
        "args": ["up", "-d"],
        "env": {}
      },
      "telegram-mcp-docker": {
        "command": "docker",
        "args": [
          "run",
          "-d",
          "--name",
          "telegram-mcp-server",
          "-e",
          "TELEGRAM_API_ID=your_api_id_here",
          "-e",
          "TELEGRAM_API_HASH=your_api_hash_here",
          "-e",
          "TELEGRAM_SESSION_STRING=your_session_string_here",
          "-p",
          "8000:8000",
          "telegram-mcp:latest"
        ],
        "env": {
          "TELEGRAM_API_ID": "your_api_id_here",
          "TELEGRAM_API_HASH": "your_api_hash_here",
          "TELEGRAM_SESSION_STRING": "your_session_string_here"
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": false
  },
  "github_info": {
    "owner": "chigwell",
    "repo": "telegram-mcp",
    "url": "https://github.com/chigwell/telegram-mcp",
    "name": "telegram-mcp",
    "path": null,
    "stars": 266,
    "contributors": 2,
    "issues": 8,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "e16b41115c7d9a9568fb86d5ba892744d983895e"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-08-04T09:33:29.248Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": false,
    "implementing_streamable_http": true,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "telethon",
      "importance": 9
    },
    {
      "name": "starlette",
      "importance": 9
    },
    {
      "name": "uvicorn",
      "importance": 8
    },
    {
      "name": "pydantic",
      "importance": 8
    },
    {
      "name": "httpx",
      "importance": 7
    },
    {
      "name": "pydantic-core",
      "importance": 7
    },
    {
      "name": "anyio",
      "importance": 6
    },
    {
      "name": "sse-starlette",
      "importance": 6
    },
    {
      "name": "typer",
      "importance": 5
    },
    {
      "name": "pydantic-settings",
      "importance": 5
    },
    {
      "name": "nest-asyncio",
      "importance": 5
    },
    {
      "name": "pyaes",
      "importance": 5
    },
    {
      "name": "rsa",
      "importance": 5
    },
    {
      "name": "httpcore",
      "importance": 5
    },
    {
      "name": "python-dotenv",
      "importance": 4
    },
    {
      "name": "click",
      "importance": 4
    },
    {
      "name": "rich",
      "importance": 4
    },
    {
      "name": "dotenv",
      "importance": 3
    }
  ],
  "raw_dependencies": "=== poetry.lock ===\n# This file is automatically @generated by Poetry 2.1.2 and should not be changed by hand.\n\n[[package]]\nname = \"annotated-types\"\nversion = \"0.7.0\"\ndescription = \"Reusable constraint types to use with typing.Annotated\"\noptional = false\npython-versions = \">=3.8\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"annotated_types-0.7.0-py3-none-any.whl\", hash = \"sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53\"},\n    {file = \"annotated_types-0.7.0.tar.gz\", hash = \"sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89\"},\n]\n\n[[package]]\nname = \"anyio\"\nversion = \"4.9.0\"\ndescription = \"High level compatibility layer for multiple asynchronous event loop implementations\"\noptional = false\npython-versions = \">=3.9\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"anyio-4.9.0-py3-none-any.whl\", hash = \"sha256:9f76d541cad6e36af7beb62e978876f3b41e3e04f2c1fbf0884604c0a9c4d93c\"},\n    {file = \"anyio-4.9.0.tar.gz\", hash = \"sha256:673c0c244e15788651a4ff38710fea9675823028a6f08a5eda409e0c9840a028\"},\n]\n\n[package.dependencies]\nexceptiongroup = {version = \">=1.0.2\", markers = \"python_version < \\\"3.11\\\"\"}\nidna = \">=2.8\"\nsniffio = \">=1.1\"\ntyping_extensions = {version = \">=4.5\", markers = \"python_version < \\\"3.13\\\"\"}\n\n[package.extras]\ndoc = [\"Sphinx (>=8.2,<9.0)\", \"packaging\", \"sphinx-autodoc-typehints (>=1.2.0)\", \"sphinx_rtd_theme\"]\ntest = [\"anyio[trio]\", \"blockbuster (>=1.5.23)\", \"coverage[toml] (>=7)\", \"exceptiongroup (>=1.2.0)\", \"hypothesis (>=4.0)\", \"psutil (>=5.9)\", \"pytest (>=7.0)\", \"trustme\", \"truststore (>=0.9.1) ; python_version >= \\\"3.10\\\"\", \"uvloop (>=0.21) ; platform_python_implementation == \\\"CPython\\\" and platform_system != \\\"Windows\\\" and python_version < \\\"3.14\\\"\"]\ntrio = [\"trio (>=0.26.1)\"]\n\n[[package]]\nname = \"certifi\"\nversion = \"2025.1.31\"\ndescription = \"Python package for providing Mozilla's CA Bundle.\"\noptional = false\npython-versions = \">=3.6\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"certifi-2025.1.31-py3-none-any.whl\", hash = \"sha256:ca78db4565a652026a4db2bcdf68f2fb589ea80d0be70e03929ed730746b84fe\"},\n    {file = \"certifi-2025.1.31.tar.gz\", hash = \"sha256:3d5da6925056f6f18f119200434a4780a94263f10d1c21d032a6f6b2baa20651\"},\n]\n\n[[package]]\nname = \"click\"\nversion = \"8.1.8\"\ndescription = \"Composable command line interface toolkit\"\noptional = false\npython-versions = \">=3.7\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"click-8.1.8-py3-none-any.whl\", hash = \"sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2\"},\n    {file = \"click-8.1.8.tar.gz\", hash = \"sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a\"},\n]\n\n[package.dependencies]\ncolorama = {version = \"*\", markers = \"platform_system == \\\"Windows\\\"\"}\n\n[[package]]\nname = \"colorama\"\nversion = \"0.4.6\"\ndescription = \"Cross-platform colored terminal text.\"\noptional = false\npython-versions = \"!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7\"\ngroups = [\"main\"]\nmarkers = \"platform_system == \\\"Windows\\\"\"\nfiles = [\n    {file = \"colorama-0.4.6-py2.py3-none-any.whl\", hash = \"sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6\"},\n    {file = \"colorama-0.4.6.tar.gz\", hash = \"sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44\"},\n]\n\n[[package]]\nname = \"dotenv\"\nversion = \"0.9.9\"\ndescription = \"Deprecated package\"\noptional = false\npython-versions = \"*\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"dotenv-0.9.9-py2.py3-none-any.whl\", hash = \"sha256:29cf74a087b31dafdb5a446b6d7e11cbce8ed2741540e2339c69fbef92c94ce9\"},\n]\n\n[package.dependencies]\npython-dotenv = \"*\"\n\n[[package]]\nname = \"exceptiongroup\"\nversion = \"1.2.2\"\ndescription = \"Backport of PEP 654 (exception groups)\"\noptional = false\npython-versions = \">=3.7\"\ngroups = [\"main\"]\nmarkers = \"python_version == \\\"3.10\\\"\"\nfiles = [\n    {file = \"exceptiongroup-1.2.2-py3-none-any.whl\", hash = \"sha256:3111b9d131c238bec2f8f516e123e14ba243563fb135d3fe885990585aa7795b\"},\n    {file = \"exceptiongroup-1.2.2.tar.gz\", hash = \"sha256:47c2edf7c6738fafb49fd34290706d1a1a2f4d1c6df275526b62cbb4aa5393cc\"},\n]\n\n[package.extras]\ntest = [\"pytest (>=6)\"]\n\n[[package]]\nname = \"h11\"\nversion = \"0.14.0\"\ndescription = \"A pure-Python, bring-your-own-I/O implementation of HTTP/1.1\"\noptional = false\npython-versions = \">=3.7\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"h11-0.14.0-py3-none-any.whl\", hash = \"sha256:e3fe4ac4b851c468cc8363d500db52c2ead036020723024a109d37346efaa761\"},\n    {file = \"h11-0.14.0.tar.gz\", hash = \"sha256:8f19fbbe99e72420ff35c00b27a34cb9937e902a8b810e2c88300c6f0a3b699d\"},\n]\n\n[[package]]\nname = \"httpcore\"\nversion = \"1.0.8\"\ndescription = \"A minimal low-level HTTP client.\"\noptional = false\npython-versions = \">=3.8\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"httpcore-1.0.8-py3-none-any.whl\", hash = \"sha256:5254cf149bcb5f75e9d1b2b9f729ea4a4b883d1ad7379fc632b727cec23674be\"},\n    {file = \"httpcore-1.0.8.tar.gz\", hash = \"sha256:86e94505ed24ea06514883fd44d2bc02d90e77e7979c8eb71b90f41d364a1bad\"},\n]\n\n[package.dependencies]\ncertifi = \"*\"\nh11 = \">=0.13,<0.15\"\n\n[package.extras]\nasyncio = [\"anyio (>=4.0,<5.0)\"]\nhttp2 = [\"h2 (>=3,<5)\"]\nsocks = [\"socksio (==1.*)\"]\ntrio = [\"trio (>=0.22.0,<1.0)\"]\n\n[[package]]\nname = \"httpx\"\nversion = \"0.28.1\"\ndescription = \"The next generation HTTP client.\"\noptional = false\npython-versions = \">=3.8\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"httpx-0.28.1-py3-none-any.whl\", hash = \"sha256:d909fcccc110f8c7faf814ca82a9a4d816bc5a6dbfea25d6591d6985b8ba59ad\"},\n    {file = \"httpx-0.28.1.tar.gz\", hash = \"sha256:75e98c5f16b0f35b567856f597f06ff2270a374470a5c2392242528e3e3e42fc\"},\n]\n\n[package.dependencies]\nanyio = \"*\"\ncertifi = \"*\"\nhttpcore = \"==1.*\"\nidna = \"*\"\n\n[package.extras]\nbrotli = [\"brotli ; platform_python_implementation == \\\"CPython\\\"\", \"brotlicffi ; platform_python_implementation != \\\"CPython\\\"\"]\ncli = [\"click (==8.*)\", \"pygments (==2.*)\", \"rich (>=10,<14)\"]\nhttp2 = [\"h2 (>=3,<5)\"]\nsocks = [\"socksio (==1.*)\"]\nzstd = [\"zstandard (>=0.18.0)\"]\n\n[[package]]\nname = \"httpx-sse\"\nversion = \"0.4.0\"\ndescription = \"Consume Server-Sent Event (SSE) messages with HTTPX.\"\noptional = false\npython-versions = \">=3.8\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"httpx-sse-0.4.0.tar.gz\", hash = \"sha256:1e81a3a3070ce322add1d3529ed42eb5f70817f45ed6ec915ab753f961139721\"},\n    {file = \"httpx_sse-0.4.0-py3-none-any.whl\", hash = \"sha256:f329af6eae57eaa2bdfd962b42524764af68075ea87370a2de920af5341e318f\"},\n]\n\n[[package]]\nname = \"idna\"\nversion = \"3.10\"\ndescription = \"Internationalized Domain Names in Applications (IDNA)\"\noptional = false\npython-versions = \">=3.6\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"idna-3.10-py3-none-any.whl\", hash = \"sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3\"},\n    {file = \"idna-3.10.tar.gz\", hash = \"sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9\"},\n]\n\n[package.extras]\nall = [\"flake8 (>=7.1.1)\", \"mypy (>=1.11.2)\", \"pytest (>=8.3.2)\", \"ruff (>=0.6.2)\"]\n\n[[package]]\nname = \"markdown-it-py\"\nversion = \"3.0.0\"\ndescription = \"Python port of markdown-it. Markdown parsing, done right!\"\noptional = false\npython-versions = \">=3.8\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"markdown-it-py-3.0.0.tar.gz\", hash = \"sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb\"},\n    {file = \"markdown_it_py-3.0.0-py3-none-any.whl\", hash = \"sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1\"},\n]\n\n[package.dependencies]\nmdurl = \">=0.1,<1.0\"\n\n[package.extras]\nbenchmarking = [\"psutil\", \"pytest\", \"pytest-benchmark\"]\ncode-style = [\"pre-commit (>=3.0,<4.0)\"]\ncompare = [\"commonmark (>=0.9,<1.0)\", \"markdown (>=3.4,<4.0)\", \"mistletoe (>=1.0,<2.0)\", \"mistune (>=2.0,<3.0)\", \"panflute (>=2.3,<3.0)\"]\nlinkify = [\"linkify-it-py (>=1,<3)\"]\nplugins = [\"mdit-py-plugins\"]\nprofiling = [\"gprof2dot\"]\nrtd = [\"jupyter_sphinx\", \"mdit-py-plugins\", \"myst-parser\", \"pyyaml\", \"sphinx\", \"sphinx-copybutton\", \"sphinx-design\", \"sphinx_book_theme\"]\ntesting = [\"coverage\", \"pytest\", \"pytest-cov\", \"pytest-regressions\"]\n\n[[package]]\nname = \"mcp\"\nversion = \"1.6.0\"\ndescription = \"Model Context Protocol SDK\"\noptional = false\npython-versions = \">=3.10\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"mcp-1.6.0-py3-none-any.whl\", hash = \"sha256:7bd24c6ea042dbec44c754f100984d186620d8b841ec30f1b19eda9b93a634d0\"},\n    {file = \"mcp-1.6.0.tar.gz\", hash = \"sha256:d9324876de2c5637369f43161cd71eebfd803df5a95e46225cab8d280e366723\"},\n]\n\n[package.dependencies]\nanyio = \">=4.5\"\nhttpx = \">=0.27\"\nhttpx-sse = \">=0.4\"\npydantic = \">=2.7.2,<3.0.0\"\npydantic-settings = \">=2.5.2\"\npython-dotenv = {version = \">=1.0.0\", optional = true, markers = \"extra == \\\"cli\\\"\"}\nsse-starlette = \">=1.6.1\"\nstarlette = \">=0.27\"\ntyper = {version = \">=0.12.4\", optional = true, markers = \"extra == \\\"cli\\\"\"}\nuvicorn = \">=0.23.1\"\n\n[package.extras]\ncli = [\"python-dotenv (>=1.0.0)\", \"typer (>=0.12.4)\"]\nrich = [\"rich (>=13.9.4)\"]\nws = [\"websockets (>=15.0.1)\"]\n\n[[package]]\nname = \"mdurl\"\nversion = \"0.1.2\"\ndescription = \"Markdown URL utilities\"\noptional = false\npython-versions = \">=3.7\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"mdurl-0.1.2-py3-none-any.whl\", hash = \"sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8\"},\n    {file = \"mdurl-0.1.2.tar.gz\", hash = \"sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba\"},\n]\n\n[[package]]\nname = \"nest-asyncio\"\nversion = \"1.6.0\"\ndescription = \"Patch asyncio to allow nested event loops\"\noptional = false\npython-versions = \">=3.5\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"nest_asyncio-1.6.0-py3-none-any.whl\", hash = \"sha256:87af6efd6b5e897c81050477ef65c62e2b2f35d51703cae01aff2905b1852e1c\"},\n    {file = \"nest_asyncio-1.6.0.tar.gz\", hash = \"sha256:6f172d5449aca15afd6c646851f4e31e02c598d553a667e38cafa997cfec55fe\"},\n]\n\n[[package]]\nname = \"pyaes\"\nversion = \"1.6.1\"\ndescription = \"Pure-Python Implementation of the AES block-cipher and common modes of operation\"\noptional = false\npython-versions = \"*\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"pyaes-1.6.1.tar.gz\", hash = \"sha256:02c1b1405c38d3c370b085fb952dd8bea3fadcee6411ad99f312cc129c536d8f\"},\n]\n\n[[package]]\nname = \"pyasn1\"\nversion = \"0.6.1\"\ndescription = \"Pure-Python implementation of ASN.1 types and DER/BER/CER codecs (X.208)\"\noptional = false\npython-versions = \">=3.8\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"pyasn1-0.6.1-py3-none-any.whl\", hash = \"sha256:0d632f46f2ba09143da3a8afe9e33fb6f92fa2320ab7e886e2d0f7672af84629\"},\n    {file = \"pyasn1-0.6.1.tar.gz\", hash = \"sha256:6f580d2bdd84365380830acf45550f2511469f673cb4a5ae3857a3170128b034\"},\n]\n\n[[package]]\nname = \"pydantic\"\nversion = \"2.11.3\"\ndescription = \"Data validation using Python type hints\"\noptional = false\npython-versions = \">=3.9\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"pydantic-2.11.3-py3-none-any.whl\", hash = \"sha256:a082753436a07f9ba1289c6ffa01cd93db3548776088aa917cc43b63f68fa60f\"},\n    {file = \"pydantic-2.11.3.tar.gz\", hash = \"sha256:7471657138c16adad9322fe3070c0116dd6c3ad8d649300e3cbdfe91f4db4ec3\"},\n]\n\n[package.dependencies]\nannotated-types = \">=0.6.0\"\npydantic-core = \"2.33.1\"\ntyping-extensions = \">=4.12.2\"\ntyping-inspection = \">=0.4.0\"\n\n[package.extras]\nemail = [\"email-validator (>=2.0.0)\"]\ntimezone = [\"tzdata ; python_version >= \\\"3.9\\\" and platform_system == \\\"Windows\\\"\"]\n\n[[package]]\nname = \"pydantic-core\"\nversion = \"2.33.1\"\ndescription = \"Core functionality for Pydantic validation and serialization\"\noptional = false\npython-versions = \">=3.9\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"pydantic_core-2.33.1-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:3077cfdb6125cc8dab61b155fdd714663e401f0e6883f9632118ec12cf42df26\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:8ffab8b2908d152e74862d276cf5017c81a2f3719f14e8e3e8d6b83fda863927\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5183e4f6a2d468787243ebcd70cf4098c247e60d73fb7d68d5bc1e1beaa0c4db\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:398a38d323f37714023be1e0285765f0a27243a8b1506b7b7de87b647b517e48\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:87d3776f0001b43acebfa86f8c64019c043b55cc5a6a2e313d728b5c95b46969\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c566dd9c5f63d22226409553531f89de0cac55397f2ab8d97d6f06cfce6d947e\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a0d5f3acc81452c56895e90643a625302bd6be351e7010664151cc55b7b97f89\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:d3a07fadec2a13274a8d861d3d37c61e97a816beae717efccaa4b36dfcaadcde\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:f99aeda58dce827f76963ee87a0ebe75e648c72ff9ba1174a253f6744f518f65\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-musllinux_1_1_armv7l.whl\", hash = \"sha256:902dbc832141aa0ec374f4310f1e4e7febeebc3256f00dc359a9ac3f264a45dc\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:fe44d56aa0b00d66640aa84a3cbe80b7a3ccdc6f0b1ca71090696a6d4777c091\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-win32.whl\", hash = \"sha256:ed3eb16d51257c763539bde21e011092f127a2202692afaeaccb50db55a31383\"},\n    {file = \"pydantic_core-2.33.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:694ad99a7f6718c1a498dc170ca430687a39894a60327f548e02a9c7ee4b6504\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:6e966fc3caaf9f1d96b349b0341c70c8d6573bf1bac7261f7b0ba88f96c56c24\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:bfd0adeee563d59c598ceabddf2c92eec77abcb3f4a391b19aa7366170bd9e30\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:91815221101ad3c6b507804178a7bb5cb7b2ead9ecd600041669c8d805ebd595\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:9fea9c1869bb4742d174a57b4700c6dadea951df8b06de40c2fedb4f02931c2e\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:1d20eb4861329bb2484c021b9d9a977566ab16d84000a57e28061151c62b349a\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:0fb935c5591573ae3201640579f30128ccc10739b45663f93c06796854405505\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c964fd24e6166420d18fb53996d8c9fd6eac9bf5ae3ec3d03015be4414ce497f\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:681d65e9011f7392db5aa002b7423cc442d6a673c635668c227c6c8d0e5a4f77\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:e100c52f7355a48413e2999bfb4e139d2977a904495441b374f3d4fb4a170961\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-musllinux_1_1_armv7l.whl\", hash = \"sha256:048831bd363490be79acdd3232f74a0e9951b11b2b4cc058aeb72b22fdc3abe1\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:bdc84017d28459c00db6f918a7272a5190bec3090058334e43a76afb279eac7c\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-win32.whl\", hash = \"sha256:32cd11c5914d1179df70406427097c7dcde19fddf1418c787540f4b730289896\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:2ea62419ba8c397e7da28a9170a16219d310d2cf4970dbc65c32faf20d828c83\"},\n    {file = \"pydantic_core-2.33.1-cp311-cp311-win_arm64.whl\", hash = \"sha256:fc903512177361e868bc1f5b80ac8c8a6e05fcdd574a5fb5ffeac5a9982b9e89\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:1293d7febb995e9d3ec3ea09caf1a26214eec45b0f29f6074abb004723fc1de8\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:99b56acd433386c8f20be5c4000786d1e7ca0523c8eefc995d14d79c7a081498\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:35a5ec3fa8c2fe6c53e1b2ccc2454398f95d5393ab398478f53e1afbbeb4d939\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:b172f7b9d2f3abc0efd12e3386f7e48b576ef309544ac3a63e5e9cdd2e24585d\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:9097b9f17f91eea659b9ec58148c0747ec354a42f7389b9d50701610d86f812e\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:cc77ec5b7e2118b152b0d886c7514a4653bcb58c6b1d760134a9fab915f777b3\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d5e3d15245b08fa4a84cefc6c9222e6f37c98111c8679fbd94aa145f9a0ae23d\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:ef99779001d7ac2e2461d8ab55d3373fe7315caefdbecd8ced75304ae5a6fc6b\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:fc6bf8869e193855e8d91d91f6bf59699a5cdfaa47a404e278e776dd7f168b39\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-musllinux_1_1_armv7l.whl\", hash = \"sha256:b1caa0bc2741b043db7823843e1bde8aaa58a55a58fda06083b0569f8b45693a\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:ec259f62538e8bf364903a7d0d0239447059f9434b284f5536e8402b7dd198db\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-win32.whl\", hash = \"sha256:e14f369c98a7c15772b9da98987f58e2b509a93235582838bd0d1d8c08b68fda\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:1c607801d85e2e123357b3893f82c97a42856192997b95b4d8325deb1cd0c5f4\"},\n    {file = \"pydantic_core-2.33.1-cp312-cp312-win_arm64.whl\", hash = \"sha256:8d13f0276806ee722e70a1c93da19748594f19ac4299c7e41237fc791d1861ea\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-macosx_10_12_x86_64.whl\", hash = \"sha256:70af6a21237b53d1fe7b9325b20e65cbf2f0a848cf77bed492b029139701e66a\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:282b3fe1bbbe5ae35224a0dbd05aed9ccabccd241e8e6b60370484234b456266\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4b315e596282bbb5822d0c7ee9d255595bd7506d1cb20c2911a4da0b970187d3\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:1dfae24cf9921875ca0ca6a8ecb4bb2f13c855794ed0d468d6abbec6e6dcd44a\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:6dd8ecfde08d8bfadaea669e83c63939af76f4cf5538a72597016edfa3fad516\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:2f593494876eae852dc98c43c6f260f45abdbfeec9e4324e31a481d948214764\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:948b73114f47fd7016088e5186d13faf5e1b2fe83f5e320e371f035557fd264d\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:e11f3864eb516af21b01e25fac915a82e9ddad3bb0fb9e95a246067398b435a4\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-musllinux_1_1_aarch64.whl\", hash = \"sha256:549150be302428b56fdad0c23c2741dcdb5572413776826c965619a25d9c6bde\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-musllinux_1_1_armv7l.whl\", hash = \"sha256:495bc156026efafd9ef2d82372bd38afce78ddd82bf28ef5276c469e57c0c83e\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:ec79de2a8680b1a67a07490bddf9636d5c2fab609ba8c57597e855fa5fa4dacd\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-win32.whl\", hash = \"sha256:ee12a7be1742f81b8a65b36c6921022301d466b82d80315d215c4c691724986f\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-win_amd64.whl\", hash = \"sha256:ede9b407e39949d2afc46385ce6bd6e11588660c26f80576c11c958e6647bc40\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313-win_arm64.whl\", hash = \"sha256:aa687a23d4b7871a00e03ca96a09cad0f28f443690d300500603bd0adba4b523\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313t-macosx_11_0_arm64.whl\", hash = \"sha256:401d7b76e1000d0dd5538e6381d28febdcacb097c8d340dde7d7fc6e13e9f95d\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7aeb055a42d734c0255c9e489ac67e75397d59c6fbe60d155851e9782f276a9c\"},\n    {file = \"pydantic_core-2.33.1-cp313-cp313t-win_amd64.whl\", hash = \"sha256:338ea9b73e6e109f15ab439e62cb3b78aa752c7fd9536794112e14bee02c8d18\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:5ab77f45d33d264de66e1884fca158bc920cb5e27fd0764a72f72f5756ae8bdb\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:e7aaba1b4b03aaea7bb59e1b5856d734be011d3e6d98f5bcaa98cb30f375f2ad\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:7fb66263e9ba8fea2aa85e1e5578980d127fb37d7f2e292773e7bc3a38fb0c7b\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:3f2648b9262607a7fb41d782cc263b48032ff7a03a835581abbf7a3bec62bcf5\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:723c5630c4259400818b4ad096735a829074601805d07f8cafc366d95786d331\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d100e3ae783d2167782391e0c1c7a20a31f55f8015f3293647544df3f9c67824\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:177d50460bc976a0369920b6c744d927b0ecb8606fb56858ff542560251b19e5\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:a3edde68d1a1f9af1273b2fe798997b33f90308fb6d44d8550c89fc6a3647cf6\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:a62c3c3ef6a7e2c45f7853b10b5bc4ddefd6ee3cd31024754a1a5842da7d598d\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-musllinux_1_1_armv7l.whl\", hash = \"sha256:c91dbb0ab683fa0cd64a6e81907c8ff41d6497c346890e26b23de7ee55353f96\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:9f466e8bf0a62dc43e068c12166281c2eca72121dd2adc1040f3aa1e21ef8599\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-win32.whl\", hash = \"sha256:ab0277cedb698749caada82e5d099dc9fed3f906a30d4c382d1a21725777a1e5\"},\n    {file = \"pydantic_core-2.33.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:5773da0ee2d17136b1f1c6fbde543398d452a6ad2a7b54ea1033e2daa739b8d2\"},\n    {file = \"pydantic_core-2.33.1-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:5c834f54f8f4640fd7e4b193f80eb25a0602bba9e19b3cd2fc7ffe8199f5ae02\"},\n    {file = \"pydantic_core-2.33.1-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:049e0de24cf23766f12cc5cc71d8abc07d4a9deb9061b334b62093dedc7cb068\"},\n    {file = \"pydantic_core-2.33.1-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1a28239037b3d6f16916a4c831a5a0eadf856bdd6d2e92c10a0da3a59eadcf3e\"},\n    {file = \"pydantic_core-2.33.1-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9d3da303ab5f378a268fa7d45f37d7d85c3ec19769f28d2cc0c61826a8de21fe\"},\n    {file = \"pydantic_core-2.33.1-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:25626fb37b3c543818c14821afe0fd3830bc327a43953bc88db924b68c5723f1\"},\n    {file = \"pydantic_core-2.33.1-pp310-pypy310_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:3ab2d36e20fbfcce8f02d73c33a8a7362980cff717926bbae030b93ae46b56c7\"},\n    {file = \"pydantic_core-2.33.1-pp310-pypy310_pp73-musllinux_1_1_armv7l.whl\", hash = \"sha256:2f9284e11c751b003fd4215ad92d325d92c9cb19ee6729ebd87e3250072cdcde\"},\n    {file = \"pydantic_core-2.33.1-pp310-pypy310_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:048c01eee07d37cbd066fc512b9d8b5ea88ceeb4e629ab94b3e56965ad655add\"},\n    {file = \"pydantic_core-2.33.1-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:5ccd429694cf26af7997595d627dd2637e7932214486f55b8a357edaac9dae8c\"},\n    {file = \"pydantic_core-2.33.1-pp311-pypy311_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:3a371dc00282c4b84246509a5ddc808e61b9864aa1eae9ecc92bb1268b82db4a\"},\n    {file = \"pydantic_core-2.33.1-pp311-pypy311_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:f59295ecc75a1788af8ba92f2e8c6eeaa5a94c22fc4d151e8d9638814f85c8fc\"},\n    {file = \"pydantic_core-2.33.1-pp311-pypy311_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:08530b8ac922003033f399128505f513e30ca770527cc8bbacf75a84fcc2c74b\"},\n    {file = \"pydantic_core-2.33.1-pp311-pypy311_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bae370459da6a5466978c0eacf90690cb57ec9d533f8e63e564ef3822bfa04fe\"},\n    {file = \"pydantic_core-2.33.1-pp311-pypy311_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:e3de2777e3b9f4d603112f78006f4ae0acb936e95f06da6cb1a45fbad6bdb4b5\"},\n    {file = \"pydantic_core-2.33.1-pp311-pypy311_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:3a64e81e8cba118e108d7126362ea30e021291b7805d47e4896e52c791be2761\"},\n    {file = \"pydantic_core-2.33.1-pp311-pypy311_pp73-musllinux_1_1_armv7l.whl\", hash = \"sha256:52928d8c1b6bda03cc6d811e8923dffc87a2d3c8b3bfd2ce16471c7147a24850\"},\n    {file = \"pydantic_core-2.33.1-pp311-pypy311_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:1b30d92c9412beb5ac6b10a3eb7ef92ccb14e3f2a8d7732e2d739f58b3aa7544\"},\n    {file = \"pydantic_core-2.33.1-pp311-pypy311_pp73-win_amd64.whl\", hash = \"sha256:f995719707e0e29f0f41a8aa3bcea6e761a36c9136104d3189eafb83f5cec5e5\"},\n    {file = \"pydantic_core-2.33.1-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:7edbc454a29fc6aeae1e1eecba4f07b63b8d76e76a748532233c4c167b4cb9ea\"},\n    {file = \"pydantic_core-2.33.1-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:ad05b683963f69a1d5d2c2bdab1274a31221ca737dbbceaa32bcb67359453cdd\"},\n    {file = \"pydantic_core-2.33.1-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:df6a94bf9452c6da9b5d76ed229a5683d0306ccb91cca8e1eea883189780d568\"},\n    {file = \"pydantic_core-2.33.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7965c13b3967909a09ecc91f21d09cfc4576bf78140b988904e94f130f188396\"},\n    {file = \"pydantic_core-2.33.1-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:3f1fdb790440a34f6ecf7679e1863b825cb5ffde858a9197f851168ed08371e5\"},\n    {file = \"pydantic_core-2.33.1-pp39-pypy39_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:5277aec8d879f8d05168fdd17ae811dd313b8ff894aeeaf7cd34ad28b4d77e33\"},\n    {file = \"pydantic_core-2.33.1-pp39-pypy39_pp73-musllinux_1_1_armv7l.whl\", hash = \"sha256:8ab581d3530611897d863d1a649fb0644b860286b4718db919bfd51ece41f10b\"},\n    {file = \"pydantic_core-2.33.1-pp39-pypy39_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:0483847fa9ad5e3412265c1bd72aad35235512d9ce9d27d81a56d935ef489672\"},\n    {file = \"pydantic_core-2.33.1-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:de9e06abe3cc5ec6a2d5f75bc99b0bdca4f5c719a5b34026f8c57efbdecd2ee3\"},\n    {file = \"pydantic_core-2.33.1.tar.gz\", hash = \"sha256:bcc9c6fdb0ced789245b02b7d6603e17d1563064ddcfc36f046b61c0c05dd9df\"},\n]\n\n[package.dependencies]\ntyping-extensions = \">=4.6.0,<4.7.0 || >4.7.0\"\n\n[[package]]\nname = \"pydantic-settings\"\nversion = \"2.9.0\"\ndescription = \"Settings management using Pydantic\"\noptional = false\npython-versions = \">=3.9\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"pydantic_settings-2.9.0-py3-none-any.whl\", hash = \"sha256:4937fe39355b1f1f1e429e6695d68ce42501340d642c000447e48b1d9d418dfd\"},\n    {file = \"pydantic_settings-2.9.0.tar.gz\", hash = \"sha256:24fd3fe19bc2c0eddeff91860dc5e303572b39fb70b1391c64955dd4d1875098\"},\n]\n\n[package.dependencies]\npydantic = \">=2.7.0\"\npython-dotenv = \">=0.21.0\"\ntyping-inspection = \">=0.4.0\"\n\n[package.extras]\naws-secrets-manager = [\"boto3 (>=1.35.0)\", \"boto3-stubs[secretsmanager]\"]\nazure-key-vault = [\"azure-identity (>=1.16.0)\", \"azure-keyvault-secrets (>=4.8.0)\"]\ngcp-secret-manager = [\"google-cloud-secret-manager (>=2.23.1)\"]\ntoml = [\"tomli (>=2.0.1)\"]\nyaml = [\"pyyaml (>=6.0.1)\"]\n\n[[package]]\nname = \"pygments\"\nversion = \"2.19.1\"\ndescription = \"Pygments is a syntax highlighting package written in Python.\"\noptional = false\npython-versions = \">=3.8\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"pygments-2.19.1-py3-none-any.whl\", hash = \"sha256:9ea1544ad55cecf4b8242fab6dd35a93bbce657034b0611ee383099054ab6d8c\"},\n    {file = \"pygments-2.19.1.tar.gz\", hash = \"sha256:61c16d2a8576dc0649d9f39e089b5f02bcd27fba10d8fb4dcc28173f7a45151f\"},\n]\n\n[package.extras]\nwindows-terminal = [\"colorama (>=0.4.6)\"]\n\n[[package]]\nname = \"python-dotenv\"\nversion = \"1.1.0\"\ndescription = \"Read key-value pairs from a .env file and set them as environment variables\"\noptional = false\npython-versions = \">=3.9\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"python_dotenv-1.1.0-py3-none-any.whl\", hash = \"sha256:d7c01d9e2293916c18baf562d95698754b0dbbb5e74d457c45d4f6561fb9d55d\"},\n    {file = \"python_dotenv-1.1.0.tar.gz\", hash = \"sha256:41f90bc6f5f177fb41f53e87666db362025010eb28f60a01c9143bfa33a2b2d5\"},\n]\n\n[package.extras]\ncli = [\"click (>=5.0)\"]\n\n[[package]]\nname = \"rich\"\nversion = \"14.0.0\"\ndescription = \"Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal\"\noptional = false\npython-versions = \">=3.8.0\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"rich-14.0.0-py3-none-any.whl\", hash = \"sha256:1c9491e1951aac09caffd42f448ee3d04e58923ffe14993f6e83068dc395d7e0\"},\n    {file = \"rich-14.0.0.tar.gz\", hash = \"sha256:82f1bc23a6a21ebca4ae0c45af9bdbc492ed20231dcb63f297d6d1021a9d5725\"},\n]\n\n[package.dependencies]\nmarkdown-it-py = \">=2.2.0\"\npygments = \">=2.13.0,<3.0.0\"\ntyping-extensions = {version = \">=4.0.0,<5.0\", markers = \"python_version < \\\"3.11\\\"\"}\n\n[package.extras]\njupyter = [\"ipywidgets (>=7.5.1,<9)\"]\n\n[[package]]\nname = \"rsa\"\nversion = \"4.2\"\ndescription = \"Pure-Python RSA implementation\"\noptional = false\npython-versions = \"*\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"rsa-4.2.tar.gz\", hash = \"sha256:aaefa4b84752e3e99bd8333a2e1e3e7a7da64614042bd66f775573424370108a\"},\n]\n\n[package.dependencies]\npyasn1 = \">=0.1.3\"\n\n[[package]]\nname = \"shellingham\"\nversion = \"1.5.4\"\ndescription = \"Tool to Detect Surrounding Shell\"\noptional = false\npython-versions = \">=3.7\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"shellingham-1.5.4-py2.py3-none-any.whl\", hash = \"sha256:7ecfff8f2fd72616f7481040475a65b2bf8af90a56c89140852d1120324e8686\"},\n    {file = \"shellingham-1.5.4.tar.gz\", hash = \"sha256:8dbca0739d487e5bd35ab3ca4b36e11c4078f3a234bfce294b0a0291363404de\"},\n]\n\n[[package]]\nname = \"sniffio\"\nversion = \"1.3.1\"\ndescription = \"Sniff out which async library your code is running under\"\noptional = false\npython-versions = \">=3.7\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"sniffio-1.3.1-py3-none-any.whl\", hash = \"sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2\"},\n    {file = \"sniffio-1.3.1.tar.gz\", hash = \"sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc\"},\n]\n\n[[package]]\nname = \"sse-starlette\"\nversion = \"2.2.1\"\ndescription = \"SSE plugin for Starlette\"\noptional = false\npython-versions = \">=3.9\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"sse_starlette-2.2.1-py3-none-any.whl\", hash = \"sha256:6410a3d3ba0c89e7675d4c273a301d64649c03a5ef1ca101f10b47f895fd0e99\"},\n    {file = \"sse_starlette-2.2.1.tar.gz\", hash = \"sha256:54470d5f19274aeed6b2d473430b08b4b379ea851d953b11d7f1c4a2c118b419\"},\n]\n\n[package.dependencies]\nanyio = \">=4.7.0\"\nstarlette = \">=0.41.3\"\n\n[package.extras]\nexamples = [\"fastapi\"]\nuvicorn = [\"uvicorn (>=0.34.0)\"]\n\n[[package]]\nname = \"starlette\"\nversion = \"0.46.2\"\ndescription = \"The little ASGI library that shines.\"\noptional = false\npython-versions = \">=3.9\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"starlette-0.46.2-py3-none-any.whl\", hash = \"sha256:595633ce89f8ffa71a015caed34a5b2dc1c0cdb3f0f1fbd1e69339cf2abeec35\"},\n    {file = \"starlette-0.46.2.tar.gz\", hash = \"sha256:7f7361f34eed179294600af672f565727419830b54b7b084efe44bb82d2fccd5\"},\n]\n\n[package.dependencies]\nanyio = \">=3.6.2,<5\"\n\n[package.extras]\nfull = [\"httpx (>=0.27.0,<0.29.0)\", \"itsdangerous\", \"jinja2\", \"python-multipart (>=0.0.18)\", \"pyyaml\"]\n\n[[package]]\nname = \"telethon\"\nversion = \"1.39.0\"\ndescription = \"Full-featured Telegram client library for Python 3\"\noptional = false\npython-versions = \">=3.5\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"Telethon-1.39.0-py3-none-any.whl\", hash = \"sha256:aa9f394b94be144799a6f6a93ab463867bc7c63503ede9631751940a98f6c703\"},\n    {file = \"telethon-1.39.0.tar.gz\", hash = \"sha256:35d4795d8c91deac515fb0bcb3723866b924de1c724e1d5c230460e96f284a63\"},\n]\n\n[package.dependencies]\npyaes = \"*\"\nrsa = \"*\"\n\n[package.extras]\ncryptg = [\"cryptg\"]\n\n[[package]]\nname = \"typer\"\nversion = \"0.15.2\"\ndescription = \"Typer, build great CLIs. Easy to code. Based on Python type hints.\"\noptional = false\npython-versions = \">=3.7\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"typer-0.15.2-py3-none-any.whl\", hash = \"sha256:46a499c6107d645a9c13f7ee46c5d5096cae6f5fc57dd11eccbbb9ae3e44ddfc\"},\n    {file = \"typer-0.15.2.tar.gz\", hash = \"sha256:ab2fab47533a813c49fe1f16b1a370fd5819099c00b119e0633df65f22144ba5\"},\n]\n\n[package.dependencies]\nclick = \">=8.0.0\"\nrich = \">=10.11.0\"\nshellingham = \">=1.3.0\"\ntyping-extensions = \">=3.7.4.3\"\n\n[[package]]\nname = \"typing-extensions\"\nversion = \"4.13.2\"\ndescription = \"Backported and Experimental Type Hints for Python 3.8+\"\noptional = false\npython-versions = \">=3.8\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"typing_extensions-4.13.2-py3-none-any.whl\", hash = \"sha256:a439e7c04b49fec3e5d3e2beaa21755cadbbdc391694e28ccdd36ca4a1408f8c\"},\n    {file = \"typing_extensions-4.13.2.tar.gz\", hash = \"sha256:e6c81219bd689f51865d9e372991c540bda33a0379d5573cddb9a3a23f7caaef\"},\n]\n\n[[package]]\nname = \"typing-inspection\"\nversion = \"0.4.0\"\ndescription = \"Runtime typing introspection tools\"\noptional = false\npython-versions = \">=3.9\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"typing_inspection-0.4.0-py3-none-any.whl\", hash = \"sha256:50e72559fcd2a6367a19f7a7e610e6afcb9fac940c650290eed893d61386832f\"},\n    {file = \"typing_inspection-0.4.0.tar.gz\", hash = \"sha256:9765c87de36671694a67904bf2c96e395be9c6439bb6c87b5142569dcdd65122\"},\n]\n\n[package.dependencies]\ntyping-extensions = \">=4.12.0\"\n\n[[package]]\nname = \"uvicorn\"\nversion = \"0.34.1\"\ndescription = \"The lightning-fast ASGI server.\"\noptional = false\npython-versions = \">=3.9\"\ngroups = [\"main\"]\nfiles = [\n    {file = \"uvicorn-0.34.1-py3-none-any.whl\", hash = \"sha256:984c3a8c7ca18ebaad15995ee7401179212c59521e67bfc390c07fa2b8d2e065\"},\n    {file = \"uvicorn-0.34.1.tar.gz\", hash = \"sha256:af981725fc4b7ffc5cb3b0e9eda6258a90c4b52cb2a83ce567ae0a7ae1757afc\"},\n]\n\n[package.dependencies]\nclick = \">=7.0\"\nh11 = \">=0.8\"\ntyping-extensions = {version = \">=4.0\", markers = \"python_version < \\\"3.11\\\"\"}\n\n[package.extras]\nstandard = [\"colorama (>=0.4) ; sys_platform == \\\"win32\\\"\", \"httptools (>=0.6.3)\", \"python-dotenv (>=0.13)\", \"pyyaml (>=5.1)\", \"uvloop (>=0.14.0,!=0.15.0,!=0.15.1) ; sys_platform != \\\"win32\\\" and sys_platform != \\\"cygwin\\\" and platform_python_implementation != \\\"PyPy\\\"\", \"watchfiles (>=0.13)\", \"websockets (>=10.4)\"]\n\n[metadata]\nlock-version = \"2.1\"\npython-versions = \">=3.10\"\ncontent-hash = \"15ec540426b145091f7177808a5c4939e281731ae172e4dad4b448fdc8e07592\"\n\n\n=== pyproject.toml ===\n[build-system]\nrequires = [\"setuptools>=42\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\npackage-mode = false\n\n[project]\nname = \"telegram-mcp\"\nversion = \"2.0.1\"\ndescription = \"Telegram integration for Claude via the Model Context Protocol\"\nreadme = \"README.md\"\nauthors = [\n    {name = \"chigwell\"},\n    {name = \"l1v0n1\"}\n]\nlicense = {text = \"Apache-2.0\"}\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\"\n]\nrequires-python = \">=3.10\"\ndependencies = [\n    \"dotenv>=0.9.9\",\n    \"httpx>=0.28.1\",\n    \"mcp[cli]>=1.4.1\",\n    \"nest-asyncio>=1.6.0\",\n    \"python-dotenv>=1.1.0\",\n    \"telethon>=1.39.0\"\n]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/chigwell/telegram-mcp\"\n\"Bug Tracker\" = \"https://github.com/chigwell/telegram-mcp/issues\"\n\n[tool.black]\nline-length = 99\ntarget-version = ['py311']\n\n[tool.flake8]\nignore = [\"E203\", \"E501\", \"W503\"]\nmax-line-length = 99\nmax-complexity = 10\nexclude = [\n    \".git\",\n    \"__pycache__\",\n    \".venv\",\n    \"build\",\n    \"dist\",\n    \"docs/source/conf.py\",\n]\n\n=== requirements.txt ===\ndotenv>=0.9.9\nhttpx>=0.28.1\nmcp[cli]>=1.4.1\nnest-asyncio>=1.6.0\npython-dotenv>=1.1.0\ntelethon>=1.39.0 "
}
