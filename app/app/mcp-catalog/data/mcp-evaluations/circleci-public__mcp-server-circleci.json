{
  "dxt_version": "0.1.0",
  "name": "circleci-public__mcp-server-circleci",
  "display_name": "mcp-server-circleci",
  "version": "1.0.0",
  "description": "A specialized server implementation for the Model Context Protocol (MCP) designed to integrate with CircleCI's development workflow. This project serves as a bridge between CircleCI's infrastructure and the Model Context Protocol, enabling enhanced AI-powered development experiences.",
  "author": {
    "name": "CircleCI-Public"
  },
  "server": {
    "command": "npx",
    "args": ["-y", "@circleci/mcp-server-circleci"],
    "env": {
      "CIRCLECI_TOKEN": "${user_config.circleci_token}",
      "CIRCLECI_BASE_URL": "${user_config.circleci_base_url}"
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "circleci_token": {
      "type": "string",
      "title": "CircleCI API Token",
      "description": "CircleCI API Token",
      "sensitive": true,
      "required": true
    },
    "circleci_base_url": {
      "type": "string",
      "title": "CircleCI Base URL",
      "description": "CircleCI Base URL",
      "default": "https://circleci.com",
      "required": false
    }
  },
  "readme": "# CircleCI MCP Server\n\n[![GitHub](https://img.shields.io/github/license/CircleCI-Public/mcp-server-circleci)](https://github.com/CircleCI-Public/mcp-server-circleci/blob/main/LICENSE)\n[![CircleCI](https://dl.circleci.com/status-badge/img/gh/CircleCI-Public/mcp-server-circleci/tree/main.svg?style=svg)](https://dl.circleci.com/status-badge/redirect/gh/CircleCI-Public/mcp-server-circleci/tree/main)\n[![npm](https://img.shields.io/npm/v/@circleci/mcp-server-circleci?logo=npm)](https://www.npmjs.com/package/@circleci/mcp-server-circleci)\n\nModel Context Protocol (MCP) is a [new, standardized protocol](https://modelcontextprotocol.io/introduction) for managing context between large language models (LLMs) and external systems. In this repository, we provide an MCP Server for [CircleCI](https://circleci.com).\n\nThis lets you use Cursor IDE, Windsurf, Copilot, or any MCP supported Client, to use natural language to accomplish things with CircleCI, e.g.:\n\n- `Find the latest failed pipeline on my branch and get logs`\n  https://github.com/CircleCI-Public/mcp-server-circleci/wiki#circleci-mcp-server-with-cursor-ide\n\nhttps://github.com/user-attachments/assets/3c765985-8827-442a-a8dc-5069e01edb74\n\n## Requirements\n\n- CircleCI Personal API Token - you can generate one through the CircleCI. [Learn more](https://circleci.com/docs/managing-api-tokens/) or [click here](https://app.circleci.com/settings/user/tokens) for quick access.\n\nFor NPX installation:\n\n- pnpm package manager - [Learn more](https://pnpm.io/installation)\n- Node.js >= v18.0.0\n\nFor Docker installation:\n\n- Docker - [Learn more](https://docs.docker.com/get-docker/)\n\n## Installation\n\n### Cursor\n\n#### Using NPX in a local MCP Server\n\nAdd the following to your cursor MCP config:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@circleci/mcp-server-circleci\"],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\n\n\n#### Using Docker in a local MCP Server\n\nAdd the following to your cursor MCP config:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"CIRCLECI_TOKEN\",\n        \"-e\",\n        \"CIRCLECI_BASE_URL\",\n        \"circleci:mcp-server-circleci\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\n\n#### Using a Self-Managed Remote MCP Server\n\nAdd the following to your cursor MCP config:\n\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"circleci-token\", \n      \"description\": \"CircleCI API Token\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"circleci-mcp-server-remote\": {\n      \"url\": \"http://your-circleci-remote-mcp-server-endpoint:8000/mcp\"\n    }\n  }\n}\n```\n\n### VS Code\n\n#### Using NPX in a local MCP Server\n\nTo install CircleCI MCP Server for VS Code in `.vscode/mcp.json`:\n\n```json\n{\n  // ðŸ’¡ Inputs are prompted on first server start, then stored securely by VS Code.\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"circleci-token\",\n      \"description\": \"CircleCI API Token\",\n      \"password\": true\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"circleci-base-url\",\n      \"description\": \"CircleCI Base URL\",\n      \"default\": \"https://circleci.com\"\n    }\n  ],\n  \"servers\": {\n    // https://github.com/ppl-ai/modelcontextprotocol/\n    \"circleci-mcp-server\": {\n      \"type\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@circleci/mcp-server-circleci\"],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"${input:circleci-token}\",\n        \"CIRCLECI_BASE_URL\": \"${input:circleci-base-url}\"\n      }\n    }\n  }\n}\n```\n\n#### Using Docker in a local MCP Server\n\nTo install CircleCI MCP Server for VS Code in `.vscode/mcp.json` using Docker:\n\n```json\n{\n  // ðŸ’¡ Inputs are prompted on first server start, then stored securely by VS Code.\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"circleci-token\",\n      \"description\": \"CircleCI API Token\",\n      \"password\": true\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"circleci-base-url\",\n      \"description\": \"CircleCI Base URL\",\n      \"default\": \"https://circleci.com\"\n    }\n  ],\n  \"servers\": {\n    // https://github.com/ppl-ai/modelcontextprotocol/\n    \"circleci-mcp-server\": {\n      \"type\": \"stdio\",\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"CIRCLECI_TOKEN\",\n        \"-e\",\n        \"CIRCLECI_BASE_URL\",\n        \"circleci:mcp-server-circleci\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"${input:circleci-token}\",\n        \"CIRCLECI_BASE_URL\": \"${input:circleci-base-url}\"\n      }\n    }\n  }\n}\n```\n\n#### Using a Self-Managed Remote MCP Server\n\nTo install CircleCI MCP Server for VS Code in `.vscode/mcp.json` using a self-managed remote MCP server:\n\n```json\n{\n  \"servers\": {\n    \"circleci-mcp-server-remote\": {\n      \"type\": \"sse\",\n      \"url\": \"http://your-circleci-remote-mcp-server-endpoint:8000/mcp\"\n    }\n  }\n}\n```\n\n### Claude Desktop\n\n#### Using NPX in a local MCP Server\n\nAdd the following to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@circleci/mcp-server-circleci\"],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\nTo locate this file:\n\nmacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n\nWindows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n[Claude Desktop setup](https://modelcontextprotocol.io/quickstart/user)\n\n\n#### Using Docker in a local MCP Server\n\nAdd the following to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"CIRCLECI_TOKEN\",\n        \"-e\",\n        \"CIRCLECI_BASE_URL\",\n        \"circleci:mcp-server-circleci\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\n\nTo find/create this file, first open your claude desktop settings. Then click on \"Developer\" in the left-hand bar of the Settings pane, and then click on \"Edit Config\"\n\nThis will create a configuration file at:\n\n- macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n- Windows: %APPDATA%\\Claude\\claude_desktop_config.json\n\nSee the guide below for more information on using MCP servers with Claude Desktop:\nhttps://modelcontextprotocol.io/quickstart/user\n\n#### Using a Self-Managed Remote MCP Server\n\nCreate a wrapper script first\n\nCreate a script file such as 'circleci-remote-mcp.sh':\n\n```bash\n#!/bin/bash\nexport CIRCLECI_TOKEN=\"your-circleci-token\"\nnpx mcp-remote http://your-circleci-remote-mcp-server-endpoint:8000/mcp --allow-http \n```\n\nMake it executable:\n\n```bash\nchmod +x circleci-remote-mcp.sh\n```\n\nThen add the following to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-remote-mcp-server\": {\n      \"command\": \"/full/path/to/circleci-remote-mcp.sh\"\n    }\n  }\n}\n```\n\nTo find/create this file, first open your Claude Desktop settings. Then click on \"Developer\" in the left-hand bar of the Settings pane, and then click on \"Edit Config\"\n\nThis will create a configuration file at:\n\n- macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n- Windows: %APPDATA%\\Claude\\claude_desktop_config.json\n\nSee the guide below for more information on using MCP servers with Claude Desktop:\nhttps://modelcontextprotocol.io/quickstart/user\n\n### Claude Code\n\n#### Using NPX in a local MCP Server\n\nAfter installing Claude Code, run the following command:\n\n```bash\nclaude mcp add circleci-mcp-server -e CIRCLECI_TOKEN=your-circleci-token -- npx -y @circleci/mcp-server-circleci\n```\n\n#### Using Docker in a local MCP Server\n\nAfter installing Claude Code, run the following command:\n\n```bash\nclaude mcp add circleci-mcp-server -e CIRCLECI_TOKEN=your-circleci-token -e CIRCLECI_BASE_URL=https://circleci.com -- docker run --rm -i -e CIRCLECI_TOKEN -e CIRCLECI_BASE_URL circleci:mcp-server-circleci\n```\n\nSee the guide below for more information on using MCP servers with Claude Code:\nhttps://docs.anthropic.com/en/docs/agents-and-tools/claude-code/tutorials#set-up-model-context-protocol-mcp\n\n#### Using Self-Managed Remote MCP Server\n\nAfter installing Claude Code, run the following command:\n\n```bash\nclaude mcp add circleci-mcp-server -e CIRCLECI_TOKEN=your-circleci-token -- npx mcp-remote http://your-circleci-remote-mcp-server-endpoint:8000/mcp --allow-http\n```\n\nSee the guide below for more information on using MCP servers with Claude Code:\nhttps://docs.anthropic.com/en/docs/agents-and-tools/claude-code/tutorials#set-up-model-context-protocol-mcp\n\n### Windsurf\n\n#### Using NPX in a local MCP Server\n\nAdd the following to your windsurf mcp_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@circleci/mcp-server-circleci\"],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\n\n#### Using Docker in a local MCP Server\n\nAdd the following to your windsurf mcp_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-mcp-server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"CIRCLECI_TOKEN\",\n        \"-e\",\n        \"CIRCLECI_BASE_URL\",\n        \"circleci:mcp-server-circleci\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"your-circleci-token\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      }\n    }\n  }\n}\n```\n\n#### Using Self-Managed Remote MCP Server\n\nAdd the following to your windsurf mcp_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://your-circleci-remote-mcp-server-endpoint:8000/mcp\",\n        \"--allow-http\"\n      ],\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\nSee the guide below for more information on using MCP servers with windsurf:\nhttps://docs.windsurf.com/windsurf/mcp\n\n### Installing via Smithery\n\nTo install CircleCI MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@CircleCI-Public/mcp-server-circleci):\n\n```bash\nnpx -y @smithery/cli install @CircleCI-Public/mcp-server-circleci --client claude\n```\n\n### Amazon Q Developer CLi\n\nMCP client configuration in Amazon Q Developer is stored in JSON format, in a file named mcp.json.\n\nAmazon Q Developer CLI supports two levels of MCP configuration:\n\nGlobal Configuration: ~/.aws/amazonq/mcp.json - Applies to all workspaces\n\nWorkspace Configuration: .amazonq/mcp.json - Specific to the current workspace\n\nBoth files are optional; neither, one, or both can exist. If both files exist, Amazon Q Developer reads MCP configuration from both and combines them, taking the union of their contents. If there is a conflict (i.e., a server defined in the global config is also present in the workspace config), a warning is displayed and only the server entry in the workspace config is used.\n\n#### Using NPX in a local MCP Server\n\nEdit your global configuration file ~/.aws/amazonq/mcp.json or create a new one in the current workspace .amazonq/mcp.json with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-local\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@circleci/mcp-server-circleci\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"YOUR_CIRCLECI_TOKEN\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      },\n      \"timeout\": 60000\n    }\n  }\n}\n```\n\n#### Using a Self-Managed Remote MCP Server\n\nCreate a wrapper script first\n\nCreate a script file such as 'circleci-remote-mcp.sh':\n\n```bash\n#!/bin/bash\nexport CIRCLECI_TOKEN=\"your-circleci-token\"\nnpx mcp-remote http://your-circleci-remote-mcp-server-endpoint:8000/mcp --allow-http\n```\n\nMake it executable:\n\n```bash\nchmod +x circleci-remote-mcp.sh\n```\n\nThen add it:\n\n```bash\nq mcp add --name circleci --command \"/full/path/to/circleci-remote-mcp.sh\"\n```\n\n### Amazon Q Developer in the IDE\n\n#### Using NPX in a local MCP Server\n\nEdit your global configuration file ~/.aws/amazonq/mcp.json or create a new one in the current workspace .amazonq/mcp.json with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"circleci-local\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@circleci/mcp-server-circleci\"\n      ],\n      \"env\": {\n        \"CIRCLECI_TOKEN\": \"YOUR_CIRCLECI_TOKEN\",\n        \"CIRCLECI_BASE_URL\": \"https://circleci.com\" // Optional - required for on-prem customers only\n      },\n      \"timeout\": 60000\n    }\n  }\n}\n```\n\n#### Using a Self-Managed Remote MCP Server\n\nCreate a wrapper script first\n\nCreate a script file such as 'circleci-remote-mcp.sh':\n\n```bash\n#!/bin/bash\nnpx mcp-remote http://your-circleci-remote-mcp-server-endpoint:8000/mcp --allow-http\n```\n\nMake it executable:\n\n```bash\nchmod +x circleci-remote-mcp.sh\n```\n\nThen add it to the Q Developer in your IDE:\n\nAccess the MCP configuration UI (https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/mcp-ide.html#mcp-ide-configuration-access-ui).\n\nChoose the plus (+) symbol.\n\nSelect the scope: global or local.\n\nIf you select global scope, the MCP server configuration is stored in ~/.aws/amazonq/mcp.json and available across all your projects. If you select local scope, the configuration is stored in .amazonq/mcp.json within your current project.\n\nIn the Name field, enter the name of the CircleCI remote MCP server (e.g. circleci-remote-mcp).\n\nSelect the transport protocol (stdio).\n\nIn the Command field, enter the shell command created previously that the MCP server will run when it initializes (e.g. /full/path/to/circleci-remote-mcp.sh).\n\nClick the Save button.\n\n# Features\n\n## Supported Tools\n\n- `get_build_failure_logs`\n\n  Retrieves detailed failure logs from CircleCI builds. This tool can be used in three ways:\n\n  1. Using Project Slug and Branch (Recommended Workflow):\n\n     - First, list your available projects:\n       - Use the list_followed_projects tool to get your projects\n       - Example: \"List my CircleCI projects\"\n       - Then choose the project, which has a projectSlug associated with it\n       - Example: \"Lets use my-project\"\n     - Then ask to retrieve the build failure logs for a specific branch:\n       - Example: \"Get build failures for my-project on the main branch\"\n\n  2. Using CircleCI URLs:\n\n     - Provide a failed job URL or pipeline URL directly\n     - Example: \"Get logs from https://app.circleci.com/pipelines/github/org/repo/123\"\n\n  3. Using Local Project Context:\n     - Works from your local workspace by providing:\n       - Workspace root path\n       - Git remote URL\n       - Branch name\n     - Example: \"Find the latest failed pipeline on my current branch\"\n\n  The tool returns formatted logs including:\n\n  - Job names\n  - Step-by-step execution details\n  - Failure messages and context\n\n  This is particularly useful for:\n\n  - Debugging failed builds\n  - Analyzing test failures\n  - Investigating deployment issues\n  - Quick access to build logs without leaving your IDE\n\n- `find_flaky_tests`\n\n  Identifies flaky tests in your CircleCI project by analyzing test execution history. This leverages the flaky test detection feature described here: https://circleci.com/blog/introducing-test-insights-with-flaky-test-detection/#flaky-test-detection\n\n  This tool can be used in three ways:\n\n  1. Using Project Slug (Recommended Workflow):\n\n     - First, list your available projects:\n       - Use the list_followed_projects tool to get your projects\n       - Example: \"List my CircleCI projects\"\n       - Then choose the project, which has a projectSlug associated with it\n       - Example: \"Lets use my-project\"\n     - Then ask to retrieve the flaky tests:\n       - Example: \"Get flaky tests for my-project\"\n\n  2. Using CircleCI Project URL:\n\n     - Provide the project URL directly from CircleCI\n     - Example: \"Find flaky tests in https://app.circleci.com/pipelines/github/org/repo\"\n\n  3. Using Local Project Context:\n     - Works from your local workspace by providing:\n       - Workspace root path\n       - Git remote URL\n     - Example: \"Find flaky tests in my current project\"\n\n  The tool can be used in two ways:\n  1. Using text output mode (default):\n     - This will return the flaky tests and their details in a text format\n  2. Using file output mode: (requires the `FILE_OUTPUT_DIRECTORY` environment variable to be set)\n     - This will create a directory with the flaky tests and their details\n\n  The tool returns detailed information about flaky tests, including:\n\n  - Test names and file locations\n  - Failure messages and contexts\n\n  This helps you:\n\n  - Identify unreliable tests in your test suite\n  - Get detailed context about test failures\n  - Make data-driven decisions about test improvements\n\n- `get_latest_pipeline_status`\n\n  Retrieves the status of the latest pipeline for a given branch. This tool can be used in three ways:\n\n  1. Using Project Slug and Branch (Recommended Workflow):\n\n     - First, list your available projects:\n       - Use the list_followed_projects tool to get your projects\n       - Example: \"List my CircleCI projects\"\n       - Then choose the project, which has a projectSlug associated with it\n       - Example: \"Lets use my-project\"\n     - Then ask to retrieve the latest pipeline status for a specific branch:\n       - Example: \"Get the status of the latest pipeline for my-project on the main branch\"\n\n  2. Using CircleCI Project URL:\n\n     - Provide the project URL directly from CircleCI\n     - Example: \"Get the status of the latest pipeline for https://app.circleci.com/pipelines/github/org/repo\"\n\n  3. Using Local Project Context:\n     - Works from your local workspace by providing:\n       - Workspace root path\n       - Git remote URL\n       - Branch name\n     - Example: \"Get the status of the latest pipeline for my current project\"\n\n  The tool returns a formatted status of the latest pipeline:\n\n  - Workflow names and their current status\n  - Duration of each workflow\n  - Creation and completion timestamps\n  - Overall pipeline health\n\n  Example output:\n\n  ```\n  ---\n  Workflow: build\n  Status: success\n  Duration: 5 minutes\n  Created: 4/20/2025, 10:15:30 AM\n  Stopped: 4/20/2025, 10:20:45 AM\n  ---\n  Workflow: test\n  Status: running\n  Duration: unknown\n  Created: 4/20/2025, 10:21:00 AM\n  Stopped: in progress\n  ```\n\n  This is particularly useful for:\n\n  - Checking the status of the latest pipeline\n  - Getting the status of the latest pipeline for a specific branch\n  - Quickly checking the status of the latest pipeline without leaving your IDE\n\n- `get_job_test_results`\n\n  Retrieves test metadata for CircleCI jobs, allowing you to analyze test results without leaving your IDE. This tool can be used in three ways:\n\n  1. Using Project Slug and Branch (Recommended Workflow):\n\n     - First, list your available projects:\n       - Use the list_followed_projects tool to get your projects\n       - Example: \"List my CircleCI projects\"\n       - Then choose the project, which has a projectSlug associated with it\n       - Example: \"Lets use my-project\"\n     - Then ask to retrieve the test results for a specific branch:\n       - Example: \"Get test results for my-project on the main branch\"\n\n  2. Using CircleCI URL:\n\n     - Provide a CircleCI URL in any of these formats:\n       - Job URL: \"https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def/jobs/789\"\n       - Workflow URL: \"https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def\"\n       - Pipeline URL: \"https://app.circleci.com/pipelines/github/org/repo/123\"\n     - Example: \"Get test results for https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def\"\n\n  3. Using Local Project Context:\n     - Works from your local workspace by providing:\n       - Workspace root path\n       - Git remote URL\n       - Branch name\n     - Example: \"Get test results for my current project on the main branch\"\n\n  The tool returns detailed test result information:\n\n  - Summary of all tests (total, successful, failed)\n  - Detailed information about failed tests including:\n    - Test name and class\n    - File location\n    - Error messages\n    - Runtime duration\n  - List of successful tests with timing information\n  - Filter by tests result\n\n  This is particularly useful for:\n\n  - Quickly analyzing test failures without visiting the CircleCI web UI\n  - Identifying patterns in test failures\n  - Finding slow tests that might need optimization\n  - Checking test coverage across your project\n  - Troubleshooting flaky tests\n\n  Note: The tool requires that test metadata is properly configured in your CircleCI config. For more information on setting up test metadata collection, see:\n  https://circleci.com/docs/collect-test-data/\n\n- `config_helper`\n\n  Assists with CircleCI configuration tasks by providing guidance and validation. This tool helps you:\n\n  1. Validate CircleCI Config:\n     - Checks your .circleci/config.yml for syntax and semantic errors\n     - Example: \"Validate my CircleCI config\"\n\n  The tool provides:\n\n  - Detailed validation results\n  - Configuration recommendations\n\n  This helps you:\n\n  - Catch configuration errors before pushing\n  - Learn CircleCI configuration best practices\n  - Troubleshoot configuration issues\n  - Implement CircleCI features correctly\n\n- `create_prompt_template`\n\n  Helps generate structured prompt templates for AI-enabled applications based on feature requirements. This tool:\n\n  1. Converts Feature Requirements to Structured Prompts:\n     - Transforms user requirements into optimized prompt templates\n     - Example: \"Create a prompt template for generating bedtime stories by age and topic\"\n\n  The tool provides:\n\n  - A structured prompt template\n  - A context schema defining required input parameters\n\n  This helps you:\n\n  - Create effective prompts for AI applications\n  - Standardize input parameters for consistent results\n  - Build robust AI-powered features\n\n- `recommend_prompt_template_tests`\n\n  Generates test cases for prompt templates to ensure they produce expected results. This tool:\n\n  1. Provides Test Cases for Prompt Templates:\n     - Creates diverse test scenarios based on your prompt template and context schema\n     - Example: \"Generate tests for my bedtime story prompt template\"\n\n  The tool provides:\n\n  - An array of recommended test cases\n  - Various parameter combinations to test template robustness\n\n  This helps you:\n\n  - Validate prompt template functionality\n  - Ensure consistent AI responses across inputs\n  - Identify edge cases and potential issues\n  - Improve overall AI application quality\n\n- `list_followed_projects`\n\n  Lists all projects that the user is following on CircleCI. This tool:\n\n  1. Retrieves and Displays Projects:\n     - Shows all projects the user has access to and is following\n     - Provides the project name and projectSlug for each entry\n     - Example: \"List my CircleCI projects\"\n\n  The tool returns a formatted list of projects, example output:\n\n  ```\n  Projects followed:\n  1. my-project (projectSlug: gh/organization/my-project)\n  2. another-project (projectSlug: gh/organization/another-project)\n  ```\n\n  This is particularly useful for:\n\n  - Identifying which CircleCI projects are available to you\n  - Obtaining the projectSlug needed for other CircleCI tools\n  - Selecting a project for subsequent operations\n\n  Note: The projectSlug (not the project name) is required for many other CircleCI tools, and will be used for those tool calls after a project is selected.\n\n- `run_pipeline`\n\n  Triggers a pipeline to run. This tool can be used in three ways:\n\n  1. Using Project Slug and Branch (Recommended Workflow):\n\n     - First, list your available projects:\n       - Use the list_followed_projects tool to get your projects\n       - Example: \"List my CircleCI projects\"\n       - Then choose the project, which has a projectSlug associated with it\n       - Example: \"Lets use my-project\"\n     - Then ask to run the pipeline for a specific branch:\n       - Example: \"Run the pipeline for my-project on the main branch\"\n\n  2. Using CircleCI URL:\n\n     - Provide a CircleCI URL in any of these formats:\n       - Job URL: \"https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def/jobs/789\"\n       - Workflow URL: \"https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def\"\n       - Pipeline URL: \"https://app.circleci.com/pipelines/github/org/repo/123\"\n       - Project URL with branch: \"https://app.circleci.com/projects/github/org/repo?branch=main\"\n     - Example: \"Run the pipeline for https://app.circleci.com/pipelines/github/org/repo/123/workflows/abc-def\"\n\n  3. Using Local Project Context:\n     - Works from your local workspace by providing:\n       - Workspace root path\n       - Git remote URL\n       - Branch name\n     - Example: \"Run the pipeline for my current project on the main branch\"\n\n  The tool returns a link to monitor the pipeline execution.\n\n  This is particularly useful for:\n\n  - Quickly running pipelines without visiting the CircleCI web UI\n  - Running pipelines from a specific branch\n\n- `run_rollback_pipeline`\n\n  This tool allows for triggering a rollback for a project.\n  It requires the following parameters;\n\n  - `project_id` - The ID of the CircleCI project (UUID)\n  - `environmentName` - The environment name\n  - `componentName` - The component name\n  - `currentVersion` - The current version\n  - `targetVersion` - The target version\n  - `namespace` - The namespace of the component\n  - `reason` - The reason for the rollback (optional)\n  - `parameters` - The extra parameters for the rollback pipeline (optional)\n\n  If not all the parameters are provided right away, the toll will make use of other tools to try and retrieve all the required info.\n  The rollback can be performed in two different way, depending on whether a rollback pipeline definition has been configured for the project:\n\n  - Pipeline Rollback: will trigger the rollback pipeline.\n  - Workflow Rerun: will trigger the rerun of a previous workflow.\n\n  A typical interaction with this tool will follow this pattern:\n\n  1. Project Selection - Retrieve list of followed projects and prompt user to select one\n  2. Environment Selection - List available environments and select target (auto-select if only one exists)\n  3. Component Selection - List available components and select target (auto-select if only one exists)\n  4. Version Selection - Display available versions, user selects non-live version for rollback\n  5. Rollback Mode Detection - Check if rollback pipeline is configured for the selected project\n  6. Execute Rollback - Two options available:\n    - Pipeline Rollback: Prompt for optional reason, execute rollback pipeline\n    - Workflow Rerun**: Rerun workflow using selected version's workflow ID\n  7. Confirmation - Summarize rollback request and confirm before execution\n\n- `rerun_workflow`\n\n  Reruns a workflow from its start or from the failed job.\n\n  The tool returns the ID of the newly-created workflow, and a link to monitor the new workflow.\n\n  This is particularly useful for:\n\n  - Quickly rerunning a workflow from its start or from the failed job without visiting the CircleCI web UI\n\n- `analyze_diff`\n\n  Analyzes git diffs against cursor rules to identify rule violations.\n\n  This tool can be used by providing:\n\n  1. Git Diff Content:\n\n     - Staged changes: `git diff --cached`\n     - Unstaged changes: `git diff`\n     - All changes: `git diff HEAD`\n     - Example: \"Analyze my staged changes against the cursor rules\"\n\n  2. Repository Rules:\n     - Rules from `.cursorrules` file in your repository root\n     - Rules from `.cursor/rules` directory\n     - Multiple rule files combined with `---` separator\n     - Example: \"Check my diff against the TypeScript coding standards\"\n\n  The tool provides:\n\n  - Detailed violation reports with confidence scores\n  - Specific explanations for each rule violation\n\n  Example usage scenarios:\n\n  - \"Analyze my staged changes for any rule violations\"\n  - \"Check my unstaged changes against rules\"\n\n  This is particularly useful for:\n\n  - Pre-commit code quality checks\n  - Ensuring consistency with team coding standards\n  - Catching rule violations before code review\n\n  The tool integrates with your existing cursor rules setup and provides immediate feedback on code quality, helping you catch issues early in the development process.\n\n- `list_component_versions`\n\n  Lists all versions for a specific CircleCI component in an environment. This tool retrieves version history including deployment status, commit information, and timestamps for a component.\n  The tool will prompt the user to select the component and environment from a list if not provided.\n\n  Example output:\n\n  ```\n  Versions for the component: {\n    \"items\": [\n      {\n        \"name\": \"v1.2.0\",\n        \"namespace\": \"production\",\n        \"environment_id\": \"env-456def\",\n        \"is_live\": true,\n        \"pipeline_id\": \"12345678-1234-1234-1234-123456789abc\",\n        \"workflow_id\": \"87654321-4321-4321-4321-cba987654321\",\n        \"job_id\": \"11111111-1111-1111-1111-111111111111\",\n        \"job_number\": 42,\n        \"last_deployed_at\": \"2023-01-01T00:00:00Z\"\n      },\n      {\n        \"name\": \"v1.1.0\",\n        \"namespace\": \"production\", \n        \"environment_id\": \"env-456def\",\n        \"is_live\": false,\n        \"pipeline_id\": \"22222222-2222-2222-2222-222222222222\",\n        \"workflow_id\": \"33333333-3333-3333-3333-333333333333\",\n        \"job_id\": \"44444444-4444-4444-4444-444444444444\",\n        \"job_number\": 38,\n        \"last_deployed_at\": \"2023-01-03T00:00:00Z\"\n      }\n    ]\n  }\n  ```\n\n  This is useful for:\n\n  - Identifying which versions were deployed for a component\n  - Finding the currently live version in an environment\n  - Selecting target versions for rollback operations\n  - Getting deployment details like pipeline, workflow, and job information\n  - Listing all environments\n  - Listing all components\n\n- `download_usage_api_data`\n\n  Downloads usage data from the CircleCI Usage API for a given organization. Accepts flexible, natural language date input (e.g., \"March 2025\" or \"last month\"). Cloud-only feature.\n\n  This tool can be used in one of two ways:\n\n  1) Start a new export job for a date range (max 32 days) by providing:\n  - orgId: Organization ID\n  - startDate: Start date (YYYY-MM-DD or natural language)\n  - endDate: End date (YYYY-MM-DD or natural language)\n  - outputDir: Directory to save the CSV file\n\n  2) Check/download an existing export job by providing:\n  - orgId: Organization ID\n  - jobId: Usage export job ID\n  - outputDir: Directory to save the CSV file\n\n  The tool provides:\n  - A csv containing the CircleCI Usage API data from the specified time frame\n\n  This is useful for:\n  - Downloading detailed CircleCI usage data for reporting or analysis\n  - Feeding usage data into the `find_underused_resource_classes` tool\n\n  Example usage scenarios:\n- Scenario 1:\n  1. \"Download usage data for org abc123 from June into ~/Downloads\"\n  2. \"Check status\"\n\n- Scenario 2:\n  1. \"Download usage data for org abc123 for last month to my Downloads folder\"\n  2. \"Check usage download status\"\n  3. \"Check status again\"\n\n- Scenario 3:\n  1. \"Check my usage export job usage-job-9f2d7c and download it if ready\"\n\n- `find_underused_resource_classes`\n\n  Analyzes a CircleCI usage data CSV file to find jobs/resource classes with average or max CPU/RAM usage below a given threshold (default 40%).\n\n  This tool can be used by providing:\n  - A csv containing CircleCI Usage API data, which can be obtained by using the `download_usage_api_data` tool.\n\n  The tool provides:\n  - A markdown list of all jobs that are below the threshold, delineated by project and workflow.\n\n  This is useful for:\n  - Finding jobs that are using less than half of the compute provided to them on average\n  - Generating a list of low hanging cost optimizations\n\n  Example usage scenarios:\n  - Scenario 1:\n    1. \"Find underused resource classes in the file you just downloaded\"\n  - Scenario 2:\n    1. \"Find underused resource classes in ~/Downloads/usage-data-2025-06-01_2025-06-30.csv\"\n  - Scenario 3:\n    1. \"Analyze /Users/you/Projects/acme/usage-data-job-9f2d7c.csv with threshold 30\"\n\n# Development\n\n## Getting Started\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/CircleCI-Public/mcp-server-circleci.git\n   cd mcp-server-circleci\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   pnpm install\n   ```\n\n3. Build the project:\n   ```bash\n   pnpm build\n   ```\n\n## Building Docker Container\n\nYou can build the Docker container locally using:\n\n```bash\ndocker build -t circleci:mcp-server-circleci .\n```\n\nThis will create a Docker image tagged as `circleci:mcp-server-circleci` that you can use with any MCP client.\n\nTo run the container locally:\n\n```bash\ndocker run --rm -i -e CIRCLECI_TOKEN=your-circleci-token -e CIRCLECI_BASE_URL=https://circleci.com circleci:mcp-server-circleci\n```\n\nTo run the container as a self-managed remote MCP server you need to add the environment variable `start=remote` to the docker run command. You can also define the port to use with the environment variable `port=<port>` or else the default port `8000` will be used:\n\n```bash\ndocker run --rm -i -e CIRCLECI_TOKEN=your-circleci-token -e CIRCLECI_BASE_URL=https://circleci.com circleci:mcp-server-circleci -e start=remote -e port=8000\n```\n\n## Development with MCP Inspector\n\nThe easiest way to iterate on the MCP Server is using the MCP inspector. You can learn more about the MCP inspector at https://modelcontextprotocol.io/docs/tools/inspector\n\n1. Start the development server:\n\n   ```bash\n   pnpm watch # Keep this running in one terminal\n   ```\n\n2. In a separate terminal, launch the inspector:\n\n   ```bash\n   pnpm inspector\n   ```\n\n3. Configure the environment:\n   - Add your `CIRCLECI_TOKEN` to the Environment Variables section in the inspector UI\n   - The token needs read access to your CircleCI projects\n   - Optionally you can set your CircleCI Base URL. Defaults to `https//circleci.com`\n\n## Testing\n\n- Run the test suite:\n\n  ```bash\n  pnpm test\n  ```\n\n- Run tests in watch mode during development:\n  ```bash\n  pnpm test:watch\n  ```\n\nFor more detailed contribution guidelines, see [CONTRIBUTING.md](CONTRIBUTING.md)\n",
  "category": "AI Tools",
  "quality_score": 69,
  "archestra_config": {
    "client_config_permutations": {
      "circleci-mcp-server-circleci-npx-hardcoded-env": {
        "command": "npx",
        "args": ["-y", "@circleci/mcp-server-circleci"],
        "env": {
          "CIRCLECI_TOKEN": "your-circleci-token",
          "CIRCLECI_BASE_URL": "https://circleci.com"
        }
      },
      "circleci-mcp-server-circleci-docker-hardcoded-env": {
        "command": "docker",
        "args": [
          "run",
          "--rm",
          "-i",
          "-e",
          "CIRCLECI_TOKEN",
          "-e",
          "CIRCLECI_BASE_URL",
          "circleci:mcp-server-circleci"
        ],
        "env": {
          "CIRCLECI_TOKEN": "your-circleci-token",
          "CIRCLECI_BASE_URL": "https://circleci.com"
        }
      },
      "circleci-mcp-server-circleci-npx-stdio-input-env": {
        "command": "npx",
        "args": ["-y", "@circleci/mcp-server-circleci"],
        "env": {
          "CIRCLECI_TOKEN": "${input:circleci-token}",
          "CIRCLECI_BASE_URL": "${input:circleci-base-url}"
        }
      },
      "circleci-mcp-server-circleci-docker-stdio-input-env": {
        "command": "docker",
        "args": [
          "run",
          "--rm",
          "-i",
          "-e",
          "CIRCLECI_TOKEN",
          "-e",
          "CIRCLECI_BASE_URL",
          "circleci:mcp-server-circleci"
        ],
        "env": {
          "CIRCLECI_TOKEN": "${input:circleci-token}",
          "CIRCLECI_BASE_URL": "${input:circleci-base-url}"
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "CircleCI-Public",
    "repo": "mcp-server-circleci",
    "url": "https://github.com/CircleCI-Public/mcp-server-circleci",
    "name": "circleci-public__mcp-server-circleci",
    "path": null,
    "stars": 63,
    "contributors": 18,
    "issues": 12,
    "releases": false,
    "ci_cd": false,
    "latest_commit_hash": "070d7e708c40ae18308a1719b623b2dfdc6535dd"
  },
  "programming_language": "TypeScript",
  "framework": null,
  "last_scraped_at": "2025-09-07T22:15:44.409Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": true,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "@modelcontextprotocol/sdk",
      "importance": 10
    },
    {
      "name": "express",
      "importance": 8
    },
    {
      "name": "parse-github-url",
      "importance": 4
    },
    {
      "name": "zod",
      "importance": 7
    },
    {
      "name": "zod-to-json-schema",
      "importance": 5
    }
  ],
  "raw_dependencies": "=== package.json ===\n{\n  \"name\": \"@circleci/mcp-server-circleci\",\n  \"version\": \"0.14.0\",\n  \"description\": \"A Model Context Protocol (MCP) server implementation for CircleCI, enabling natural language interactions with CircleCI functionality through MCP-enabled clients\",\n  \"type\": \"module\",\n  \"access\": \"public\",\n  \"license\": \"Apache-2.0\",\n  \"homepage\": \"https://github.com/CircleCI-Public/mcp-server-circleci/\",\n  \"bugs\": \"https://github.com/CircleCI-Public/mcp-server-circleci/issues\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/CircleCI-Public/mcp-server-circleci.git\"\n  },\n  \"bin\": {\n    \"mcp-server-circleci\": \"./dist/index.js\"\n  },\n  \"files\": [\n    \"dist\",\n    \"CHANGELOG.md\"\n  ],\n  \"packageManager\": \"pnpm@10.7.0\",\n  \"scripts\": {\n    \"build\": \"rm -rf dist && tsc && shx chmod +x dist/*.js\",\n    \"watch\": \"nodemon --watch . --ext ts,json --exec pnpm run build\",\n    \"inspector\": \"npx @modelcontextprotocol/inspector@0.9 node ./dist/index.js\",\n    \"build:inspector\": \"pnpm run build && pnpm run inspector\",\n    \"create-tool\": \"node ./scripts/create-tool.js\",\n    \"tsx\": \"tsx\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"lint\": \"eslint .\",\n    \"lint:fix\": \"eslint . --fix\",\n    \"prettier\": \"prettier --write \\\"**/*.{ts,js,json}\\\"\",\n    \"test\": \"vitest\",\n    \"test:run\": \"vitest run\",\n    \"prepublishOnly\": \"pnpm run build && pnpm run test:run\",\n    \"bump:patch\": \"pnpm version patch --no-git-tag-version\",\n    \"bump:minor\": \"pnpm version minor --no-git-tag-version\",\n    \"bump:major\": \"pnpm version major --no-git-tag-version\"\n  },\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^1.15.1\",\n    \"chrono-node\": \"2.8.3\",\n    \"csv-parse\": \"6.0.0\",\n    \"date-fns\": \"4.1.0\",\n    \"express\": \"^4.19.2\",\n    \"parse-github-url\": \"^1.0.3\",\n    \"zod\": \"^3.24.2\",\n    \"zod-to-json-schema\": \"^3.24.3\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.21.0\",\n    \"@types/express\": \"5.0.3\",\n    \"@types/node\": \"^22\",\n    \"@types/parse-github-url\": \"^1.0.3\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.25.0\",\n    \"@typescript-eslint/parser\": \"^8.25.0\",\n    \"eslint\": \"^9.21.0\",\n    \"eslint-config-prettier\": \"^10.0.2\",\n    \"eslint-plugin-prettier\": \"^5.2.3\",\n    \"nodemon\": \"^3.1.9\",\n    \"prettier\": \"^3.5.2\",\n    \"shx\": \"^0.4.0\",\n    \"tsx\": \"^4.19.3\",\n    \"typescript\": \"^5.6.2\",\n    \"typescript-eslint\": \"^8.28.0\",\n    \"vitest\": \"^3.1.1\"\n  },\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  }\n}\n"
}
