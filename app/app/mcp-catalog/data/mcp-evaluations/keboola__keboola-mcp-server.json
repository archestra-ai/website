{
  "dxt_version": "0.1.0",
  "name": "keboola__keboola-mcp-server",
  "display_name": "keboola-mcp-server",
  "version": "1.0.0",
  "description": "Model Context Protocol (MCP) Server for the Keboola Platform",
  "author": {
    "name": "keboola"
  },
  "server": {
    "type": "python",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "unknown",
      "args": [],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "[![Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/keboola/mcp-server)\n[![smithery badge](https://smithery.ai/badge/keboola-mcp-server)](https://smithery.ai/server/keboola-mcp-server)\n\n\n# Keboola MCP Server\n\n> Connect your AI agents, MCP clients (**Cursor**, **Claude**, **Windsurf**, **VS Code** ...) and other AI assistants to Keboola. Expose data, transformations, SQL queries, and job triggers—no glue code required. Deliver the right data to agents when and where they need it.\n\n## Overview\n\nKeboola MCP Server is an open-source bridge between your Keboola project and modern AI tools. It turns Keboola features—like storage access, SQL transformations, and job triggers—into callable tools for Claude, Cursor, CrewAI, LangChain, Amazon Q, and more.\n\n## 🚀 Quick Start: Remote MCP Server (Easiest Way)\n\nThe easiest way to use Keboola MCP Server is through our **Remote MCP Server**. This hosted solution eliminates the need for local setup, configuration, or installation.\n\n### What is the Remote MCP Server?\n\nOur remote server is hosted on every multi-tenant Keboola stack and supports OAuth authentication. You can connect to it from any AI assistant that supports remote SSE connection and OAuth authentication.\n\n### How to Connect\n\n1. **Get your remote server URL**: Navigate to your Keboola Project Settings → `MCP Server` tab\n2. **Copy the server URL**: It will look like `https://mcp.<YOUR_REGION>.keboola.com/sse`\n3. **Configure your AI assistant**: Paste the URL into your AI assistant's MCP settings\n4. **Authenticate**: You'll be prompted to authenticate with your Keboola account and select your project\n\n### Supported Clients\n\n- **[Cursor](https://cursor.com)**: Use the \"Install In Cursor\" button in your project's MCP Server settings or click\n  this button\n  [![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/install-mcp?name=keboola&config=eyJ1cmwiOiJodHRwczovL21jcC51cy1lYXN0NC5nY3Aua2Vib29sYS5jb20vc3NlIn0%3D)\n- **[Claude Desktop](https://claude.ai)**: Add the integration via Settings → Integrations\n- **[Windsurf](https://windsurf.ai)**: Configure with the remote server URL\n- **[Make](https://make.com)**: Configure with the remote server URL\n- **Other MCP clients**: Configure with the remote server URL\n\nFor detailed setup instructions and region-specific URLs, see our [Remote Server Setup documentation](https://help.keboola.com/ai/mcp-server/#remote-server-setup).\n\n---\n\n## Features\n\n- **Storage**: Query tables directly and manage table or bucket descriptions\n- **Components**: Create, List and inspect extractors, writers, data apps, and transformation configurations\n- **SQL**: Create SQL transformations with natural language\n- **Jobs**: Run components and transformations, and retrieve job execution details\n- **Metadata**: Search, read, and update project documentation and object metadata using natural language\n\n## Preparations\n\nMake sure you have:\n\n- [ ] Python 3.10+ installed\n- [ ] Access to a Keboola project with admin rights\n- [ ] Your preferred MCP client (Claude, Cursor, etc.)\n\n**Note**: Make sure you have `uv` installed. The MCP client will use it to automatically download and run the Keboola MCP Server.\n**Installing uv**:\n\n*macOS/Linux*:\n\n```bash\n#if homebrew is not installed on your machine use:\n# /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install using Homebrew\nbrew install uv\n```\n\n*Windows*:\n\n```powershell\n# Using the installer script\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# Or using pip\npip install uv\n\n# Or using winget\nwinget install --id=astral-sh.uv -e\n```\n\nFor more installation options, see the [official uv documentation](https://docs.astral.sh/uv/getting-started/installation/).\n\nBefore setting up the MCP server, you need three key pieces of information:\n\n### KBC_STORAGE_TOKEN\n\nThis is your authentication token for Keboola:\n\nFor instructions on how to create and manage Storage API tokens, refer to the [official Keboola documentation](https://help.keboola.com/management/project/tokens/).\n\n**Note**: If you want the MCP server to have limited access, use custom storage token, if you want the MCP to access everything in your project, use the master token.\n\n### KBC_WORKSPACE_SCHEMA\n\nThis identifies your workspace in Keboola and is used for SQL queries. However, this is **only required if you're using a custom storage token** instead of the Master Token:\n\n- If using [Master Token](https://help.keboola.com/management/project/tokens/#master-tokens): The workspace is created automatically behind the scenes\n- If using [custom storage token](https://help.keboola.com/management/project/tokens/#limited-tokens): Follow this [Keboola guide](https://help.keboola.com/tutorial/manipulate/workspace/) to get your KBC_WORKSPACE_SCHEMA\n\n**Note**: When creating a workspace manually, check Grant read-only access to all Project data option\n\n**Note**: KBC_WORKSPACE_SCHEMA is called Dataset Name in BigQuery workspaces, you simply click connect and copy the Dataset Name\n\n### Keboola Region\n\nYour Keboola API URL depends on your deployment region. You can determine your region by looking at the URL in your browser when logged into your Keboola project:\n\n| Region | API URL |\n|--------|---------|\n| AWS North America | `https://connection.keboola.com` |\n| AWS Europe | `https://connection.eu-central-1.keboola.com` |\n| Google Cloud EU | `https://connection.europe-west3.gcp.keboola.com` |\n| Google Cloud US | `https://connection.us-east4.gcp.keboola.com` |\n| Azure EU | `https://connection.north-europe.azure.keboola.com` |\n\n## Running Keboola MCP Server\n\nThere are four ways to use the Keboola MCP Server, depending on your needs:\n\n### Option A: Integrated Mode (Recommended)\n\nIn this mode, Claude or Cursor automatically starts the MCP server for you. **You do not need to run any commands in your terminal**.\n\n1. Configure your MCP client (Claude/Cursor) with the appropriate settings\n2. The client will automatically launch the MCP server when needed\n\n#### Claude Desktop Configuration\n\n1. Go to Claude (top left corner of your screen) -> Settings → Developer → Edit Config (if you don't see the claude_desktop_config.json, create it)\n2. Add the following configuration:\n3. Restart Claude desktop for changes to take effect\n\n```json\n{\n  \"mcpServers\": {\n    \"keboola\": {\n      \"command\": \"uvx\",\n      \"args\": [\"keboola_mcp_server\"],\n      \"env\": {\n        \"KBC_STORAGE_API_URL\": \"https://connection.YOUR_REGION.keboola.com\",\n        \"KBC_STORAGE_TOKEN\": \"your_keboola_storage_token\",\n        \"KBC_WORKSPACE_SCHEMA\": \"your_workspace_schema\"\n      }\n    }\n  }\n}\n```\n\nConfig file locations:\n\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n#### Cursor Configuration\n\n1. Go to Settings → MCP\n2. Click \"+ Add new global MCP Server\"\n3. Configure with these settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"keboola\": {\n      \"command\": \"uvx\",\n      \"args\": [\"keboola_mcp_server\"],\n      \"env\": {\n        \"KBC_STORAGE_API_URL\": \"https://connection.YOUR_REGION.keboola.com\",\n        \"KBC_STORAGE_TOKEN\": \"your_keboola_storage_token\",\n        \"KBC_WORKSPACE_SCHEMA\": \"your_workspace_schema\"\n      }\n    }\n  }\n}\n```\n\n**Note**: Use short, descriptive names for MCP servers. Since the full tool name includes the server name and must stay under ~60 characters, longer names may be filtered out in Cursor and will not be displayed to the Agent.\n\n\n#### Cursor Configuration for Windows WSL\n\nWhen running the MCP server from Windows Subsystem for Linux with Cursor AI, use this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"keboola\":{\n      \"command\": \"wsl.exe\",\n      \"args\": [\n          \"bash\",\n          \"-c '\",\n          \"export KBC_STORAGE_API_URL=https://connection.YOUR_REGION.keboola.com &&\",\n          \"export KBC_STORAGE_TOKEN=your_keboola_storage_token &&\",\n          \"export KBC_WORKSPACE_SCHEMA=your_workspace_schema &&\",\n          \"/snap/bin/uvx keboola_mcp_server\",\n          \"'\"\n      ]\n    }\n  }\n}\n```\n\n### Option B: Local Development Mode\n\nFor developers working on the MCP server code itself:\n\n1. Clone the repository and set up a local environment\n2. Configure Claude/Cursor to use your local Python path:\n\n```json\n{\n  \"mcpServers\": {\n    \"keboola\": {\n      \"command\": \"/absolute/path/to/.venv/bin/python\",\n      \"args\": [\n        \"-m\",\n        \"keboola_mcp_server\"\n      ],\n      \"env\": {\n        \"KBC_STORAGE_API_URL\": \"https://connection.YOUR_REGION.keboola.com\",\n        \"KBC_STORAGE_TOKEN\": \"your_keboola_storage_token\",\n        \"KBC_WORKSPACE_SCHEMA\": \"your_workspace_schema\"\n      }\n    }\n  }\n}\n```\n\n### Option C: Manual CLI Mode (For Testing Only)\n\nYou can run the server manually in a terminal for testing or debugging:\n\n```bash\n# Set environment variables\nexport KBC_STORAGE_API_URL=https://connection.YOUR_REGION.keboola.com\nexport KBC_STORAGE_TOKEN=your_keboola_storage_token\nexport KBC_WORKSPACE_SCHEMA=your_workspace_schema\n\nuvx keboola_mcp_server --transport sse\n```\n\n> **Note**: This mode is primarily for debugging or testing. For normal use with Claude or Cursor,\n> you do not need to manually run the server.\n\n> **Note**: The server will use the SSE transport and listen on `localhost:8000` for the incoming SSE connections.\n> You can use `--port` and `--host` parameters to make it listen elsewhere.\n\n### Option D: Using Docker\n\n```shell\ndocker pull keboola/mcp-server:latest\n\ndocker run \\\n  --name keboola_mcp_server \\\n  --rm \\\n  -it \\\n  -p 127.0.0.1:8000:8000 \\\n  -e KBC_STORAGE_API_URL=\"https://connection.YOUR_REGION.keboola.com\" \\\n  -e KBC_STORAGE_TOKEN=\"YOUR_KEBOOLA_STORAGE_TOKEN\" \\\n  -e KBC_WORKSPACE_SCHEMA=\"YOUR_WORKSPACE_SCHEMA\" \\\n  keboola/mcp-server:latest \\\n  --transport sse \\\n  --host 0.0.0.0\n```\n\n> **Note**: The server will use the SSE transport and listen on `localhost:8000` for the incoming SSE connections.\n> You can change `-p` to map the container's port somewhere else.\n\n### Do I Need to Start the Server Myself?\n\n| Scenario | Need to Run Manually? | Use This Setup |\n|----------|----------------------|----------------|\n| Using Claude/Cursor | No | Configure MCP in app settings |\n| Developing MCP locally | No (Claude starts it) | Point config to python path |\n| Testing CLI manually | Yes | Use terminal to run |\n| Using Docker | Yes | Run docker container |\n\n## Using MCP Server\n\nOnce your MCP client (Claude/Cursor) is configured and running, you can start querying your Keboola data:\n\n### Verify Your Setup\n\nYou can start with a simple query to confirm everything is working:\n\n```text\nWhat buckets and tables are in my Keboola project?\n```\n\n### Examples of What You Can Do\n\n**Data Exploration:**\n\n- \"What tables contain customer information?\"\n- \"Run a query to find the top 10 customers by revenue\"\n\n**Data Analysis:**\n\n- \"Analyze my sales data by region for the last quarter\"\n- \"Find correlations between customer age and purchase frequency\"\n\n**Data Pipelines:**\n\n- \"Create a SQL transformation that joins customer and order tables\"\n- \"Start the data extraction job for my Salesforce component\"\n\n## Compatibility\n\n### MCP Client Support\n\n| **MCP Client** | **Support Status** | **Connection Method** |\n|----------------|-------------------|----------------------|\n| Claude (Desktop & Web) | ✅ supported | stdio |\n| Cursor | ✅ supported | stdio |\n| Windsurf, Zed, Replit | ✅ Supported | stdio |\n| Codeium, Sourcegraph | ✅ Supported | HTTP+SSE |\n| Custom MCP Clients | ✅ Supported | HTTP+SSE or stdio |\n\n## Supported Tools\n\n**Note:** Your AI agents will automatically adjust to new tools.\n\n| Category | Tool | Description |\n|----------|------|-------------|\n| **Project** | `get_project_info` | Gets structured information about your Keboola project |\n| **Storage** | `list_buckets` | Lists all storage buckets in your Keboola project |\n| | `get_bucket` | Retrieves detailed information about a specific bucket |\n| | `list_tables` | Returns all tables within a specific bucket |\n| | `get_table` | Provides detailed information for a specific table |\n| | `update_bucket_description` | Updates the description of a bucket |\n| | `update_column_description` | Updates the description for a given column in a table |\n| | `update_table_description` | Updates the description of a table |\n| **SQL** | `query_table` | Executes custom SQL queries against your data |\n| | `get_sql_dialect` | Identifies whether your workspace uses Snowflake or BigQuery SQL dialect |\n| **Component** | `create_config` | Creates a component configuration with custom parameters |\n| | `add_config_row` | Creates a component configuration row with custom parameters |\n| | `create_sql_transformation` | Creates an SQL transformation with custom queries |\n| | `find_component_id` | Returns list of component IDs that match the given query |\n| | `get_component` | Gets information about a specific component given its ID |\n| | `get_config` | Gets information about a specific component/transformation configuration |\n| | `get_config_examples` | Retrieves sample configuration examples for a specific component |\n| | `list_configs` | Retrieves configurations of components present in the project |\n| | `list_transformations` | Retrieves transformation configurations in the project |\n| | `update_config` | Updates a specific component configuration |\n| | `update_config_row` | Updates a specific component configuration row |\n| | `update_sql_transformation` | Updates an existing SQL transformation configuration |\n| **Job** | `retrieve_jobs` | Lists and filters jobs by status, component, or configuration |\n| | `get_job_detail` | Returns comprehensive details about a specific job |\n| | `start_job` | Triggers a component or transformation job to run |\n| **Flow** | `create_flow` | Creates a new flow configuration in Keboola |\n|  | `get_flow` | Gets detailed information about a specific flow configuration. |\n|  | `get_flow_schema` | Returns the JSON schema that defines the structure of Flow configurations |\n|  | `list_flows` | Retrieves flow configurations from the project |\n|  | `update_flow` | Updates an existing flow configuration in Keboola |\n| **Documentation** | `docs_query` | Searches Keboola documentation based on natural language queries |\n\n## Troubleshooting\n\n### Common Issues\n\n| Issue | Solution |\n|-------|----------|\n| **Authentication Errors** | Verify `KBC_STORAGE_TOKEN` is valid |\n| **Workspace Issues** | Confirm `KBC_WORKSPACE_SCHEMA` is correct |\n| **Connection Timeout** | Check network connectivity |\n\n## Development\n\n### Installation\n\nBasic setup:\n\n```bash\nuv sync --extra dev\n```\n\nWith the basic setup, you can use `uv run tox` to run tests and check code style.\n\nRecommended setup:\n\n```bash\nuv sync --extra dev --extra tests --extra integtests --extra codestyle\n```\n\nWith the recommended setup, packages for testing and code style checking will be installed which allows IDEs like\nVsCode or Cursor to check the code or run tests during development.\n\n### Integration tests\n\nTo run integration tests locally, use `uv run tox -e integtests`.\nNOTE: You will need to set the following environment variables:\n\n- `INTEGTEST_STORAGE_API_URL`\n- `INTEGTEST_STORAGE_TOKEN`\n- `INTEGTEST_WORKSPACE_SCHEMA`\n\nIn order to get these values, you need a dedicated Keboola project for integration tests.\n\n### Updating `uv.lock`\n\nUpdate the `uv.lock` file if you have added or removed dependencies. Also consider updating the lock with newer dependency\nversions when creating a release (`uv lock --upgrade`).\n\n## Support and Feedback\n\n**⭐ The primary way to get help, report bugs, or request features is by [opening an issue on GitHub](https://github.com/keboola/mcp-server/issues/new). ⭐**\n\nThe development team actively monitors issues and will respond as quickly as possible. For general information about Keboola, please use the resources below.\n\n## Resources\n\n- [User Documentation](https://help.keboola.com/)\n- [Developer Documentation](https://developers.keboola.com/)\n- [Keboola Platform](https://www.keboola.com)\n- [Issue Tracker](https://github.com/keboola/mcp-server/issues/new) ← **Primary contact method for MCP Server**\n\n## Connect\n\n- [LinkedIn](https://www.linkedin.com/company/keboola)\n- [Twitter](https://x.com/keboola)\n- [Changelog](https://changelog.keboola.com/)\n",
  "category": "AI Tools",
  "quality_score": 72,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {
        "keboola_mcp_server": {
          "command": "uvx",
          "args": ["keboola_mcp_server"],
          "env": {
            "KBC_STORAGE_API_URL": "https://connection.YOUR_REGION.keboola.com",
            "KBC_STORAGE_TOKEN": "your_keboola_storage_token",
            "KBC_WORKSPACE_SCHEMA": "your_workspace_schema"
          }
        },
        "keboola_mcp_server-wsl": {
          "command": "wsl.exe",
          "args": [
            "bash",
            "-c '",
            "export KBC_STORAGE_API_URL=https://connection.YOUR_REGION.keboola.com &&",
            "export KBC_STORAGE_TOKEN=your_keboola_storage_token &&",
            "export KBC"
          ],
          "env": {
            "KBC_STORAGE_API_URL": "https://connection.YOUR_REGION.keboola.com",
            "KBC_STORAGE_TOKEN": "your_keboola_storage_token"
          }
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "keboola",
    "repo": "keboola-mcp-server",
    "url": "https://github.com/keboola/keboola-mcp-server",
    "name": "keboola-mcp-server",
    "path": null,
    "stars": 68,
    "contributors": 23,
    "issues": 0,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "8f02cdc453cc12ff2d6e692e801c6bec26b79e4e"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-08-04T09:35:01.850Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": true,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": true
  },
  "dependencies": [
    {
      "name": "fastmcp",
      "importance": 10
    },
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "httpx",
      "importance": 8
    },
    {
      "name": "jsonschema",
      "importance": 7
    },
    {
      "name": "pyjwt",
      "importance": 9
    },
    {
      "name": "json-log-formatter",
      "importance": 5
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"keboola-mcp-server\"\nversion = \"1.15.4\"\ndescription = \"MCP server for interacting with Keboola Connection\"\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\nlicense = \"MIT\"\nauthors = [{ name = \"Keboola\", email = \"devel@keboola.com\" }]\ndependencies = [\n    \"fastmcp == 2.10.5\",\n    \"mcp == 1.11.0\",\n    \"httpx ~= 0.28\",\n    \"jsonschema ~= 4.23\",\n    \"pyjwt ~= 2.10\",\n    \"json-log-formatter ~= 1.0\",\n]\n[project.optional-dependencies]\ncodestyle = [\n    \"black ~= 25.1\",\n    \"isort ~= 6.0\",\n    \"flake8 ~= 7.2\",\n    \"Flake8-pyproject ~= 1.2\",\n    \"flake8-bugbear ~= 24.12\",\n    \"flake8-colors ~= 0.1\",\n    \"flake8-isort ~= 6.1\",\n    \"flake8-pytest-style ~= 2.1\",\n    \"flake8-quotes ~= 3.4\",\n    \"flake8-typing-imports ~= 1.16\",\n    \"pep8-naming ~= 0.14\",\n]\ntests = [\n    \"python-dateutil ~= 2.9\",\n    \"pytest ~= 8.3\",\n    \"pytest-asyncio ~= 0.25\",\n    \"pytest-cov ~= 6.0\",\n    \"pytest-datadir ~= 1.6.1\",\n    \"python-dotenv ~= 1.1\",\n    \"pytest-mock ~= 3.14\",\n]\nintegtests = [\n    \"kbcstorage ~= 0.9\",\n]\ndev = [\n    \"tox ~= 4.23\",\n]\n\n[project.scripts]\nkeboola_mcp_server = \"keboola_mcp_server.cli:main\"\nkeboola-mcp-server = \"keboola_mcp_server.cli:main\"\n\n[tool.setuptools.package-data]\n\"keboola_mcp_server.resources\" = [\"storage-schema.json\"]\n\n[tool.black]\ntarget-version = [\"py310\"]\nskip-string-normalization = true\nline-length = 120\n\n[tool.isort]\nprofile = \"black\"\nline_length = 120\nmulti_line_output = 3\nuse_parentheses = true\n\n[tool.hatch.build.targets.wheel]\npackages = [\"src/keboola_mcp_server\"]\n\n[tool.pytest.ini_options]\naddopts = [\n    \"--import-mode=importlib\",\n]\nasyncio_default_fixture_loop_scope = \"function\"\nasyncio_mode = \"strict\"\nlog_cli = false\nlog_level = \"INFO\"\nlog_cli_format = \"%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)\"\nlog_cli_date_format = \"%Y-%m-%d %H:%M:%S\"\n\n[tool.flake8]\nmax-line-length = 120\nimport-order-style = \"edited\"\napplication-package-names = [\"keboola_mcp_server\"]\nmin-python-version = \"3.10.0\"\npytest-fixture-no-parentheses = true\n# Skip unused import checks F401 in __init__.py files; re-exported imports are intentional. \nper-file-ignores = [\n    \"__init__.py: F401\",\n]\n# For Compatibility with black we skip: E203 whitespace before ':', W503 checks line break before binary operator\n# For Compatibility with isort we skip: I101 Imported names are in the wrong order since we follow isort format using\n# alphabetical case-sensitive sort A, B, a, b \nextend-ignore = [\"E203\", \"W503\", \"I101\"]\n\n[tool.tox]\nrequires = [\"tox>=4.23\"]\nenv_list = [\"python\", \"flake8\"]\n\n[tool.tox.env_run_base]\ndescription = \"Run tests\"\nextras = [\"tests\"]\npackage = \"wheel\"\nwheel_build_env = \".pkg\"\ncommands = [\n    [\n        \"pytest\",\n        { replace = \"posargs\", default = [\n            \"tests\",\n            \"--cov=keboola_mcp_server\",\n            \"--cov-report=term-missing\",\n            \"--cov-report=xml\",\n            \"--junitxml\",\n            \"./test-results.xml\",\n        ], extend = true },\n    ],\n]\n\n[tool.tox.env.integtests]\ndescription = \"Run integration tests\"\nextras = [\"tests\", \"integtests\"]\npass_env = [\n    \"INTEGTEST_STORAGE_API_URL\",\n    \"INTEGTEST_STORAGE_TOKEN\",\n    \"INTEGTEST_WORKSPACE_SCHEMA\",\n]\ncommands = [\n    [\n        \"pytest\",\n        { replace = \"posargs\", default = [\n            \"integtests\",\n            \"--junitxml\",\n            \"./integtest-results.xml\",\n        ], extend = true },\n    ],\n]\n\n[tool.tox.env.flake8]\ndescription = \"Run code style check using flake8\"\npackage = \"skip\"\ndeps = [\n    \"flake8 ~= 7.2\",\n    \"Flake8-pyproject ~= 1.2\",\n    \"flake8-bugbear ~= 24.12\",\n    \"flake8-colors ~= 0.1\",\n    \"flake8-isort ~= 6.1\",\n    \"flake8-pytest-style ~= 2.1\",\n    \"flake8-quotes ~= 3.4\",\n    \"flake8-typing-imports ~= 1.16\",\n    \"pep8-naming ~= 0.14\",\n]\ncommands = [[\"flake8\", \"src/\", \"tests/\", \"integtests/\"]]\n"
}
