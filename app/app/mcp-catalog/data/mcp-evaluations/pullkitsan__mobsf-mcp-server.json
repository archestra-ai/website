{
  "name": "pullkitsan__mobsf-mcp-server",
  "display_name": "mobsf-mcp-server",
  "description": "This MCP server uses mobsf api's to scan and analyze the apk and ipa files.",
  "author": {
    "name": "pullkitsan"
  },
  "server": {
    "command": "npx",
    "args": ["tsx", "${__dirname}/server.ts"],
    "env": {
      "MOBSF_API_KEY": "${user_config.mobsf_api_key}",
      "MOBSF_URL": "${user_config.mobsf_url}"
    },
    "type": "local"
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "mobsf_api_key": {
      "type": "string",
      "title": "MobSF API Key",
      "description": "Your MobSF API key for authentication",
      "sensitive": true,
      "required": true
    },
    "mobsf_url": {
      "type": "string",
      "title": "MobSF URL",
      "description": "The URL where your MobSF server is running",
      "default": "http://localhost:8000",
      "required": false
    }
  },
  "readme": "# üõ°MobSF MCP Tool\n\nThis is an MCP (Model Context Protocol) compatible tool that allows MobSF (Mobile Security Framework) to scan APK and IPA files directly via Claude, 5ire, or any MCP-capable client.\n\n\n\n# Prerequisites\n\n* MobSF should be installed( and running ) on the system. \n* Download the [MCP typescript sdk](https://github.com/modelcontextprotocol/typescript-sdk) and rename the folder to sdk.\n* npm should be installed on the system\n\n# üöÄ Features\n\n- Supports APK and IPA file scanning\n\n- Uses MobSF's REST API to:\n\n<pre>Upload files\n\nTrigger scans\n\nFetch analysis summary\n\nAutomatically filters large results like strings or secrets (to prevent output overload)\n\nMCP-compatible interface via server.ts</pre>\n\n\n# üéûÔ∏è Installation\n\nClone the repo and install dependencies:\n\n<pre>git clone https://github.com/yourusername/mobsf-mcp.git\ncd mobsf-mcp\nnpm install </pre>\n\n# Troubleshooting\n\nGo inside mobsf server directory and run 'npx tsx server.ts'.\nInstall any missing npm dependency if any.\n\n\n# üîê Setup\n\nCopy the .env.example to .env:\n\n> cp .env.example .env\n\nEdit .env to include your MobSF API key:\n\n<pre>MOBSF_API_KEY=YOUR_MOBSF_API_KEY\n\nMOBSF_URL=http://localhost:8000 </pre>\n\n\n# ‚ñ∂Ô∏è Run the Server\n\n* Add the configuration settings shown at the end for claude AI desktop app, it will automatically run the server.\n\n* Make sure your MobSF server is running locally at http://localhost:8000.\n\n# üß≤ Example Input\n\n* The server exposes tool **scanFile** . So,  use any MCP client to try the following prompt **scan <FILE>.apk** or **scan <FILE>.ipa**. It will scan the IPA or APK file and will analyze the report(json) for you.  \n\n\n# üìå Notes\n\n- Only .apk and .ipa file types are supported.\n\n- This tool avoids fetching large fields like raw strings or source code dumps to keep responses fast and compliant with Claude/5ire message limits.\n\n\n# ‚úÖ Claude Config file (Example)\n\n<pre> {\n  \"mcpServers\": {\n    \"mobsf\": {\n      \"command\": \"npx\",\n      \"args\": [\"tsx\", \"/absolute/path/to/server.ts\"]\n    }\n  }\n} </pre>\n\n# ‚úÖ 5ire Config file example ( Windows)\n<pre>\n  {\n  \"key\": \"mobsf\",\n  \"command\": \"npx\",\n  \"args\": [\n    \"tsx\",\n    \"C:\\\\Users\\\\Downloads\\\\mobsf-mcp-server\\\\server.js\"\n  ]\n}\n</pre>\n\n",
  "category": "Security",
  "quality_score": 45,
  "archestra_config": {
    "client_config_permutations": {
      "mobsf-mcp-claude": {
        "command": "npx",
        "args": ["tsx", "/absolute/path/to/server.ts"],
        "env": {}
      },
      "mobsf-mcp-5ire": {
        "command": "npx",
        "args": ["tsx", "C:\\Users\\Downloads\\mobsf-mcp-server\\server.js"],
        "env": {}
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": false
  },
  "github_info": {
    "owner": "pullkitsan",
    "repo": "mobsf-mcp-server",
    "url": "https://github.com/pullkitsan/mobsf-mcp-server",
    "name": "mobsf-mcp-server",
    "path": null,
    "stars": 5,
    "contributors": 1,
    "issues": 0,
    "releases": false,
    "ci_cd": false,
    "latest_commit_hash": "aaa1a6ee41785117bad51eac70a039d2f2b8c20f"
  },
  "programming_language": "TypeScript",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:34.352Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": false,
    "implementing_sampling": true,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "axios",
      "importance": 6
    },
    {
      "name": "dotenv",
      "importance": 4
    },
    {
      "name": "zod",
      "importance": 5
    },
    {
      "name": "zod-to-json-schema",
      "importance": 4
    }
  ],
  "raw_dependencies": "=== package.json ===\n{\n  \"name\": \"mobsfmcp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"axios\": \"^1.8.4\",\n    \"dotenv\": \"^16.4.7\",\n    \"zod\": \"^3.24.2\",\n    \"zod-to-json-schema\": \"^3.24.5\"\n  },\n  \"devDependencies\": {\n    \"tsx\": \"^4.19.3\",\n    \"typescript\": \"^5.8.2\"\n  }\n}\n"
}
