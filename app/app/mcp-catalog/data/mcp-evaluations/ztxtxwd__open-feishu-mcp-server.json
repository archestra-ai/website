{
  "dxt_version": "0.1.0",
  "name": "ztxtxwd__open-feishu-mcp-server",
  "display_name": "open-feishu-mcp-server",
  "version": "1.0.0",
  "description": "MCP server from ztxtxwd/open-feishu-mcp-server",
  "author": {
    "name": "ztxtxwd"
  },
  "server": {
    "type": "node",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "unknown",
      "args": [],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "[![MCP Badge](https://lobehub.com/badge/mcp/ztxtxwd-open-feishu-mcp-server)](https://lobehub.com/mcp/ztxtxwd-open-feishu-mcp-server)\n# 飞书 MCP Server\n\n[English Documentation](README.en.md)\n\n这是一个支持远程连接的[模型上下文协议 (MCP)](https://modelcontextprotocol.io/introduction) 服务器，内置了飞书 OAuth 认证。\n\n本项目修改自 [cloudflare/ai/demos/remote-mcp-github-oauth](https://github.com/cloudflare/ai/tree/main/demos/remote-mcp-github-oauth)，将 GitHub OAuth 替换为飞书 OAuth。\n\n您可以将其部署到自己的 Cloudflare 账户，并在创建自己的飞书 OAuth 客户端应用后，拥有一个功能完整的远程 MCP 服务器。用户可以通过飞书账号登录连接到您的 MCP 服务器。\n\n## 📋 目录\n\n- [与飞书官方 MCP Server 的区别](#-与飞书官方-mcp-server-的区别)\n- [特性](#-特性)\n- [快速开始](#-快速开始)\n- [部署方式](#-部署方式)\n  - [生产环境部署](#生产环境部署)\n  - [本地开发环境](#本地开发环境)\n- [客户端集成](#-客户端集成)\n  - [使用 Inspector 测试](#使用-inspector-测试)\n  - [使用 Cursor](#使用-cursor)\n  - [使用 ChatWise](#使用-chatwise)\n- [访问控制](#-访问控制)\n- [工具开发路线图](#-工具开发路线图)\n- [技术原理](#-技术原理)\n- [开发指南](#-开发指南)\n\n\n## 🆚 与飞书官方 MCP Server 的区别\n\n虽然飞书官方也推出了 MCP Server，但本项目在以下几个方面具有显著优势：\n\n### 🎯 零配置体验\n- **本项目**：用户无需手动配置任何参数，全程使用 `user_access_token`，过期自动刷新\n- **官方项目**：需要用户手动配置多个参数，配置复杂\n\n### 🚀 极致的可用性优化\n- **本项目**：深度优化工具尺寸和结构，特别是文档创建块工具、创建嵌套块工具等复杂功能，确保在 Cursor 等客户端中正常使用\n- **官方项目**：简单的 API 到 MCP 工具转换，部分工具过于庞大，在实际使用中存在可用性问题\n\n### 🌐 前沿基础设施\n- 支持部署在 Cloudflare Workers，享受业界最前沿的边缘计算基础设施\n## ✨ 特性\n\n- 🎯 **零配置体验**：用户无需手动配置参数，自动管理 `user_access_token` 和刷新\n- 🔐 **飞书 OAuth 认证**：安全的用户身份验证\n- 🌐 **远程 MCP 服务器**：支持多客户端连接\n- 🚀 **Cloudflare Workers**：高性能、全球分布式部署，享受业界最前沿的边缘计算基础设施\n- 🛠️ **深度优化的工具集**：特别优化文档创建、嵌套块等复杂工具，确保在各种客户端中正常使用\n- 🔧 **本地开发支持**：便于开发和测试的本地环境\n- ⚡ **极致可用性**：相比官方 MCP Server，大幅提升实际使用体验和稳定性\n\n## 🚀 快速开始\n\n### 前置要求\n\n- Node.js 18+ 和 npm\n- Cloudflare 账户\n- 飞书开放平台账户\n\n### 安装\n\n```bash\n# 克隆仓库\ngit clone <repository-url>\ncd open-feishu-mcp-server\n\n# 安装依赖\nnpm install\n```\n\n## 🚀 部署方式\n\n### 生产环境部署\n\n#### 步骤 1: 创建飞书应用\n\n1. 访问[飞书开放平台](https://open.feishu.cn/)并登录\n2. 点击\"开发者后台\"并创建一个新应用\n3. 在应用设置中配置权限：\n   - 进入\"权限与功能\"并添加以下权限：\n     - \"获取用户 ID\" (auth:user.id:read)\n     - \"获取用户任务信息\" (task:task:read)\n     - \"获取用户授权凭证\" (offline_access)\n     - \"获取用户基本信息\" (user_profile)\n     \n        ...\n4. 记下您的**应用 ID** 和**应用密钥**\n\n#### 步骤 2: 配置 Cloudflare 环境\n\n```bash\n# 设置必要的密钥\nwrangler secret put FEISHU_APP_ID\nwrangler secret put FEISHU_APP_SECRET\nwrangler secret put COOKIE_ENCRYPTION_KEY  # 使用 openssl rand -hex 32 生成\n\n# 创建 KV 命名空间\nwrangler kv:namespace create \"OAUTH_KV\"\n```\n\n#### 步骤 3: 更新配置文件\n\n使用步骤 2 中获得的 KV ID 更新 `wrangler.toml` 文件中的 KV 命名空间配置。\n\n#### 步骤 4: 部署服务器\n\n```bash\nnpm run deploy\n```\n\n部署完成后，记下您的实际 subdomain（会在部署日志中显示）。\n\n#### 步骤 5: 配置重定向 URL\n\n回到飞书应用设置：\n1. 进入\"安全设置\"\n2. 添加重定向 URL：`https://feishu-mcp-server.<your-actual-subdomain>.workers.dev/callback`\n\n### 本地开发环境\n\n#### 配置本地环境\n\n1. **配置飞书应用**：\n   - 在飞书应用的\"安全设置\"中添加：`http://localhost:8788/callback`\n   - 确保拥有所需的权限（同生产环境）\n\n2. **创建环境变量文件**：\n   在项目根目录创建 `.dev.vars` 文件：\n   ```\n   FEISHU_APP_ID=your_development_feishu_app_id\n   FEISHU_APP_SECRET=your_development_feishu_app_secret\n   COOKIE_ENCRYPTION_KEY=any_random_string_here\n   ```\n\n#### 启动本地服务器\n\n```bash\nnpm run dev\n```\n\n服务器将在 `http://localhost:8788` 运行。\n\n## 🔌 客户端集成\n\n### 使用 Inspector 测试\n\n使用官方的 MCP Inspector 测试您的服务器：\n\n```bash\nnpx @modelcontextprotocol/inspector@latest\n```\n\n**连接地址**：\n- 生产环境：`https://feishu-mcp-server.<your-subdomain>.workers.dev/sse`\n- 本地环境：`http://localhost:8788/sse`\n\n### 使用 Cursor\n\n通过一键安装按钮快速配置：\n\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/install-mcp?name=feishu&config=eyJ1cmwiOiJodHRwOi8vbG9jYWxob3N0Ojg3ODgvc3NlIn0%3D)\n\n或手动配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"feishu\": {\n      \"url\": \"http://localhost:8788/sse\"\n    }\n  }\n}\n```\n\n### 使用 ChatWise\n\n1. **配置步骤**：\n   - 打开 ChatWise 设置界面\n   - 导航到工具选项\n   - 新增命令行输入输出（stdio）\n   - 命令：`npx -y mcp-remote ${URL}`\n\n2. **连接地址**：\n   - 本地：`http://localhost:8788/sse`\n   - 生产：`https://feishu-mcp-server.<your-subdomain>.workers.dev/sse`\n\n3. **首次使用**：\n   - 保存配置后会自动打开飞书 OAuth 登录页面\n   - 完成授权即可使用飞书相关功能\n\n## 🔐 访问控制\n\n- **身份验证**：使用飞书 OAuth 进行用户身份验证\n- **权限范围**：所有经过身份验证的飞书用户都可以访问所有工具\n\n## 📋 工具开发路线图\n\n### 🚧 当前开发中 (飞书文档)\n- **🔧开发辅助工具**\n  - ✅ 开发文档内容搜索与召回\n- **📄 文档基础操作**\n  - ✅ 文档块树结构获取\n  - ✅ 获取块类型创建参数 schema\n  - ✅ 创建文档块（支持各种块类型）\n  - ✅ 更新文档块内容\n  - ✅ 批量删除文档块\n- **🔧 文档高级功能**\n  - ✅ 表格创建与操作\n  - ✅ 图片、视频、文件上传与插入\n  - ✅ Markdown 导入功能\n  - ✅ 素材上传与管理\n  - ✅ 文档搜索\n\n### 🎯 未来计划\n- **📊 电子表格（Sheets）**\n  - 📋 工作表基础操作（创建、删除、重命名）\n  - 📋 单元格数据读写\n  - 📋 公式计算与应用\n  - 📋 图表创建与编辑\n  - 📋 数据筛选与排序\n  - 📋 协作与权限管理\n\n- **🗃️ 多维表格（Base/Bitable）**\n  - 📋 数据表基础操作\n  - 📋 记录增删改查\n  - 📋 字段类型管理\n  - 📋 视图创建与配置\n  - 📋 自动化规则设置\n  - 📋 数据导入导出\n\n  ...\n\n**图例**：✅ 已完成 | 🔄 开发中 | 📋 计划中\n\n## 🛠️ 技术原理\n\n### 架构组件\n\n#### OAuth Provider\n完整的 OAuth 2.1 服务器实现，处理：\n- MCP 客户端身份验证\n- 飞书 OAuth 服务连接管理\n- KV 存储中的安全令牌管理\n\n#### Durable MCP\n基于 Cloudflare Durable Objects 的 MCP 扩展：\n- 持久状态管理\n- 身份验证上下文存储\n- 通过 `this.props` 访问用户信息\n- 基于用户身份的条件工具可用性\n\n#### MCP Remote\n支持远程 MCP 客户端连接：\n- 定义客户端-服务器通信协议\n- 提供结构化工具定义方式\n- 处理请求/响应序列化\n- 维护 SSE 连接\n\n## 👨‍💻 开发指南\n\n### MCP 服务器（由 [Cloudflare Workers](https://developers.cloudflare.com/workers/) 提供支持）\n\n本项目实现了双重 OAuth 角色：\n* 对 MCP 客户端充当 OAuth **服务器**\n* 对飞书 OAuth 服务充当 OAuth **客户端**\n\n### 工具开发\n\n当前工具使用用户访问令牌进行身份验证，确保：\n- 安全访问飞书 API\n- 基于用户权限的功能访问\n- 完整的错误处理和日志记录\n\n---\n\n**📝 注意**：确保在部署前正确配置所有环境变量和飞书应用设置。如遇问题，请检查飞书应用权限配置和重定向 URL 设置。\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ztxtxwd/open-feishu-mcp-server&type=Date)](https://star-history.com/#ztxtxwd/open-feishu-mcp-server&Date)\n",
  "category": "Enterprise",
  "quality_score": 61,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {
        "open-feishu-mcp-server-deployed": {
          "command": "npm",
          "args": ["run", "deploy"],
          "env": {}
        },
        "open-feishu-mcp-server-local": {
          "command": "npm",
          "args": ["run", "dev"],
          "env": {
            "FEISHU_APP_ID": "your_development_feishu_app_id",
            "FEISHU_APP_SECRET": "your_development_feishu_app_secret",
            "COOKIE_ENCRYPTION_KEY": "any_random_string_here"
          }
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "ztxtxwd",
    "repo": "open-feishu-mcp-server",
    "url": "https://github.com/ztxtxwd/open-feishu-mcp-server",
    "name": "open-feishu-mcp-server",
    "path": null,
    "stars": 53,
    "contributors": 2,
    "issues": 0,
    "releases": false,
    "ci_cd": false,
    "latest_commit_hash": "e23b7600183a7a1067bae2795aa2a7e0fdc47e82"
  },
  "programming_language": "TypeScript",
  "framework": null,
  "last_scraped_at": "2025-08-04T09:33:39.268Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": true,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": true
  },
  "dependencies": [
    {
      "name": "@larksuiteoapi/node-sdk",
      "importance": 9
    },
    {
      "name": "axios",
      "importance": 6
    },
    {
      "name": "dotenv",
      "importance": 4
    },
    {
      "name": "zod-to-json-schema",
      "importance": 4
    }
  ],
  "raw_dependencies": "=== package.json ===\n{\n  \"name\": \"remote-mcp-github-oauth\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"deploy\": \"wrangler deploy\",\n    \"dev\": \"wrangler dev\",\n    \"start\": \"wrangler dev\",\n    \"cf-typegen\": \"wrangler types\",\n    \"test\": \"jest\",\n    \"lint\": \"eslint src/**/*.{ts,tsx}\",\n    \"lint:fix\": \"eslint src/**/*.{ts,tsx} --fix\",\n    \"lint:check\": \"eslint src/**/*.{ts,tsx} --max-warnings 0\"\n  },\n  \"dependencies\": {\n    \"@larksuiteoapi/node-sdk\": \"^1.52.0\",\n    \"axios\": \"^1.10.0\",\n    \"dotenv\": \"^16.6.1\",\n    \"zod-to-json-schema\": \"^3.24.6\"\n  },\n  \"devDependencies\": {\n    \"@cloudflare/workers-oauth-provider\": \"^0.0.5\",\n    \"@eslint/js\": \"^9.30.1\",\n    \"@modelcontextprotocol/sdk\": \"^1.15.0\",\n    \"@types/jest\": \"^30.0.0\",\n    \"@types/node\": \"^24.0.10\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.35.1\",\n    \"@typescript-eslint/parser\": \"^8.35.1\",\n    \"agents\": \"^0.0.95\",\n    \"eslint\": \"^9.30.1\",\n    \"eslint-config-airbnb-typescript\": \"^18.0.0\",\n    \"eslint-config-prettier\": \"^10.1.5\",\n    \"eslint-plugin-import\": \"^2.32.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.10.2\",\n    \"eslint-plugin-react\": \"^7.37.5\",\n    \"eslint-plugin-react-hooks\": \"^5.2.0\",\n    \"hono\": \"^4.8.4\",\n    \"jest\": \"^30.0.4\",\n    \"just-pick\": \"^4.2.0\",\n    \"octokit\": \"^5.0.3\",\n    \"prettier\": \"^3.6.2\",\n    \"ts-jest\": \"^29.4.0\",\n    \"typescript\": \"^5.8.3\",\n    \"workers-mcp\": \"0.1.0-3\",\n    \"wrangler\": \"^4.23.0\",\n    \"zod\": \"^3.25.75\"\n  }\n}\n"
}
