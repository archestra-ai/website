{
  "dxt_version": "0.1.0",
  "name": "reza-gholizade__k8s-mcp-server",
  "display_name": "k8s-mcp-server",
  "version": "1.0.0",
  "description": "Manage Your Kubernetes Cluster with k8s mcp-server",
  "author": {
    "name": "reza-gholizade"
  },
  "server": {
    "type": "binary",
    "entry_point": "k8s-mcp-server",
    "mcp_config": {
      "command": "${__dirname}/k8s-mcp-server",
      "args": [],
      "env": {
        "SERVER_MODE": "${user_config.server_mode}",
        "SERVER_PORT": "${user_config.server_port}",
        "KUBECONFIG": "${user_config.kubeconfig}",
        "READ_ONLY": "${user_config.read_only}",
        "NO_K8S": "${user_config.no_k8s}",
        "NO_HELM": "${user_config.no_helm}"
      }
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "server_mode": {
      "type": "string",
      "title": "Server Mode",
      "description": "The mode in which the server runs (stdio, sse, or streamable-http).",
      "required": false,
      "default": "sse"
    },
    "server_port": {
      "type": "number",
      "title": "Server Port",
      "description": "The port for SSE or Streamable-HTTP modes.",
      "required": false,
      "default": 8080,
      "min": 1,
      "max": 65535
    },
    "kubeconfig": {
      "type": "file",
      "title": "Kubeconfig Path",
      "description": "Path to the Kubernetes configuration file.",
      "required": false,
      "default": "${HOME}/.kube/config"
    },
    "read_only": {
      "type": "boolean",
      "title": "Read-Only Mode",
      "description": "Disables all write operations to the Kubernetes cluster.",
      "required": false,
      "default": false
    },
    "no_k8s": {
      "type": "boolean",
      "title": "Disable Kubernetes Tools",
      "description": "Disables all Kubernetes-related tools.",
      "required": false,
      "default": false
    },
    "no_helm": {
      "type": "boolean",
      "title": "Disable Helm Tools",
      "description": "Disables all Helm-related tools.",
      "required": false,
      "default": false
    }
  },
  "readme": "# Kubernetes MCP Server\n\nA Kubernetes Model Context Protocol (MCP) server that provides tools for interacting with Kubernetes clusters through a standardized interface.\n\n## Features\n\n- **API Resource Discovery**: Get all available API resources in your Kubernetes cluster.\n- **Resource Listing**: List resources of any type with optional namespace and label filtering.\n- **Resource Details**: Get detailed information about specific Kubernetes resources.\n- **Resource Description**: Get comprehensive descriptions of Kubernetes resources, similar to `kubectl describe`.\n- **Pod Logs**: Retrieve logs from specific pods (optionally from a specific container, or all containers if unspecified).\n- **Node Metrics**: Get resource usage metrics for specific nodes.\n- **Pod Metrics**: Get CPU and Memory metrics for specific pods.\n- **Event Listing**: List events within a namespace or for a specific resource.\n- **Resource Creation/Updating**: Create new Kubernetes resources or update existing ones from a YAML or JSON manifest.\n- **Resource Deletion**: It deletes a resource in the Kubernetes cluster based on the provided namespace and kind.\n- **Standardized Interface**: Uses the MCP protocol for consistent tool interaction.\n- **Flexible Configuration**: Supports different Kubernetes contexts and resource scopes.\n- **Multiple Modes**: Run in `stdio` mode for CLI tools, `sse` mode, or `streamable-http` mode for web applications, and `--readonly` for no change in the cluster.\n- **Security**: Runs as non-root user in Docker containers for enhanced security.\n\n## Prerequisites\n\n- Go 1.23 or later\n- Access to a Kubernetes cluster\n- `kubectl` configured with appropriate cluster access\n\n## Installation\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/reza-gholizade/k8s-mcp-server.git\n    cd k8s-mcp-server\n    ```\n\n2.  **Install dependencies:**\n    ```bash\n    go mod download\n    ```\n\n3.  **Build the server:**\n    ```bash\n    go build -o k8s-mcp-server main.go\n    ```\n\n## Usage\n\n### Starting the Server\n\nThe server can run in three modes, configurable via command-line flags or environment variables.\n\n#### Stdio Mode (for CLI integrations)\nThis mode uses standard input/output for communication.\n\n```bash\n./k8s-mcp-server --mode stdio\n```\nOr using environment variables:\n```bash\nSERVER_MODE=stdio ./k8s-mcp-server\n```\n\n#### SSE Mode (for web applications)\nThis mode starts an HTTP server with Server-Sent Events support.\n\nDefault (port 8080):\n```bash\n./k8s-mcp-server --mode sse\n```\nSpecify a port:\n```bash\n./k8s-mcp-server --mode sse --port 9090\n```\nOr using environment variables:\n```bash\nSERVER_MODE=sse SERVER_PORT=9090 ./k8s-mcp-server\n```\n#### Streamable-HTTP Mode (for web applications)\nThis mode starts an HTTP server with streamable-http transport support, following the MCP specification.\n\nDefault (port 8080):\n```bash\n./k8s-mcp-server --mode streamable-http\n```\nSpecify a port:\n```bash\n./k8s-mcp-server --mode streamable-http --port 9090\n```\nOr using environment variables:\n```bash\nSERVER_MODE=streamable-http SERVER_PORT=9090 ./k8s-mcp-server\n```\n\nThe server will be available at `http://localhost:8080/mcp` (or your specified port).\n\nIf no mode is specified, it defaults to SSE on port 8080.\n\n#### Read-Only Mode\n\nThe server supports a read-only mode that disables all write operations, providing a safer way to explore and monitor your Kubernetes cluster without the risk of making changes.\n\nEnable read-only mode with the `--read-only` flag:\n\n```bash\n./k8s-mcp-server --read-only\n```\n\nYou can combine read-only mode with any server mode:\n\n```bash\n# Read-only with stdio mode\n./k8s-mcp-server --mode stdio --read-only\n\n# Read-only with SSE mode\n./k8s-mcp-server --mode sse --read-only\n\n# Read-only with streamable-http mode\n./k8s-mcp-server --mode streamable-http --read-only\n```\n\nWhen read-only mode is enabled, the following tools are disabled:\n- `createResource` (Kubernetes resource creation/updates)\n- `helmInstall` (Helm chart installations)\n- `helmUpgrade` (Helm chart upgrades)\n- `helmUninstall` (Helm chart uninstallations)\n- `helmRollback` (Helm release rollbacks)\n- `helmRepoAdd` (Helm repository additions)\n\nAll other read-only operations remain available, including listing resources, getting logs, viewing metrics, and inspecting Helm releases.\n\n#### Tool Category Flags\nYou can selectively disable entire categories of tools using these flags:\n\n**Disable Kubernetes Tools:**\n```bash\n./k8s-mcp-server --no-k8s\n```\n\n**Disable Helm Tools:**\n```bash\n./k8s-mcp-server --no-helm\n```\n\n**Combine with other flags:**\n```bash\n# Read-only mode with only Kubernetes tools (no Helm)\n./k8s-mcp-server --read-only --no-helm\n\n# Read-only mode with only Helm tools (no Kubernetes)\n./k8s-mcp-server --read-only --no-k8s\n\n# SSE mode with only Kubernetes tools\n./k8s-mcp-server --mode sse --no-helm\n\n```\n\n**Note:** You cannot use both `--no-k8s` and `--no-helm` together, as this would result in no available tools. The server will exit with an error if both flags are provided.\n\nWhen `--no-k8s` is enabled, all Kubernetes tools are disabled:\n- `getAPIResources`, `listResources`, `getResource`, `describeResource`\n- `getPodsLogs`, `getNodeMetrics`, `getPodMetrics`, `getEvents`\n- `createResource` (if not in read-only mode)\n\nWhen `--no-helm` is enabled, all Helm tools are disabled:\n- `helmList`, `helmGet`, `helmHistory`, `helmRepoList`\n- `helmInstall`, `helmUpgrade`, `helmUninstall`, `helmRollback`, `helmRepoAdd` (if not in read-only mode)\n\n### Using the Docker Image\n\nYou can also run the server using the pre-built Docker image from Docker Hub.\n\n1.  **Pull the image:**\n    ```bash\n    docker pull ginnux/k8s-mcp-server:latest\n    ```\n    You can replace `latest` with a specific version tag (e.g., `1.0.0`).\n\n2.  **Run the container:**\n\n    *   **SSE Mode (default behavior of the image):**\n        ```bash\n        docker run -p 8080:8080 -v ~/.kube/config:/home/appuser/.kube/config:ro ginnux/k8s-mcp-server:latest\n        ```\n        This maps port 8080 of the container to port 8080 on your host and mounts your Kubernetes config read-only to the non-root user's home directory. The server will be available at `http://localhost:8080`. The image defaults to `sse` mode on port `8080`.\n\n    *   **Streamable-HTTP Mode:**\n        ```bash\n        docker run -p 8080:8080 -v ~/.kube/config:/home/appuser/.kube/config:ro ginnux/k8s-mcp-server:latest --mode streamable-http\n        ```\n        This runs the server in streamable-http mode. The server will be available at `http://localhost:8080/mcp`.\n\n    *   **Stdio Mode:**\n        ```bash\n        docker run -i --rm -v ~/.kube/config:/home/appuser/.kube/config:ro ginnux/k8s-mcp-server:latest --mode stdio\n        ```\n        The `-i` flag is important for interactive stdio communication. `--rm` cleans up the container after exit.\n\n    *   **Custom Port for SSE Mode:**\n        ```bash\n        docker run -p 9090:9090 -v ~/.kube/config:/home/appuser/.kube/config:ro ginnux/k8s-mcp-server:latest --mode sse --port 9090\n        ```\n\n    *   **Custom Port for Streamable-HTTP Mode:**\n        ```bash\n        docker run -p 9090:9090 -v ~/.kube/config:/home/appuser/.kube/config:ro ginnux/k8s-mcp-server:latest --mode streamable-http --port 9090\n        ```\n\n    *   **Alternative: Mount entire .kube directory:**\n        ```bash\n        docker run -p 8080:8080 -v ~/.kube:/home/appuser/.kube:ro ginnux/k8s-mcp-server:latest\n        ```\n\n#### Using with Docker Compose\n\nCreate a `docker-compose.yml` file:\n```yaml\nversion: '3.8'\nservices:\n  k8s-mcp-server:\n    image: ginnux/k8s-mcp-server:latest # Or a specific version\n    container_name: k8s-mcp-server\n    ports:\n      - \"8080:8080\" # Host:Container, adjust if using a different SERVER_PORT\n    volumes:\n      - ~/.kube:/home/appuser/.kube:ro # Mount kubeconfig read-only to non-root user home\n    environment:\n      - KUBECONFIG=/home/appuser/.kube/config\n      - SERVER_MODE=sse # Can be 'stdio', 'sse', or 'streamable-http'\n      - SERVER_PORT=8080 # Port for SSE/streamable-http modes\n    # command: [\"--read-only\"] # Uncomment this line to enable read-only mode\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 10s\n    # To run in stdio mode with docker-compose, you might need to adjust 'ports',\n    # add 'stdin_open: true' and 'tty: true', and potentially override the command.\n    # For example, to force stdio mode:\n    # command: [\"--mode\", \"stdio\"]\n    # stdin_open: true\n    # tty: true\n    # For streamable-http mode, simply change SERVER_MODE to 'streamable-http'\n```\nTo enable read-only mode, use the `command` override as shown above.\n\nThen start with:\n```bash\ndocker compose up -d\n```\nTo see logs: `docker compose logs -f k8s-mcp-server`.\n\n#### Security Considerations\n\nThe Docker image runs as a non-root user (`appuser` with UID 1001) for enhanced security:\n- The application binary is located at `/usr/local/bin/k8s-mcp-server`\n- The kubeconfig should be mounted to `/home/appuser/.kube/config`\n- Health checks are enabled to monitor container status\n- The container includes minimal dependencies (ca-certificates and curl only)\n\n#### Making API Calls (SSE/Streamable-HTTP Mode)\nOnce the server is running in SSE or streamable-http mode, you can make JSON-RPC calls to its HTTP endpoint:\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getAPIResources\",\n    \"arguments\": {\n      \"includeNamespaceScoped\": true,\n      \"includeClusterScoped\": true\n    }\n  }\n}' http://localhost:8080/\n```\n\nYou can also check the health status:\n```bash\ncurl -f http://localhost:8080/\n```\n\n### Available Tools\n\n#### 1. `getAPIResources`\n\nRetrieves all available API resources in the Kubernetes cluster.\n\n**Parameters:**\n- `includeNamespaceScoped` (boolean, optional): Whether to include namespace-scoped resources (defaults to true).\n- `includeClusterScoped` (boolean, optional): Whether to include cluster-scoped resources (defaults to true).\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getAPIResources\",\n    \"arguments\": {\n      \"includeNamespaceScoped\": true,\n      \"includeClusterScoped\": true\n    }\n  }\n}\n```\n\n#### 2. `listResources`\n\nLists all instances of a specific resource type.\n\n**Parameters:**\n- `Kind` (string, required): The kind of resource to list (e.g., \"Pod\", \"Deployment\").\n- `namespace` (string, optional): The namespace to list resources from. If omitted, lists across all namespaces for namespaced resources (subject to RBAC).\n- `labelSelector` (string, optional): Filter resources by label selector (e.g., \"app=nginx,env=prod\").\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"listResources\",\n    \"arguments\": {\n      \"Kind\": \"Pod\",\n      \"namespace\": \"default\",\n      \"labelSelector\": \"app=nginx\"\n    }\n  }\n}\n```\n\n#### 3. `getResource`\n\nRetrieves detailed information about a specific resource.\n\n**Parameters:**\n- `kind` (string, required): The kind of resource to get (e.g., \"Pod\", \"Deployment\").\n- `name` (string, required): The name of the resource to get.\n- `namespace` (string, optional): The namespace of the resource (required for namespaced resources).\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getResource\",\n    \"arguments\": {\n      \"kind\": \"Pod\",\n      \"name\": \"nginx-pod\",\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n\n#### 4. `describeResource`\n\nDescribes a resource in the Kubernetes cluster, similar to `kubectl describe`.\n\n**Parameters:**\n- `Kind` (string, required): The kind of resource to describe (e.g., \"Pod\", \"Deployment\").\n- `name` (string, required): The name of the resource to describe.\n- `namespace` (string, optional): The namespace of the resource (required for namespaced resources).\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"describeResource\",\n    \"arguments\": {\n      \"Kind\": \"Pod\",\n      \"name\": \"nginx-pod\",\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n\n#### 5. `getPodsLogs`\n\nRetrieves the logs of a specific pod.\n\n**Parameters:**\n- `Name` (string, required): The name of the pod.\n- `namespace` (string, required): The namespace of the pod.\n- `containerName` (string, optional): The specific container name within the pod. If omitted:\n    - If the pod has one container, its logs are fetched.\n    - If the pod has multiple containers, logs from all containers are fetched and concatenated.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getPodsLogs\",\n    \"arguments\": {\n      \"Name\": \"my-app-pod-12345\",\n      \"namespace\": \"production\",\n      \"containerName\": \"main-container\"\n    }\n  }\n}\n```\n\n#### 6. `getNodeMetrics`\n\nRetrieves resource usage metrics for a specific node.\n\n**Parameters:**\n- `Name` (string, required): The name of the node.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getNodeMetrics\",\n    \"arguments\": {\n      \"Name\": \"worker-node-1\"\n    }\n  }\n}\n```\n\n#### 7. `getPodMetrics`\n\nRetrieves CPU and Memory metrics for a specific pod.\n\n**Parameters:**\n- `namespace` (string, required): The namespace of the pod.\n- `podName` (string, required): The name of the pod.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getPodMetrics\",\n    \"arguments\": {\n      \"namespace\": \"default\",\n      \"podName\": \"my-app-pod-67890\"\n    }\n  }\n}\n```\n\n#### 8. `getEvents`\n\nRetrieves events for a specific namespace or resource.\n\n**Parameters:**\n- `namespace` (string, optional): The namespace to get events from. If omitted, events from all namespaces are considered (subject to RBAC).\n- `resourceName` (string, optional): The name of a specific resource (e.g., a Pod name) to filter events for.\n- `resourceKind` (string, optional): The kind of the specific resource (e.g., \"Pod\") if `resourceName` is provided.\n\n**Example (Namespace Events):**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getEvents\",\n    \"arguments\": {\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n\n**Example (Resource Events):**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getEvents\",\n    \"arguments\": {\n      \"namespace\": \"production\",\n      \"resourceName\": \"my-app-pod-12345\",\n      \"resourceKind\": \"Pod\"\n    }\n  }\n}\n```\n\n#### 9. `createOrUpdateResource`\n\nCreates a new resource or updates an existing one from a JSON manifest.\n\n**Parameters:**\n- `manifest` (string, required): The JSON manifest of the resource.\n- `namespace` (string, optional): The namespace in which to create/update the resource. If the manifest contains a namespace, this parameter can be used to override it. If not provided and the manifest doesn't specify one, \"default\" might be assumed or it might be an error depending on the resource type.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"createResource\",\n    \"arguments\": {\n      \"kind\": \"Deployment\",\n      \"namespace\": \"default\",\n      \"manifest\": \"{\\\"apiVersion\\\":\\\"apps/v1\\\",\\\"kind\\\":\\\"Deployment\\\",\\\"metadata\\\":{\\\"name\\\":\\\"nginx-deployment\\\"},\\\"spec\\\":{\\\"replicas\\\":1,\\\"selector\\\":{\\\"matchLabels\\\":{\\\"app\\\":\\\"nginx\\\"}},\\\"template\\\":{\\\"metadata\\\":{\\\"labels\\\":{\\\"app\\\":\\\"nginx\\\"}},\\\"spec\\\":{\\\"containers\\\":[{\\\"name\\\":\\\"nginx\\\",\\\"image\\\":\\\"nginx:latest\\\"}]}}}}\"\n    }\n  }\n}\n```\n\n#### 10. `createOrUpdateResourceYAML`\n\nCreates a new resource or updates an existing one from a YAML manifest. This tool is specifically optimized for YAML input and provides better error handling for YAML parsing issues.\n\n**Parameters:**\n- `manifest` (string, required): The YAML manifest of the resource.\n- `namespace` (string, optional): The namespace in which to create/update the resource. If the manifest contains a namespace, this parameter can be used to override it. If not provided and the manifest doesn't specify one, \"default\" might be assumed or it might be an error depending on the resource type.\n- `kind` (string, optional): The kind of the resource. If not provided, the kind will be inferred from the YAML manifest.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"createOrUpdateResourceYAML\",\n    \"arguments\": {\n      \"namespace\": \"default\",\n      \"manifest\": \"apiVersion: v1\\nkind: Pod\\nmetadata:\\n  name: my-new-pod\\nspec:\\n  containers:\\n  - name: nginx\\n    image: nginx:latest\"\n    }\n  }\n}\n```\n\n#### 11. `rolloutRestart`\n\nTriggers a rolling restart of a Kubernetes resource that supports spec.template.metadata.annotations. This includes Deployment, DaemonSet, StatefulSet, Job, and similar resources.\n\n**Parameters:**\n- `kind` (string, required): The kind of resource (e.g., \"Deployment\", \"StatefulSet\").\n- `name`: (string, required): The name of the resource to restart.\n- `namespace` (string, required for namespaced resources): The namespace of the resource.\n\n**Example (StatefulSet):**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"rolloutRestart\",\n    \"arguments\": {\n      \"kind\": \"StatefulSet\",\n      \"name\": \"redis-cluster-01\",\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n**Example (Deployment):**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"rolloutRestart\",\n    \"arguments\": {\n      \"kind\": \"Deployment\",\n      \"name\": \"my-app-deployment\",\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n\n#### 12. `deleteResource`\n\nDeletes a specific resource from the Kubernetes cluster.\n\n**Parameters:**\n- `kind` (string, required): The type of resource to delete.\n- `name` (string, required): The name of the resource to delete.\n- `namespace` (string, optional): The namespace of the resource (required for namespaced resources).\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"deleteResource\",\n    \"arguments\": {\n      \"kind\": \"Pod\",\n      \"name\": \"my-pod\",\n      \"namespace\": \"default\"\n    }\n  }\n}\n```\n\n#### 13. `getIngresses`\n\nRetrieves ingress resources from the Kubernetes cluster.\nYou can filter ingresses by host. If no host is provided, all ingresses are returned.\n\n**Parameters:**\n- `host` (string, optional): The host to filter ingresses by. If omitted, all ingresses are included.\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"getIngresses\",\n    \"arguments\": {\n      \"host\": \"example.com\"\n    }\n  }\n}\n```\n\n### Helm Operations\n\n#### 14. `helmInstall`\n\nInstall a Helm chart to the Kubernetes cluster.\n\n**Parameters:**\n- `releaseName` (string, required): Name of the Helm release\n- `chartName` (string, required): Name or path of the Helm chart\n- `namespace` (string, optional): Kubernetes namespace for the release (defaults to \"default\")\n- `repoURL` (string, optional): Helm repository URL\n- `values` (object, optional): Values to override in the chart\n\n**Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"helmInstall\",\n    \"arguments\": {\n      \"releaseName\": \"my-nginx\",\n      \"chartName\": \"bitnami/nginx\",\n      \"namespace\": \"web\",\n      \"repoURL\": \"https://charts.bitnami.com/bitnami\",\n      \"values\": {\n        \"replicaCount\": 3,\n        \"service\": {\n          \"type\": \"LoadBalancer\"\n        }\n      }\n    }\n  }\n}\n```\n\n#### 15. `helmUpgrade`\n\nUpgrade an existing Helm release.\n\n**Parameters:**\n- `releaseName` (string, required): Name of the Helm release\n- `chartName` (string, required): Name or path of the Helm chart\n- `namespace` (string, required): Kubernetes namespace for the release (defaults to \"default\")\n- `repoURL` (string, required): Helm repository URL\n- `values` (object, required): Values to override in the chart\n  **Example:**\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"helmUpgrade\",\n    \"arguments\": {\n      \"releaseName\": \"my-nginx\",\n      \"chartName\": \"nginx\",\n      \"namespace\": \"web\",\n      \"repoURL\": \"https://charts.bitnami.com/bitnami\",\n      \"values\": {\n        \"replicaCount\": 2,\n        \"service\": {\n          \"type\": \"NodePort\"\n        }\n      }\n    }\n  }\n}\n```\n\n#### 16. `helmList`\n\nList all Helm releases in the cluster or a specific namespace.\n\n#### 17. `helmGet`\n\nGet details of a specific Helm release.\n\n#### 18. `helmHistory`\n\nGet the history of a Helm release.\n\n#### 19. `helmRollback`\n\nRollback a Helm release to a previous revision.\n\n#### 20. `helmUninstall`\n\nUninstall a Helm release from the Kubernetes cluster.\n\n### Adding New Tools\n\n1.  **Define the Tool**: In `tools/tools.go`, define a function that returns an `mcp.Tool` structure. This includes the tool's name, description, and input/output schemas.\n2.  **Implement the Handler**: In `handlers/handlers.go`, create a handler function. This function takes `*k8s.Client` as an argument and returns a function with the signature `func(context.Context, mcp.ToolInput) (mcp.ToolOutput, error)`. This inner function will contain the logic for your tool.\n3.  **Register the Tool**: In `main.go`, add your new tool to the MCP server instance using `s.AddTool(tools.YourToolDefinitionFunction(), handlers.YourToolHandlerFunction(client))`.\n\n## Contributing\n\nContributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for details on how to contribute to this project.\n\n## License\ngholizade.net@gmail.com\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n<a href=\"https://glama.ai/mcp/servers/@reza-gholizade/k8s-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@reza-gholizade/k8s-mcp-server/badge\" />\n</a>\n\n## VS Code Integration\n\n### Quick Setup\n\n#### Automatic Installation (Recommended)\n\n**macOS/Linux:**\n```bash\ncurl -sSL https://raw.githubusercontent.com/reza-gholizade/k8s-mcp-server/main/scripts/install-vscode-config.sh | bash\n```\n\n**Windows (PowerShell):**\n```powershell\niex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/reza-gholizade/k8s-mcp-server/main/scripts/install-vscode-config.ps1'))\n```\n\n#### Manual Installation\n\n1. **Install the MCP extension in VS Code:**\n   ```bash\n   code --install-extension modelcontextprotocol.mcp\n   ```\n\n2. **Add to your VS Code settings.json:**\n\n   Open VS Code settings (Cmd/Ctrl + ,) → Open Settings JSON → Add:\n\n   **macOS/Linux:**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server\",\n         \"args\": [\"--mode\", \"stdio\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:HOME}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Read-Only Mode (recommended for safety):**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server\",\n         \"args\": [\"--mode\", \"stdio\", \"--read-only\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:HOME}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Kubernetes Tools Only:**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server\",\n         \"args\": [\"--mode\", \"stdio\", \"--no-helm\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:HOME}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Helm Tools Only:**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server\",\n         \"args\": [\"--mode\", \"stdio\", \"--no-k8s\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:HOME}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Read-Only with Kubernetes Tools Only:**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server\",\n         \"args\": [\"--mode\", \"stdio\", \"--read-only\", \"--no-helm\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:HOME}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n   **Windows:**\n   ```json\n   {\n     \"mcp.mcpServers\": {\n       \"k8s-mcp-server\": {\n         \"command\": \"k8s-mcp-server.exe\",\n         \"args\": [\"--mode\", \"stdio\"],\n         \"env\": {\n           \"KUBECONFIG\": \"${env:USERPROFILE}/.kube/config\"\n         }\n       }\n     }\n   }\n   ```\n\n3. **Ensure the binary is in your PATH:**\n\n   Download the appropriate binary from the [releases page](https://github.com/reza-gholizade/k8s-mcp-server/releases) and add it to your system PATH.\n\n4. **Restart VS Code**\n\n### Usage in VS Code\n\nOnce configured, you can use the Kubernetes MCP server in VS Code with Claude or other MCP-compatible tools:\n\n1. Open VS Code\n2. Access Claude (or other MCP-enabled AI assistant)\n3. Use natural language to interact with your Kubernetes cluster:\n   - \"List all pods in the default namespace\"\n   - \"Show me the logs for pod nginx-123\"\n   - \"Get the CPU usage for worker-node-1\"\n   - \"Describe the deployment called my-app\"\n\n### Configuration Options\n\nYou can customize the configuration by modifying the settings:\n\n```json\n{\n  \"mcp.mcpServers\": {\n    \"k8s-mcp-server\": {\n      \"command\": \"k8s-mcp-server\",\n      \"args\": [\"--mode\", \"stdio\"],\n      \"env\": {\n        \"KUBECONFIG\": \"/path/to/your/kubeconfig\",\n        \"KUBERNETES_CONTEXT\": \"your-context-name\"\n      }\n    }\n  }\n}\n```\n\n### Troubleshooting\n\n- **Binary not found**: Ensure `k8s-mcp-server` is in your PATH\n- **Kubernetes connection issues**: Verify your `KUBECONFIG` path is correct\n- **Permission errors**: Ensure your kubeconfig has the necessary RBAC permissions\n- **Extension not loading**: Restart VS Code after configuration changes\n",
  "category": "Development",
  "quality_score": 66,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {
        "k8s-mcp-server-stdio": {
          "command": "./k8s-mcp-server",
          "args": ["--mode", "stdio"],
          "env": {}
        },
        "k8s-mcp-server-sse-env": {
          "command": "./k8s-mcp-server",
          "args": [],
          "env": {
            "SERVER_MODE": "sse",
            "SERVER_PORT": "9090"
          }
        },
        "k8s-mcp-server-readonly-sse": {
          "command": "./k8s-mcp-server",
          "args": ["--mode", "sse", "--read-only"],
          "env": {}
        },
        "ginnux-k8s-mcp-server-docker": {
          "command": "docker",
          "args": [
            "run",
            "-p",
            "8080:8080",
            "-v",
            "~/.kube/config:/home/appuser/.kube/config:ro",
            "ginnux/k8s-mcp-server:latest"
          ],
          "env": {}
        },
        "ginnux-k8s-mcp-server-docker-stdio": {
          "command": "docker",
          "args": [
            "run",
            "-i",
            "--rm",
            "-v",
            "~/.kube/config:/home/appuser/.kube/config:ro",
            "ginnux/k8s-mcp-server:latest",
            "--mode",
            "stdio"
          ],
          "env": {}
        },
        "ginnux-k8s-mcp-server-docker-streamable-http-port-9090": {
          "command": "docker",
          "args": [
            "run",
            "-p",
            "9090:9090",
            "-v",
            "~/.kube/config:/home/appuser/.kube/config:ro",
            "ginnux/k8s-mcp-server:latest",
            "--mode",
            "streamable-http",
            "--port",
            "9090"
          ],
          "env": {}
        },
        "ginnux-k8s-mcp-server-docker-compose": {
          "command": "docker-compose",
          "args": ["up"],
          "env": {
            "KUBECONFIG": "/home/appuser/.kube/config",
            "SERVER_MODE": "sse",
            "SERVER_PORT": "8"
          }
        }
      }
    },
    "oauth": {
      "provider": "google",
      "required": true
    }
  },
  "github_info": {
    "owner": "reza-gholizade",
    "repo": "k8s-mcp-server",
    "url": "https://github.com/reza-gholizade/k8s-mcp-server",
    "name": "reza-gholizade__k8s-mcp-server",
    "path": null,
    "stars": 75,
    "contributors": 8,
    "issues": 0,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "600b0538b64aa185f0ddb3ee8a0dd6b6f1e41e4c"
  },
  "programming_language": "Go",
  "framework": null,
  "last_scraped_at": "2025-09-07T22:12:35.643Z",
  "evaluation_model": "gemini-2.5-pro",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "mark3labs/mcp-go",
      "importance": 10
    },
    {
      "name": "helm.sh/helm/v3",
      "importance": 9
    },
    {
      "name": "k8s.io/client-go",
      "importance": 9
    },
    {
      "name": "k8s.io/api",
      "importance": 8
    },
    {
      "name": "k8s.io/apimachinery",
      "importance": 8
    },
    {
      "name": "k8s.io/metrics",
      "importance": 7
    }
  ],
  "raw_dependencies": "=== go.mod ===\nmodule github.com/reza-gholizade/k8s-mcp-server\n\ngo 1.24.1\n\ntoolchain go1.24.6\n\nrequire (\n\tgithub.com/mark3labs/mcp-go v0.38.0\n\thelm.sh/helm/v3 v3.18.6\n\tk8s.io/api v0.34.0\n\tk8s.io/apimachinery v0.34.0\n\tk8s.io/client-go v0.34.0\n\tk8s.io/metrics v0.34.0\n\tsigs.k8s.io/yaml v1.6.0\n)\n\nrequire (\n\tdario.cat/mergo v1.0.1 // indirect\n\tgithub.com/Azure/go-ansiterm v0.0.0-20250102033503-faa5f7b0171c // indirect\n\tgithub.com/BurntSushi/toml v1.5.0 // indirect\n\tgithub.com/MakeNowJust/heredoc v1.0.0 // indirect\n\tgithub.com/Masterminds/goutils v1.1.1 // indirect\n\tgithub.com/Masterminds/semver/v3 v3.3.0 // indirect\n\tgithub.com/Masterminds/sprig/v3 v3.3.0 // indirect\n\tgithub.com/Masterminds/squirrel v1.5.4 // indirect\n\tgithub.com/asaskevich/govalidator v0.0.0-20230301143203-a9d515a09cc2 // indirect\n\tgithub.com/bahlo/generic-list-go v0.2.0 // indirect\n\tgithub.com/blang/semver/v4 v4.0.0 // indirect\n\tgithub.com/buger/jsonparser v1.1.1 // indirect\n\tgithub.com/chai2010/gettext-go v1.0.2 // indirect\n\tgithub.com/containerd/containerd v1.7.27 // indirect\n\tgithub.com/containerd/errdefs v0.3.0 // indirect\n\tgithub.com/containerd/log v0.1.0 // indirect\n\tgithub.com/containerd/platforms v0.2.1 // indirect\n\tgithub.com/cyphar/filepath-securejoin v0.4.1 // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/emicklei/go-restful/v3 v3.12.2 // indirect\n\tgithub.com/evanphx/json-patch v5.9.11+incompatible // indirect\n\tgithub.com/exponent-io/jsonpath v0.0.0-20210407135951-1de76d718b3f // indirect\n\tgithub.com/fatih/color v1.13.0 // indirect\n\tgithub.com/fxamacker/cbor/v2 v2.9.0 // indirect\n\tgithub.com/go-errors/errors v1.4.2 // indirect\n\tgithub.com/go-gorp/gorp/v3 v3.1.0 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-openapi/jsonpointer v0.21.0 // indirect\n\tgithub.com/go-openapi/jsonreference v0.20.2 // indirect\n\tgithub.com/go-openapi/swag v0.23.0 // indirect\n\tgithub.com/gobwas/glob v0.2.3 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/google/btree v1.1.3 // indirect\n\tgithub.com/google/gnostic-models v0.7.0 // indirect\n\tgithub.com/google/go-cmp v0.7.0 // indirect\n\tgithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/gorilla/websocket v1.5.4-0.20250319132907-e064f32e3674 // indirect\n\tgithub.com/gosuri/uitable v0.0.4 // indirect\n\tgithub.com/gregjones/httpcache v0.0.0-20190611155906-901d90724c79 // indirect\n\tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n\tgithub.com/hashicorp/go-multierror v1.1.1 // indirect\n\tgithub.com/huandu/xstrings v1.5.0 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/invopop/jsonschema v0.13.0 // indirect\n\tgithub.com/jmoiron/sqlx v1.4.0 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/klauspost/compress v1.18.0 // indirect\n\tgithub.com/lann/builder v0.0.0-20180802200727-47ae307949d0 // indirect\n\tgithub.com/lann/ps v0.0.0-20150810152359-62de8c46ede0 // indirect\n\tgithub.com/lib/pq v1.10.9 // indirect\n\tgithub.com/liggitt/tabwriter v0.0.0-20181228230101-89fcab3d43de // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.17 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.9 // indirect\n\tgithub.com/mitchellh/copystructure v1.2.0 // indirect\n\tgithub.com/mitchellh/go-wordwrap v1.0.1 // indirect\n\tgithub.com/mitchellh/reflectwalk v1.0.2 // indirect\n\tgithub.com/moby/spdystream v0.5.0 // indirect\n\tgithub.com/moby/term v0.5.2 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.3-0.20250322232337-35a7c28c31ee // indirect\n\tgithub.com/monochromegane/go-gitignore v0.0.0-20200626010858-205db1a8cc00 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/mxk/go-flowrate v0.0.0-20140419014527-cca7078d478f // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.1.1 // indirect\n\tgithub.com/peterbourgon/diskv v2.0.1+incompatible // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/rubenv/sql-migrate v1.8.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/santhosh-tekuri/jsonschema/v6 v6.0.2 // indirect\n\tgithub.com/shopspring/decimal v1.4.0 // indirect\n\tgithub.com/sirupsen/logrus v1.9.3 // indirect\n\tgithub.com/spf13/cast v1.7.1 // indirect\n\tgithub.com/spf13/cobra v1.9.1 // indirect\n\tgithub.com/spf13/pflag v1.0.7 // indirect\n\tgithub.com/wk8/go-ordered-map/v2 v2.1.8 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgithub.com/xlab/treeprint v1.2.0 // indirect\n\tgithub.com/yosida95/uritemplate/v3 v3.0.2 // indirect\n\tgo.yaml.in/yaml/v2 v2.4.2 // indirect\n\tgo.yaml.in/yaml/v3 v3.0.4 // indirect\n\tgolang.org/x/crypto v0.40.0 // indirect\n\tgolang.org/x/net v0.41.0 // indirect\n\tgolang.org/x/oauth2 v0.28.0 // indirect\n\tgolang.org/x/sync v0.16.0 // indirect\n\tgolang.org/x/sys v0.34.0 // indirect\n\tgolang.org/x/term v0.33.0 // indirect\n\tgolang.org/x/text v0.27.0 // indirect\n\tgolang.org/x/time v0.9.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241209162323-e6fa225c2576 // indirect\n\tgoogle.golang.org/grpc v1.68.1 // indirect\n\tgoogle.golang.org/protobuf v1.36.5 // indirect\n\tgopkg.in/evanphx/json-patch.v4 v4.12.0 // indirect\n\tgopkg.in/inf.v0 v0.9.1 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\tk8s.io/apiextensions-apiserver v0.33.3 // indirect\n\tk8s.io/apiserver v0.33.3 // indirect\n\tk8s.io/cli-runtime v0.33.3 // indirect\n\tk8s.io/component-base v0.33.3 // indirect\n\tk8s.io/klog/v2 v2.130.1 // indirect\n\tk8s.io/kube-openapi v0.0.0-20250710124328-f3f2b991d03b // indirect\n\tk8s.io/kubectl v0.33.3 // indirect\n\tk8s.io/utils v0.0.0-20250604170112-4c0f3b243397 // indirect\n\toras.land/oras-go/v2 v2.6.0 // indirect\n\tsigs.k8s.io/json v0.0.0-20241014173422-cfa47c3a1cc8 // indirect\n\tsigs.k8s.io/kustomize/api v0.19.0 // indirect\n\tsigs.k8s.io/kustomize/kyaml v0.19.0 // indirect\n\tsigs.k8s.io/randfill v1.0.0 // indirect\n\tsigs.k8s.io/structured-merge-diff/v6 v6.3.0 // indirect\n)\n"
}
