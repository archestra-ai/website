{
  "name": "secretiveshell__mcp-searxng",
  "display_name": "MCP-searxng",
  "description": "MCP server for connecting agentic systems to search systems via searXNG",
  "author": {
    "name": "SecretiveShell"
  },
  "server": {
    "command": "uvx",
    "args": ["mcp-searxng"],
    "env": {
      "SEARXNG_URL": "${user_config.searxng_url}"
    },
    "type": "local"
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "searxng_url": {
      "type": "string",
      "title": "SearXNG URL",
      "description": "The URL of the SearXNG server",
      "default": "http://localhost:8080",
      "required": false
    }
  },
  "readme": "# MCP-searxng\n\nAn MCP server for connecting agentic systems to search systems via [searXNG](https://docs.searxng.org/).\n\n<p align=\"center\">\n  <a href=\"https://glama.ai/mcp/servers/sl2zl8vaz8\">\n    <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/sl2zl8vaz8/badge\" alt=\"MCP SearxNG Badge\"/>\n  </a>\n</p>\n\n## Tools\n\nSearch the web with SearXNG\n\n## Prompts\n\n```python\nsearch(query: str) -> f\"Searching for {query} using searXNG\"\n```\n\n## Usage\n\n### via uvx\n\n1) configure your client JSON like\n\n```json\n{\n  \"mcpServers\": {\n    \"searxng\": {\n      \"command\": \"uvx\", \n      \"args\": [\n        \"mcp-searxng\"\n      ]\n    }\n  }\n}\n```\n\n### via git clone\n\n1) Add the server to claude desktop (the entrypoint is main.py)\n\nClone the repo and add this JSON to claude desktop\n\nyou can run this server with `uvx mcp-searxng`, or use a local copy of the repo\n\n```json\n{\n  \"mcpServers\": {\n    \"searxng\": {\n      \"command\": \"uv\", \n      \"args\": [\n        \"--project\",\n        \"/absoloute/path/to/MCP-searxng/\",\n        \"run\",\n        \"/absoloute/path/to/MCP-searxng/mcp-searxng/main.py\"\n      ]\n    }\n  }\n}\n```\n\nyou will need to change the paths to match your environment\n\n### Custom SearXNG URL\n\n2) set the environment variable `SEARXNG_URL` to the URL of the searxng server (default is `http://localhost:8080`)\n\n3) run your MCP client and you should be able to search the web with searxng\n\nNote: if you are using claude desktop make sure to kill the process (task manager or equivalent) before running the server again\n",
  "category": "AI Tools",
  "quality_score": 51,
  "archestra_config": {
    "client_config_permutations": {
      "mcp-searxng": {
        "command": "uvx",
        "args": ["mcp-searxng"],
        "env": {}
      },
      "mcp-searxng-local-path": {
        "command": "uv",
        "args": [
          "--project",
          "/absoloute/path/to/MCP-searxng/",
          "run",
          "/absoloute/path/to/MCP-searxng/mcp-searxng/main.py"
        ],
        "env": {}
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": false
  },
  "github_info": {
    "owner": "SecretiveShell",
    "repo": "MCP-searxng",
    "url": "https://github.com/SecretiveShell/MCP-searxng",
    "name": "MCP-searxng",
    "path": null,
    "stars": 85,
    "contributors": 3,
    "issues": 2,
    "releases": false,
    "ci_cd": false,
    "latest_commit_hash": "f4c3b2b16d806d1215196df2377252aa2a873192"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:30.909Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": true,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "httpx",
      "importance": 7
    },
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "pydantic",
      "importance": 8
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"mcp-searxng\"\nversion = \"0.1.0\"\ndescription = \"MCP server for connecting agentic systems to search systems via searXNG\"\nreadme = \"README.md\"\nauthors = [\n    { name = \"TerminalMan\", email = \"84923604+SecretiveShell@users.noreply.github.com\" }\n]\nrequires-python = \">=3.12\"\ndependencies = [\n    \"httpx>=0.28.1\",\n    \"mcp>=1.1.2\",\n    \"pydantic>=2.10.3\",\n]\n\n[project.scripts]\nmcp-searxng = \"mcp_searxng:main\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n"
}
