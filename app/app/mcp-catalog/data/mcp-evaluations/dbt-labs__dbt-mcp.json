{
  "dxt_version": "0.1.0",
  "name": "dbt-labs__dbt-mcp",
  "display_name": "dbt-mcp",
  "version": "1.0.0",
  "description": "A MCP (Model Context Protocol) server for interacting with dbt.",
  "author": {
    "name": "dbt-labs"
  },
  "server": {
    "type": "python",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "unknown",
      "args": [],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "# dbt MCP Server\n\nThis MCP (Model Context Protocol) server provides various tools to interact with dbt. You can use this MCP server to provide AI agents with context of your project in dbt Core, dbt Fusion, and dbt Platform.\n\nRead our documentation [here](https://docs.getdbt.com/docs/dbt-ai/about-mcp) to learn more. [This](https://docs.getdbt.com/blog/introducing-dbt-mcp-server) blog post provides more details for what is possible with the dbt MCP server.\n\n## Feedback\n\nIf you have comments or questions, create a GitHub Issue or join us in [the community Slack](https://www.getdbt.com/community/join-the-community) in the `#tools-dbt-mcp` channel.\n\n\n## Architecture\n\nThe dbt MCP server architecture allows for your agent to connect to a variety of tools.\n\n![architecture diagram of the dbt MCP server](https://raw.githubusercontent.com/dbt-labs/dbt-mcp/refs/heads/main/docs/d2.png)\n\n## Examples\n\nCommonly, you will connect the dbt MCP server to an agent product like Claude or Cursor. However, if you are interested in creating your own agent, check out [the examples directory](https://github.com/dbt-labs/dbt-mcp/tree/main/examples) for how to get started.\n\n## Contributing\n\nRead `CONTRIBUTING.md` for instructions on how to get involved!\n",
  "category": "Data",
  "quality_score": 73,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {
        "dbt-mcp": {
          "command": "uvx",
          "args": ["--env-file", "<path-to-.env-file>", "dbt-mcp"],
          "env": {}
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "dbt-labs",
    "repo": "dbt-mcp",
    "url": "https://github.com/dbt-labs/dbt-mcp",
    "name": "dbt-labs__dbt-mcp",
    "path": null,
    "stars": 369,
    "contributors": 22,
    "issues": 53,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "4bedba495da4c9bc570bb4cb61fefcda47de5d45"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-07T22:15:27.623Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": true,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "dbt-protos",
      "importance": 8
    },
    {
      "name": "dbt-sl-sdk",
      "importance": 9
    },
    {
      "name": "dbtlabs-vortex",
      "importance": 8
    },
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "pandas",
      "importance": 7
    },
    {
      "name": "pydantic-settings",
      "importance": 8
    },
    {
      "name": "pyyaml",
      "importance": 7
    },
    {
      "name": "requests",
      "importance": 8
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"dbt-mcp\"\ndescription = \"A MCP (Model Context Protocol) server for interacting with dbt resources.\"\nauthors = [{ name = \"dbt Labs\" }]\nreadme = \"README.md\"\nlicense = { file = \"LICENSE\" }\nrequires-python = \">=3.12\"\ndynamic = [\"version\"]\nclassifiers = [\n  \"License :: OSI Approved :: Apache Software License\",\n  \"Programming Language :: Python :: 3\",\n  \"Operating System :: OS Independent\",\n  \"Development Status :: 4 - Beta\",\n  \"Intended Audience :: Developers\",\n]\ndependencies = [\n  # Pinning all dependencies because this app is installed with uvx\n  # and we want to have a consistent install as much as possible.\n  \"dbt-protos==1.0.317\",\n  \"dbt-sl-sdk[sync]==0.13.0\",\n  \"dbtlabs-vortex==0.2.0\",\n  \"mcp[cli]==1.10.1\",\n  \"pandas==2.2.3\",\n  \"pydantic-settings==2.10.1\",\n  \"pyyaml==6.0.2\",\n  \"requests==2.32.4\",\n]\n[dependency-groups]\ndev = [\n  \"ruff>=0.11.2\",\n  \"types-requests>=2.32.0.20250328\",\n  \"mypy>=1.12.1\",\n  \"pre-commit>=4.2.0\",\n  \"pytest-asyncio>=0.26.0\",\n  \"pytest>=8.3.5\",\n  \"openai>=1.71.0\",\n  \"pyarrow-stubs>=19.1\",\n  \"types-pyyaml>=6.0.12.20250516\",\n]\n\n[project.urls]\nDocumentation = \"https://github.com/dbt-labs/dbt-mcp#readme\"\nIssues = \"https://github.com/dbt-labs/dbt-mcp/issues\"\nSource = \"https://github.com/dbt-labs/dbt-mcp\"\nChangelog = \"https://github.com/dbt-labs/dbt-mcp/blob/main/CHANGELOG.md\"\n\n[project.scripts]\ndbt-mcp = \"dbt_mcp.main:main\"\n\n[build-system]\nrequires = [\"hatchling\", \"hatch-vcs\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.hatch.build.targets.sdist]\ninclude = [\"src/dbt_mcp/**/*\", \"README.md\", \"LICENSE\"]\n\n[tool.hatch.version]\nsource = \"vcs\"\n\n[tool.pytest.ini_options]\nasyncio_mode = \"auto\"\nasyncio_default_fixture_loop_scope = \"function\"\npythonpath = [\".\", \"src\"]\n"
}
