{
  "name": "tomatio13__mcp-server-tavily",
  "display_name": "mcp-server-tavily",
  "description": "Taivily APIを利用するMCP Serverです。Officialが提供される前に開発しました",
  "author": {
    "name": "Tomatio13"
  },
  "server": {
    "command": "uv",
    "args": ["--directory", "${__dirname}", "run", "tavily-search"],
    "env": {
      "TAVILY_API_KEY": "${user_config.tavily_api_key}",
      "PYTHONIOENCODING": "utf-8"
    },
    "type": "local"
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "tavily_api_key": {
      "type": "string",
      "title": "Tavily API Key",
      "description": "Your API key for the Tavily search service.",
      "sensitive": true,
      "required": true
    }
  },
  "readme": "# tavily-search MCP server\n\nA MCP server project\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/Tomatio13/mcp-server-tavily)](https://archestra.ai/mcp-catalog/tomatio13__mcp-server-tavily)\n<a href=\"https://glama.ai/mcp/servers/s0hka6zney\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/s0hka6zney/badge\" alt=\"tavily-search MCP server\" /></a>\n\n## Components\n\nThis server uses the Tavily API to perform searches based on specified queries.\n- Search results are returned in text format.\n- Search results include AI responses, URIs, and titles of the search results.\n\n### Tools\n\nThis server implements the following tools:\n- search: Performs searches based on specified queries\n  - Required argument: \"query\"\n  - Optional argument: \"search_depth\" (basic or advanced)\n\n### Installing via Smithery\n\nTo install Tavily Search for Claude Desktop automatically via [Smithery](https://smithery.ai/server/tavily-search):\n\n```bash\nnpx -y @smithery/cli install tavily-search --client claude\n```\n\n### Install\n\n1. Download the repository.\n```bash\ngit clone https://github.com/Tomatio13/mcp-server-tavily.git\n``` \n2. Open the Claude Desktop configuration file.\n```\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `C:\\Users\\[username]\\AppData\\Roaming\\Claude\\claude_desktop_config.json`\n```\n\n3. Edit the configuration file as follows:\n  ```yaml\n  \"mcpServers\": {\n    \"tavily-search\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\\\your_path\\\\mcp-server-tavily\",\n        \"run\",\n        \"tavily-search\"\n      ],\n      \"env\": {\n        \"TAVILY_API_KEY\": \"YOUR_TAVILY_API_KEY\",\n        \"PYTHONIOENCODING\": \"utf-8\"\n      }\n    }\n  }\n  ```\n\n4. Restart Claude Desktop.\n\n## Usage\n\nIn Claude Desktop, when you ask \"Please search for something\", you will receive search results.\n\nSearch example:\n```\nPlease search in detail for today's events in Kamakura\n```\nResponse example:\n```\nAccording to the search results, the following events start today, December 1st:\n\"Kamakura Promotion Photo Contest 2025\"\nPeriod: December 1, 2024 - January 31, 2025\nA photo contest for those who love Kamakura\nApplications start accepting from today\nAlso, as a related upcoming event:\nOn December 7th, an exhibition by 12 Kamakura artists will be held at the Seibu Press Inn Kamakura Ofuna Station East Exit Lounge.\n```\n\n## Log Storage Location\n\nLogs are stored in the following location:\n\nFor Windows:\n```\nC:\\Users\\[username]\\AppData\\Roaming\\Claude\\logs\\mcp-server-tavily-search\n```\n## Execution with Cursor\n\n1. Create a shell script (e.g., `script.sh`) as shown below:\n\n```bash\n#!/bin/bash\nTARGET_DIR=/path/to/mcp-server-tavily\ncd \"${TARGET_DIR}\"\nexport TAVILY_API_KEY=\"your-api-key\"\nexport PYTHONIOENCODING=utf-8\nuv --directory $PWD run tavily-search\n```\n\n2. Configure Cursor's MCP Server settings as follows:\n\n```\nName: tavily-search\nType: command\nCommand: /path/to/your/script.sh\n```\n\n3. Save the settings.\n\n4. Once the settings are saved, you can ask Cursor's Composer-Agent to \"search for something,\" and it will return the search results.\n\n## Running in Local Environment Using Docker Compose\n\n### Purpose\nFor operating systems other than Windows/MacOS where Claude Desktop cannot be used,\nthis section explains how to set up and run an MCP server and client in a local environment\nusing Docker compose.\n\n### Steps\n1. Install Docker.\n2. Download the repository.\n```bash\ngit clone https://github.com/Tomatio13/mcp-server-tavily.git\n``` \n3. Run Docker compose.\n```bash\ndocker compose up -d\n``` \n4. Execute the client.\n```bash\ndocker exec mcp_server uv --directory /usr/src/app/mcp-server-tavily/src run client.py\n```\n5. Execution Results\n6. After searching for available tools as shown below, a query will be issued to Tavily and a response will be returned:\n```bash\n2024-12-01 11:21:56,930 - tavily-search-server - INFO - Starting Tavily search server\n2024-12-01 11:21:56,932 - tavily-search-server - INFO - Server initialized, starting main loop\n2024-12-01 11:21:56,936 - mcp.server - INFO - Processing request of type ListToolsRequest\n2024-12-01 11:21:56,936 - tavily-search-server - INFO - Listing available tools\n利用可能なツール: nextCursor=None tools=[Tool(name='search', description='Search the web using Tavily API', inputSchema={'type': 'object', 'properties': {'query': {'type': 'string', 'description': 'Search query'}, 'search_depth': {'type': 'string', 'description': 'Search depth (basic or advanced)', 'enum': ['basic', 'advanced']}}, 'required': ['query']})]\n2024-12-01 11:21:56,937 - mcp.server - INFO - Processing request of type CallToolRequest\n2024-12-01 11:21:56,937 - tavily-search-server - INFO - TOOL_CALL_DEBUG: Tool called - name: search, arguments: {'query': '今日の東京タワーのイベントを教えて下さい'}\n2024-12-01 11:21:56,937 - tavily-search-server - INFO - Executing search with query: '今日の東京タワーのイベントを教えて下さい'\n2024-12-01 11:22:00,243 - httpx - INFO - HTTP Request: POST https://api.tavily.com/search \"HTTP/1.1 200 OK\"\n2024-12-01 11:22:00,243 - tavily-search-server - INFO - Search successful - Answer generated\n2024-12-01 11:22:00,243 - tavily-search-server - INFO - Search successful - Results available\nツール実行結果: content=[TextContent(type='text', text='AI Answer:\\n今日の東京タワーのイベントは以下の通りです：\\n1. Candlelight: エド・シーランとコールドプレイのヒットメドレー - 12月01日\\n2. チームラボプラネッツ TOKYO - 12月01日から1月21日\\n\\n他にもイベントがある可能性がありますので、公式ウェブサイト等で最新情報をご確認ください。\\n\\n\\n\\nSearch Results:\\n\\n1. 東京タワー (東京): 現在のイベントとチケット | Fever\\nURL: https://feverup.com/ja/tokyo/venue/tokyo-tower\\nSummary: Summary not found\\n\\n\\n2. 東京タワー(東京都)の施設で開催するイベント一覧｜ウォーカープラス\\nURL: https://www.walkerplus.com/spot/ar0313s03867/e_list.html\\nSummary: Summary not found\\n\\n\\n3. 東京タワー - Tokyo Tower\\nURL: https://www.tokyotower.co.jp/event/\\nSummary: Summary not found\\n')] isError=False\n``` \n",
  "category": "Search",
  "quality_score": 45,
  "archestra_config": {
    "client_config_permutations": {
      "tavily-search": {
        "command": "uv",
        "args": ["--directory", "C:\\your_path\\mcp-server-tavily", "run", "tavily-search"],
        "env": {
          "TAVILY_API_KEY": "YOUR_TAVILY_API_KEY",
          "PYTHONIOENCODING": "utf-8"
        }
      },
      "tavily-search-cursor": {
        "command": "/path/to/your/script.sh",
        "args": [],
        "env": {
          "TAVILY_API_KEY": "your-api-key",
          "PYTHONIOENCODING": "utf-8"
        }
      },
      "tavily-search-server-docker-compose": {
        "command": "docker",
        "args": ["compose", "up", "-d"],
        "env": {}
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": false
  },
  "github_info": {
    "owner": "Tomatio13",
    "repo": "mcp-server-tavily",
    "url": "https://github.com/Tomatio13/mcp-server-tavily",
    "name": "mcp-server-tavily",
    "path": null,
    "stars": 42,
    "contributors": 3,
    "issues": 1,
    "releases": false,
    "ci_cd": false,
    "latest_commit_hash": "c084ab40ce949bb3768aa0b8f5e3eb86a09e5ed4"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:31.949Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": true,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "tavily-python",
      "importance": 9
    },
    {
      "name": "httpx",
      "importance": 7
    },
    {
      "name": "python-dotenv",
      "importance": 5
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"tavily-search\"\nversion = \"0.1.0\"\ndescription = \"A MCP server project\"\nreadme = \"README.md\"\nrequires-python = \">=3.13\"\ndependencies = [\n \"httpx>=0.28.0\",\n \"mcp>=1.0.0\",\n \"python-dotenv>=1.0.1\",\n \"tavily-python>=0.5.0\",\n]\n\n[build-system]\nrequires = [ \"hatchling\",]\nbuild-backend = \"hatchling.build\"\n\n[project.scripts]\ntavily-search = \"src:main\"\n\n[tool.hatch.build.targets.wheel]\npackages = [\"src\"]\n"
}
