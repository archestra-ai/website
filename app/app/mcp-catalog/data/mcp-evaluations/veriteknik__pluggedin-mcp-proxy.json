{
  "dxt_version": "0.1.0",
  "name": "veriteknik__pluggedin-mcp-proxy",
  "display_name": "pluggedin-mcp-proxy",
  "version": "1.0.0",
  "description": "Plugged.in MCP Server manages all your other MCPs in one MCP.",
  "author": {
    "name": "VeriTeknik"
  },
  "server": {
    "type": "node",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "unknown",
      "args": [],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "# plugged.in MCP Proxy Server\n\n<div align=\"center\">\n  <img src=\"https://plugged.in/_next/image?url=%2Fpluggedin-wl.png&w=256&q=75\" alt=\"plugged.in Logo\" width=\"256\" height=\"75\">\n  <h3>The Crossroads for AI Data Exchanges</h3>\n  <p>A unified interface for managing all your MCP servers with built-in playground for testing on any AI model</p>\n\n  [![Version](https://img.shields.io/badge/version-1.4.0-blue?style=for-the-badge)](https://github.com/VeriTeknik/pluggedin-mcp/releases)\n  [![GitHub Stars](https://img.shields.io/github/stars/VeriTeknik/pluggedin-mcp?style=for-the-badge)](https://github.com/VeriTeknik/pluggedin-mcp/stargazers)\n  [![License](https://img.shields.io/github/license/VeriTeknik/pluggedin-mcp?style=for-the-badge)](LICENSE)\n  [![TypeScript](https://img.shields.io/badge/TypeScript-4.9+-blue?style=for-the-badge&logo=typescript)](https://www.typescriptlang.org/)\n  [![MCP](https://img.shields.io/badge/MCP-Compatible-green?style=for-the-badge)](https://modelcontextprotocol.io/)\n</div>\n\n## üìã Overview\n\nThe plugged.in MCP Proxy Server is a powerful middleware that aggregates multiple Model Context Protocol (MCP) servers into a single unified interface. It fetches tool, prompt, and resource configurations from the [plugged.in App](https://github.com/VeriTeknik/pluggedin-app) and intelligently routes requests to the appropriate underlying MCP servers.\n\nThis proxy enables seamless integration with any MCP client (Claude, Cline, Cursor, etc.) while providing advanced management capabilities through the plugged.in ecosystem.\n\n> ‚≠ê **If you find this project useful, please consider giving it a star on GitHub!** It helps us reach more developers and motivates us to keep improving.\n\n## ‚ú® Key Features\n\n### üöÄ Core Capabilities\n- **Built-in AI Playground**: Test your MCPs instantly with Claude, Gemini, OpenAI, and xAI without any client setup\n- **Universal MCP Compatibility**: Works with any MCP client including Claude Desktop, Cline, and Cursor\n- **Multi-Server Support**: Connect to STDIO, SSE, and Streamable HTTP MCP servers\n- **Dual Transport Modes**: Run proxy as STDIO (default) or Streamable HTTP server\n- **Unified Document Search**: Search across all connected servers with built-in RAG capabilities\n- **AI Document Exchange (RAG v2)**: MCP servers can create and manage documents in your library with full attribution\n- **Notifications from Any Model**: Receive real-time notifications with optional email delivery\n- **Multi-Workspace Layer**: Switch between different sets of MCP configurations with one click\n- **API-Driven Proxy**: Fetches capabilities from plugged.in App APIs rather than direct discovery\n- **Full MCP Support**: Handles tools, resources, resource templates, and prompts\n- **Custom Instructions**: Supports server-specific instructions formatted as MCP prompts\n\n### üéØ New in v1.5.0 (RAG v2 - AI Document Exchange)\n\n- **AI Document Creation**: MCP servers can now create documents directly in your library\n  - Full model attribution tracking (which AI created/updated the document)\n  - Version history with change tracking\n  - Content deduplication via SHA-256 hashing\n  - Support for multiple formats: MD, TXT, JSON, HTML, PDF, and more\n- **Advanced Document Search**: Enhanced RAG queries with AI filtering\n  - Filter by AI model, provider, date range, tags, and source type\n  - Semantic search with relevance scoring\n  - Automatic snippet generation with keyword highlighting\n  - Support for filtering: `ai_generated`, `upload`, or `api` sources\n- **Document Management via MCP**: \n  - Set document visibility: private, workspace, or public\n  - Parent-child relationships for document versions\n  - Profile-based organization alongside project-based scoping\n  - Real-time progress tracking for document processing\n\n### üéØ Features from v1.4.0 (Registry v2 Support)\n\n- **OAuth Token Management**: Seamless OAuth authentication handling for Streamable HTTP MCP servers\n  - Automatic token retrieval from plugged.in App\n  - Secure token storage and refresh mechanisms\n  - No client-side authentication needed\n- **Enhanced Notification System**: Bidirectional notification support\n  - Send notifications to plugged.in App\n  - Receive notifications from MCP servers\n  - Mark notifications as read/unread\n  - Delete notifications programmatically\n- **Trending Analytics**: Real-time activity tracking\n  - Every tool call is logged and tracked\n  - Contributes to trending server calculations\n  - Usage metrics and popularity insights\n- **Registry Integration**: Full support for Registry v2 features\n  - Automatic server discovery from registry\n  - Installation tracking and metrics\n  - Community server support\n\n### üì¶ Features from v1.1.0\n\n- **Streamable HTTP Support**: Full support for downstream MCP servers using Streamable HTTP transport\n- **HTTP Server Mode**: Run the proxy as an HTTP server with configurable ports\n- **Flexible Authentication**: Optional Bearer token authentication for HTTP endpoints\n- **Session Management**: Choose between stateful (session-based) or stateless operation modes\n\n### üéØ Core Features from v1.0.0\n\n- **Real-Time Notifications**: Track all MCP activities with comprehensive notification support\n- **RAG Integration**: Support for document-enhanced queries through the plugged.in App\n- **Inspector Scripts**: Automated testing tools for debugging and development\n- **Health Monitoring**: Built-in ping endpoint for connection monitoring\n\n## üîß Tool Categories\n\nThe proxy provides two distinct categories of tools:\n\n### üîß Static Built-in Tools (Always Available)\nThese tools are built into the proxy and work without any server configuration:\n- **`pluggedin_discover_tools`** - Smart discovery with caching for instant results\n- **`pluggedin_rag_query`** - RAG v2 search across your documents with AI filtering capabilities\n- **`pluggedin_send_notification`** - Send notifications with optional email delivery\n- **`pluggedin_create_document`** - (Coming Soon) Create AI-generated documents in your library\n\n### ‚ö° Dynamic MCP Tools (From Connected Servers)\nThese tools come from your configured MCP servers and can be turned on/off:\n- Database tools (PostgreSQL, SQLite, etc.)\n- File system tools\n- API integration tools\n- Custom tools from any MCP server\n\nThe discovery tool intelligently shows both categories, giving AI models immediate access to all available capabilities.\n\n### üöÄ Discovery Tool Usage\n\n```bash\n# Quick discovery - returns cached data instantly\npluggedin_discover_tools()\n\n# Force refresh - shows current tools + runs background discovery  \npluggedin_discover_tools({\"force_refresh\": true})\n\n# Discover specific server\npluggedin_discover_tools({\"server_uuid\": \"uuid-here\"})\n```\n\n**Example Response:**\n```\n## üîß Static Built-in Tools (Always Available):\n1. **pluggedin_discover_tools** - Smart discovery with caching\n2. **pluggedin_rag_query** - RAG v2 search across documents with AI filtering  \n3. **pluggedin_send_notification** - Send notifications\n4. **pluggedin_create_document** - (Coming Soon) Create AI-generated documents\n\n## ‚ö° Dynamic MCP Tools (8) - From Connected Servers:\n1. **query** - Run read-only SQL queries\n2. **generate_random_integer** - Generate secure random integers\n...\n```\n\n### üìö RAG v2 Usage Examples\n\nThe enhanced RAG v2 system allows MCP servers to create and search documents with full AI attribution:\n\n```bash\n# Search for documents created by specific AI models\npluggedin_rag_query({\n  \"query\": \"system architecture\",\n  \"filters\": {\n    \"modelName\": \"Claude 3 Opus\",\n    \"source\": \"ai_generated\",\n    \"tags\": [\"technical\"]\n  }\n})\n\n# Search across all document sources\npluggedin_rag_query({\n  \"query\": \"deployment guide\",\n  \"filters\": {\n    \"dateFrom\": \"2024-01-01\",\n    \"visibility\": \"workspace\"\n  }\n})\n\n# Future: Create AI-generated documents (Coming Soon)\npluggedin_create_document({\n  \"title\": \"Analysis Report\",\n  \"content\": \"# Market Analysis\\n\\nDetailed findings...\",\n  \"format\": \"md\",\n  \"tags\": [\"analysis\", \"market\"],\n  \"metadata\": {\n    \"model\": {\n      \"name\": \"Claude 3 Opus\",\n      \"provider\": \"Anthropic\"\n    }\n  }\n})\n```\n\n## üöÄ Quick Start\n\n### Prerequisites\n\n- Node.js 18+ (recommended v20+)\n- An API key from the plugged.in App (get one at [plugged.in/api-keys](https://plugged.in/api-keys))\n\n### Installation\n\n```bash\n# Install and run with npx (latest v1.0.0)\nnpx -y @pluggedin/pluggedin-mcp-proxy@latest --pluggedin-api-key YOUR_API_KEY\n```\n\n### üîÑ Upgrading to v1.0.0\n\nFor existing installations, see our [Migration Guide](./MIGRATION_GUIDE_v1.0.0.md) for detailed upgrade instructions.\n\n```bash\n# Quick upgrade\nnpx -y @pluggedin/pluggedin-mcp-proxy@1.0.0 --pluggedin-api-key YOUR_API_KEY\n```\n\n### Configuration for MCP Clients\n\n#### Claude Desktop\n\nAdd the following to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"pluggedin\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@pluggedin/pluggedin-mcp-proxy@latest\"],\n      \"env\": {\n        \"PLUGGEDIN_API_KEY\": \"YOUR_API_KEY\"\n      }\n    }\n  }\n}\n```\n\n#### Cline\n\nAdd the following to your Cline configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"pluggedin\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@pluggedin/pluggedin-mcp-proxy@latest\"],\n      \"env\": {\n        \"PLUGGEDIN_API_KEY\": \"YOUR_API_KEY\"\n      }\n    }\n  }\n}\n```\n\n#### Cursor\n\nFor Cursor, you can use command-line arguments instead of environment variables:\n\n```bash\nnpx -y @pluggedin/pluggedin-mcp-proxy@latest --pluggedin-api-key YOUR_API_KEY\n```\n\n## ‚öôÔ∏è Configuration Options\n\n### Environment Variables\n\n| Variable | Description | Required | Default |\n|----------|-------------|----------|---------|\n| `PLUGGEDIN_API_KEY` | API key from plugged.in App | Yes | - |\n| `PLUGGEDIN_API_BASE_URL` | Base URL for plugged.in App | No | `https://plugged.in` |\n\n### Command Line Arguments\n\nCommand line arguments take precedence over environment variables:\n\n```bash\nnpx -y @pluggedin/pluggedin-mcp-proxy@latest --pluggedin-api-key YOUR_API_KEY --pluggedin-api-base-url https://your-custom-url.com\n```\n\n#### Transport Options\n\n| Option | Description | Default |\n|--------|-------------|---------|\n| `--transport <type>` | Transport type: `stdio` or `streamable-http` | `stdio` |\n| `--port <number>` | Port for Streamable HTTP server | `12006` |\n| `--stateless` | Enable stateless mode for Streamable HTTP | `false` |\n| `--require-api-auth` | Require API key for Streamable HTTP requests | `false` |\n\nFor a complete list of options:\n\n```bash\nnpx -y @pluggedin/pluggedin-mcp-proxy@latest --help\n```\n\n## üåê Streamable HTTP Mode\n\nThe proxy can run as an HTTP server instead of STDIO, enabling web-based access and remote connections.\n\n### Basic Usage\n\n```bash\n# Run as HTTP server on default port (12006)\nnpx -y @pluggedin/pluggedin-mcp-proxy@latest --transport streamable-http --pluggedin-api-key YOUR_API_KEY\n\n# Custom port\nnpx -y @pluggedin/pluggedin-mcp-proxy@latest --transport streamable-http --port 8080 --pluggedin-api-key YOUR_API_KEY\n\n# With authentication required\nnpx -y @pluggedin/pluggedin-mcp-proxy@latest --transport streamable-http --require-api-auth --pluggedin-api-key YOUR_API_KEY\n\n# Stateless mode (new session per request)\nnpx -y @pluggedin/pluggedin-mcp-proxy@latest --transport streamable-http --stateless --pluggedin-api-key YOUR_API_KEY\n```\n\n### HTTP Endpoints\n\n- `POST /mcp` - Send MCP messages\n- `GET /mcp` - Server-sent events stream (optional)\n- `DELETE /mcp` - Terminate session\n- `GET /health` - Health check endpoint\n\n### Session Management\n\nIn stateful mode (default), use the `mcp-session-id` header to maintain sessions:\n\n```bash\n# First request creates a session\ncurl -X POST http://localhost:12006/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/list\",\"id\":1}'\n\n# Subsequent requests use the same session\ncurl -X POST http://localhost:12006/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -H \"mcp-session-id: YOUR_SESSION_ID\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"tools/call\",\"params\":{\"name\":\"tool_name\"},\"id\":2}'\n```\n\n### Authentication\n\nWhen using `--require-api-auth`, include your API key as a Bearer token:\n\n```bash\ncurl -X POST http://localhost:12006/mcp \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json, text/event-stream\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"method\":\"ping\",\"id\":1}'\n```\n\n## üê≥ Docker Usage\n\nYou can also build and run the proxy server using Docker.\n\n### Building the Image\n\nEnsure you have Docker installed and running. Navigate to the `pluggedin-mcp` directory and run:\n\n```bash\ndocker build -t pluggedin-mcp-proxy:latest .\n```\n\nA `.dockerignore` file is included to optimize the build context.\n\n### Running the Container\n\n#### STDIO Mode (Default)\n\nRun the container in STDIO mode for MCP Inspector testing:\n\n```bash\ndocker run -it --rm \\\n  -e PLUGGEDIN_API_KEY=\"YOUR_API_KEY\" \\\n  -e PLUGGEDIN_API_BASE_URL=\"YOUR_API_BASE_URL\" \\\n  --name pluggedin-mcp-container \\\n  pluggedin-mcp-proxy:latest\n```\n\n#### Streamable HTTP Mode\n\nRun the container as an HTTP server:\n\n```bash\ndocker run -d --rm \\\n  -e PLUGGEDIN_API_KEY=\"YOUR_API_KEY\" \\\n  -e PLUGGEDIN_API_BASE_URL=\"YOUR_API_BASE_URL\" \\\n  -p 12006:12006 \\\n  --name pluggedin-mcp-http \\\n  pluggedin-mcp-proxy:latest \\\n  --transport streamable-http --port 12006\n```\n\nReplace `YOUR_API_KEY` and `YOUR_API_BASE_URL` (if not using the default `https://plugged.in`).\n\n### Testing with MCP Inspector\n\nWhile the container is running, you can connect to it using the MCP Inspector:\n\n```bash\nnpx @modelcontextprotocol/inspector docker://pluggedin-mcp-container\n```\n\nThis will connect to the standard input/output of the running container.\n\n### Stopping the Container\n\nPress `Ctrl+C` in the terminal where `docker run` is executing. The `--rm` flag ensures the container is removed automatically upon stopping.\n\n## üèóÔ∏è System Architecture\n\nThe plugged.in MCP Proxy Server acts as a bridge between MCP clients and multiple underlying MCP servers:\n\n```mermaid\nsequenceDiagram\n    participant MCPClient as MCP Client (e.g. Claude Desktop)\n    participant PluggedinMCP as plugged.in MCP Proxy\n    participant PluggedinApp as plugged.in App\n    participant MCPServers as Underlying MCP Servers\n\n    MCPClient ->> PluggedinMCP: Request list tools/resources/prompts\n    PluggedinMCP ->> PluggedinApp: Get capabilities via API\n    PluggedinApp ->> PluggedinMCP: Return capabilities (prefixed)\n\n    MCPClient ->> PluggedinMCP: Call tool/read resource/get prompt\n    alt Standard capability\n        PluggedinMCP ->> PluggedinApp: Resolve capability to server\n        PluggedinApp ->> PluggedinMCP: Return server details\n        PluggedinMCP ->> MCPServers: Forward request to target server\n        MCPServers ->> PluggedinMCP: Return response\n    else Custom instruction\n        PluggedinMCP ->> PluggedinApp: Get custom instruction\n        PluggedinApp ->> PluggedinMCP: Return formatted messages\n    end\n    PluggedinMCP ->> MCPClient: Return response\n\n    alt Discovery tool (Smart Caching)\n        MCPClient ->> PluggedinMCP: Call pluggedin_discover_tools\n        alt Cached data available\n            PluggedinMCP ->> PluggedinApp: Check cached capabilities\n            PluggedinApp ->> PluggedinMCP: Return cached tools/resources/prompts\n            PluggedinMCP ->> MCPClient: Return instant results (static + dynamic)\n        else Force refresh or no cache\n            PluggedinMCP ->> PluggedinApp: Trigger background discovery\n            PluggedinMCP ->> MCPClient: Return current tools + \"discovery running\"\n            PluggedinApp ->> MCPServers: Connect and discover capabilities (background)\n            MCPServers ->> PluggedinApp: Return fresh capabilities\n        end\n    end\n```\n\n## üîÑ Workflow\n\n1. **Configuration**: The proxy fetches server configurations from the plugged.in App\n2. **Smart Discovery** (`pluggedin_discover_tools`):\n   - **Cache Check**: First checks for existing cached data (< 1 second)\n   - **Instant Response**: Returns static tools + cached dynamic tools immediately\n   - **Background Refresh**: For `force_refresh=true`, runs discovery in background while showing current tools\n   - **Fresh Discovery**: Only runs full discovery if no cached data exists\n3. **Capability Listing**: The proxy fetches discovered capabilities from plugged.in App APIs\n   - `tools/list`: Fetches from `/api/tools` (includes static + dynamic tools)\n   - `resources/list`: Fetches from `/api/resources`\n   - `resource-templates/list`: Fetches from `/api/resource-templates`\n   - `prompts/list`: Fetches from `/api/prompts` and `/api/custom-instructions`, merges results\n4. **Capability Resolution**: The proxy resolves capabilities to target servers\n   - `tools/call`: Parses prefix from tool name, looks up server in internal map\n   - `resources/read`: Calls `/api/resolve/resource?uri=...` to get server details\n   - `prompts/get`: Checks for custom instruction prefix or calls `/api/resolve/prompt?name=...`\n5. **Request Routing**: Requests are routed to the appropriate underlying MCP server\n6. **Response Handling**: Responses from the underlying servers are returned to the client\n\n## üîí Security Features\n\nThe plugged.in MCP Proxy implements comprehensive security measures to protect your system and data:\n\n### Input Validation & Sanitization\n\n- **Command Injection Prevention**: All commands and arguments are validated against allowlists before execution\n- **Environment Variable Security**: Secure parsing of `.env` files with proper handling of quotes and multiline values\n- **Token Validation**: Strong regex patterns for API keys and authentication tokens (32-64 hex characters)\n\n### Network Security\n\n- **SSRF Protection**: URL validation blocks access to:\n  - Localhost and loopback addresses (127.0.0.1, ::1)\n  - Private IP ranges (10.x, 172.16-31.x, 192.168.x)\n  - Link-local addresses (169.254.x)\n  - Multicast and reserved ranges\n  - Common internal service ports (SSH, databases, etc.)\n- **Header Validation**: Protection against header injection with:\n  - Dangerous header blocking\n  - RFC 7230 compliant header name validation\n  - Control character detection\n  - Header size limits (8KB max)\n- **Rate Limiting**: \n  - Tool calls: 60 requests per minute\n  - API calls: 100 requests per minute\n- **Error Sanitization**: Prevents information disclosure by sanitizing error messages\n\n### Process Security\n\n- **Safe Command Execution**: Uses `execFile()` instead of `exec()` to prevent shell injection\n- **Command Allowlist**: Only permits execution of:\n  - `node`, `npx` - Node.js commands\n  - `python`, `python3` - Python commands\n  - `uv`, `uvx`, `uvenv` - UV Python tools\n- **Argument Sanitization**: Removes shell metacharacters and control characters from all arguments\n- **Environment Variable Validation**: Only allows alphanumeric keys with underscores\n\n### Streamable HTTP Security\n\n- **Lazy Authentication**: Tool discovery doesn't require authentication, improving compatibility\n- **Session Security**: Cryptographically secure session ID generation\n- **CORS Protection**: Configurable CORS headers for web access\n- **Request Size Limits**: Prevents DoS through large payloads\n\n### Security Utilities\n\nA dedicated `security-utils.ts` module provides:\n- Bearer token validation\n- URL validation with SSRF protection\n- Command argument sanitization\n- Environment variable validation\n- Rate limiting implementation\n- Error message sanitization\n\nFor detailed security implementation, see [SECURITY.md](SECURITY.md).\n\n## üß© Integration with plugged.in App\n\nThe plugged.in MCP Proxy Server is designed to work seamlessly with the [plugged.in App](https://github.com/VeriTeknik/pluggedin-app), which provides:\n\n- A web-based interface for managing MCP server configurations\n- Centralized capability discovery (Tools, Resources, Templates, Prompts)\n- **RAG v2 Document Library**: Upload documents and enable AI-generated content with full attribution\n- Custom instructions management\n- Multi-workspace support for different configuration sets\n- An interactive playground for testing MCP tools with any AI model\n- User authentication and API key management\n- **AI Document Exchange**: Create, search, and manage documents with model attribution tracking\n\n## üìö Related Resources\n\n- [plugged.in App Repository](https://github.com/VeriTeknik/pluggedin-app)\n- [Model Context Protocol (MCP) Specification](https://modelcontextprotocol.io/)\n- [Claude Desktop Documentation](https://docs.anthropic.com/claude/docs/claude-desktop)\n- [Cline Documentation](https://docs.cline.bot/)\n\n## ü§ù Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## üìù Recent Updates\n\n### Version 1.5.0 (January 2025) - RAG v2\n\n#### ü§ñ AI Document Exchange\n- **AI-Generated Documents**: MCP servers can now create documents in your library with full AI attribution\n- **Model Attribution Tracking**: Complete history of which AI models created or updated each document\n- **Advanced Document Search**: Filter by AI model, provider, date, tags, and source type\n- **Document Versioning**: Track changes and maintain version history for AI-generated content\n- **Multi-Source Support**: Documents from uploads, AI generation, or API integrations\n\n#### üîç Enhanced RAG Capabilities\n- **Semantic Search**: Improved relevance scoring with PostgreSQL full-text search\n- **Smart Filtering**: Filter results by visibility, model attribution, and document source\n- **Snippet Generation**: Automatic snippet extraction with keyword highlighting\n- **Performance Optimization**: Faster queries with optimized indexing\n\n### Version 1.2.0 (January 2025)\n\n#### üîí Security Enhancements\n\n- **URL Validation**: Comprehensive SSRF protection blocking private IPs, localhost, and dangerous ports\n- **Command Allowlisting**: Only approved commands (node, npx, python, etc.) can be executed\n- **Header Sanitization**: Protection against header injection attacks\n- **Lazy Authentication**: Improved Smithery compatibility with auth-free tool discovery\n\n#### üöÄ Performance Improvements\n\n- **Optimized Docker Builds**: Multi-stage builds for minimal container footprint\n- **Production Dependencies Only**: Test files and dev dependencies excluded from Docker images\n- **Resource Efficiency**: Designed for deployment in resource-constrained environments\n\n#### üîß Technical Improvements\n\n- Enhanced error handling in Streamable HTTP transport\n- Better session cleanup and memory management\n- Improved TypeScript types and code organization\n\n### Version 1.1.0 (December 2024)\n\n#### üöÄ New Features\n\n- **Streamable HTTP Support**: Connect to downstream MCP servers using the modern Streamable HTTP transport\n- **HTTP Server Mode**: Run the proxy as an HTTP server for web-based access\n- **Flexible Session Management**: Choose between stateless or stateful modes\n- **Authentication Options**: Optional Bearer token authentication for HTTP endpoints\n- **Health Monitoring**: `/health` endpoint for service monitoring\n\n#### üîß Technical Improvements\n\n- Updated MCP SDK to v1.13.1 for latest protocol support\n- Added Express.js integration for HTTP server functionality\n- Enhanced TypeScript types for better developer experience\n\n### Version 1.0.0 (June 2025)\n\n#### üéØ Major Features\n- **Real-Time Notification System**: Track all MCP activities with comprehensive notification support\n- **RAG Integration**: Support for document-enhanced queries through the plugged.in App\n- **Inspector Scripts**: New automated testing tools for debugging and development\n- **Health Monitoring**: Built-in ping endpoint for connection monitoring\n\n#### üîí Security Enhancements\n- **Input Validation**: Industry-standard validation and sanitization for all inputs\n- **URL Security**: Enhanced URL validation with SSRF protection\n- **Environment Security**: Secure parsing of environment variables with dotenv\n- **Error Sanitization**: Prevents information disclosure in error responses\n\n#### üêõ Bug Fixes\n- Fixed JSON-RPC protocol interference (stdout vs stderr separation)\n- Resolved localhost URL validation for development environments\n- Fixed API key handling in inspector scripts\n- Improved connection stability and memory management\n\n#### üîß Developer Tools\n- New inspector scripts for automated testing\n- Improved error messages and debugging capabilities\n- Structured logging with proper stderr usage\n- Enhanced TypeScript type safety\n\nSee [Release Notes](./RELEASE_NOTES_v1.0.0.md) for complete details.\n\n## üß™ Testing and Development\n\n### Local Development\nTests are included for development purposes but are excluded from Docker builds to minimize the container footprint.\n\n```bash\n# Run tests locally\nnpm test\n# or\n./scripts/test-local.sh\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run tests with UI\nnpm run test:ui\n```\n\n### Lightweight Docker Builds\nThe Docker image is optimized for minimal footprint:\n- Multi-stage build process\n- Only production dependencies in final image\n- Test files and dev dependencies excluded\n- Optimized for resource-constrained environments\n\n```bash\n# Build optimized Docker image\ndocker build -t pluggedin-mcp .\n\n# Check image size\ndocker images pluggedin-mcp\n```\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## üôè Acknowledgements\n\n- Inspired by the [MCP Proxy Server](https://github.com/adamwattis/mcp-proxy-server/)\n- Built on the [Model Context Protocol](https://modelcontextprotocol.io/)\n",
  "category": "AI Tools",
  "quality_score": 68,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {}
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "VeriTeknik",
    "repo": "pluggedin-mcp-proxy",
    "url": "https://github.com/VeriTeknik/pluggedin-mcp-proxy",
    "name": "veriteknik__pluggedin-mcp-proxy",
    "path": null,
    "stars": 82,
    "contributors": 4,
    "issues": 0,
    "releases": false,
    "ci_cd": false,
    "latest_commit_hash": "16a36f5cbc10b852c5f0150fff69bc98eda8b26c"
  },
  "programming_language": "TypeScript",
  "framework": null,
  "last_scraped_at": "2025-08-18T14:25:51.044Z",
  "evaluation_model": "gemini-2.5-pro",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": true,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": true,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": true
  },
  "dependencies": [
    {
      "name": "@modelcontextprotocol/sdk",
      "importance": 10
    },
    {
      "name": "express",
      "importance": 10
    },
    {
      "name": "axios",
      "importance": 8
    },
    {
      "name": "commander",
      "importance": 7
    },
    {
      "name": "zod",
      "importance": 6
    },
    {
      "name": "zod-to-json-schema",
      "importance": 6
    },
    {
      "name": "uuid",
      "importance": 5
    }
  ],
  "raw_dependencies": "=== package.json ===\n{\n  \"name\": \"@pluggedin/pluggedin-mcp-proxy\",\n  \"version\": \"1.8.1\",\n  \"description\": \"Unified MCP proxy that aggregates all your MCP servers (STDIO, SSE, Streamable HTTP) into one powerful interface. Access any tool through a single connection, search across unified documents with built-in RAG, and receive notifications from any model. Test your MCPs instantly in the playground with Claude, Gemini, OpenAI, and xAI. Perfect for Smithery deployment and all MCP clients. Features real-time activity logging, custom notifications with email delivery, and seamless profile-based workspace switching.\",\n  \"scripts\": {\n    \"build\": \"tsc && shx chmod +x dist/*.js\",\n    \"watch\": \"tsc --watch\",\n    \"test\": \"vitest\",\n    \"test:watch\": \"vitest --watch\",\n    \"test:ui\": \"vitest --ui\",\n    \"test:coverage\": \"vitest --coverage\",\n    \"inspector\": \"node scripts/inspector-auto.js\",\n    \"inspector:auto\": \"node scripts/inspector-simple.js\",\n    \"inspector:manual\": \"dotenv -e .env.local npx @modelcontextprotocol/inspector dist/index.js -e PLUGGEDIN_API_KEY=${PLUGGEDIN_API_KEY} -e PLUGGEDIN_API_BASE_URL=${PLUGGEDIN_API_BASE_URL}\",\n    \"inspector:auth\": \"dotenv -e .env.local npx @modelcontextprotocol/inspector dist/index.js -e PLUGGEDIN_API_KEY=${PLUGGEDIN_API_KEY} -e PLUGGEDIN_API_BASE_URL=${PLUGGEDIN_API_BASE_URL}\",\n    \"inspector:staging\": \"dotenv -e .env.local npx @modelcontextprotocol/inspector dist/index.js -e PLUGGEDIN_API_KEY=${PLUGGEDIN_API_KEY} -e PLUGGEDIN_API_BASE_URL=${PLUGGEDIN_API_STAGING_BASE_URL}\",\n    \"inspector:prod\": \"dotenv -e .env.production.local npx @modelcontextprotocol/inspector dist/index.js -e PLUGGEDIN_API_KEY=${PLUGGEDIN_API_KEY}\",\n    \"inspector:no-api\": \"node scripts/inspector-no-api.js\",\n    \"test:no-api\": \"npm test -- --testNamePattern='no.*api.*key' || echo 'No specific no-API-key tests found. Consider adding tests for no-API-key scenarios.'\",\n    \"report\": \"dotenv -e .env.local -- node dist/index.js --report\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/VeriTeknik/pluggedin-mcp.git\"\n  },\n  \"author\": \"James Zhang\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/VeriTeknik/pluggedin-mcp/issues\"\n  },\n  \"homepage\": \"https://github.com/VeriTeknik/pluggedin-mcp#readme\",\n  \"dependencies\": {\n    \"@modelcontextprotocol/sdk\": \"^1.16.0\",\n    \"@types/uuid\": \"^10.0.0\",\n    \"axios\": \"^1.10.0\",\n    \"commander\": \"^14.0.0\",\n    \"express\": \"^5.1.0\",\n    \"uuid\": \"^11.1.0\",\n    \"zod\": \"^3.23.8\",\n    \"zod-to-json-schema\": \"^3.24.1\"\n  },\n  \"devDependencies\": {\n    \"@types/express\": \"^5.0.3\",\n    \"@types/node\": \"^24.0.4\",\n    \"@types/supertest\": \"^6.0.3\",\n    \"@vitest/ui\": \"^3.2.4\",\n    \"dotenv-cli\": \"^8.0.0\",\n    \"shx\": \"^0.4.0\",\n    \"supertest\": \"^7.1.1\",\n    \"typescript\": \"^5.8.3\",\n    \"vitest\": \"^3.2.4\"\n  },\n  \"type\": \"module\",\n  \"bin\": {\n    \"pluggedin-mcp-proxy\": \"dist/index.js\"\n  },\n  \"files\": [\n    \"dist\",\n    \"smithery.yaml\"\n  ],\n  \"main\": \"dist/index.js\",\n  \"exports\": {\n    \".\": \"./dist/index.js\",\n    \"./dist/report-tools.js\": \"./dist/report-tools.js\"\n  },\n  \"keywords\": [\n    \"MCP\",\n    \"Proxy\",\n    \"Playground\"\n  ]\n}\n"
}