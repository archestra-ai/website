{
  "dxt_version": "0.1.0",
  "name": "alexei-led__aws-mcp-server",
  "display_name": "aws-mcp-server",
  "version": "1.0.0",
  "description": "A lightweight service that enables AI assistants to execute AWS CLI commands (in safe containerized environment) through the Model Context Protocol (MCP). Bridges Claude, Cursor, and other MCP-aware AI tools with AWS CLI for enhanced cloud infrastructure management.",
  "author": {
    "name": "alexei-led"
  },
  "server": {
    "command": "python",
    "args": ["${__dirname}/aws_mcp_server/main.py"],
    "env": {
      "AWS_MCP_TIMEOUT": "${user_config.aws_mcp_timeout}",
      "AWS_MCP_MAX_OUTPUT": "${user_config.aws_mcp_max_output}",
      "AWS_MCP_TRANSPORT": "${user_config.aws_mcp_transport}",
      "AWS_PROFILE": "${user_config.aws_profile}",
      "AWS_REGION": "${user_config.aws_region}",
      "AWS_MCP_SECURITY_MODE": "${user_config.aws_mcp_security_mode}",
      "AWS_MCP_SECURITY_CONFIG": "${user_config.aws_mcp_security_config}"
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "aws_mcp_timeout": {
      "type": "number",
      "title": "Command execution timeout",
      "description": "Command execution timeout in seconds",
      "default": 300,
      "required": false
    },
    "aws_mcp_max_output": {
      "type": "number",
      "title": "Maximum output size",
      "description": "Maximum output size in characters",
      "default": 100000,
      "required": false
    },
    "aws_mcp_transport": {
      "type": "string",
      "title": "Transport protocol",
      "description": "Transport protocol to use ('stdio' or 'sse')",
      "default": "stdio",
      "required": false
    },
    "aws_profile": {
      "type": "string",
      "title": "AWS profile",
      "description": "AWS profile to use",
      "default": "default",
      "required": false
    },
    "aws_region": {
      "type": "string",
      "title": "AWS region",
      "description": "AWS region to use",
      "default": "us-east-1",
      "required": false
    },
    "aws_mcp_security_mode": {
      "type": "string",
      "title": "Security mode",
      "description": "Security mode ('strict' or 'permissive')",
      "default": "strict",
      "required": false
    },
    "aws_mcp_security_config": {
      "type": "file",
      "title": "Custom security configuration file",
      "description": "Path to custom security configuration file",
      "default": "",
      "required": false
    }
  },
  "readme": "# AWS Model Context Protocol (MCP) Server\n\n[![CI](https://github.com/alexei-led/aws-mcp-server/actions/workflows/ci.yml/badge.svg)](https://github.com/alexei-led/aws-mcp-server/actions/workflows/ci.yml)\n[![Code Coverage](https://codecov.io/gh/alexei-led/aws-mcp-server/branch/main/graph/badge.svg?token=K8vdP3zyuy)](https://codecov.io/gh/alexei-led/aws-mcp-server)\n[![Linter: Ruff](https://img.shields.io/badge/Linter-Ruff-brightgreen?style=flat-square)](https://github.com/alexei-led/aws-mcp-server)\n[![Image Tags](https://ghcr-badge.egpl.dev/alexei-led/aws-mcp-server/tags?color=%2344cc11&ignore=latest&n=4&label=image+tags&trim=)](https://github.com/alexei-led/aws-mcp-server/pkgs/container/aws-mcp-server/versions)\n[![Image Size](https://ghcr-badge.egpl.dev/alexei-led/aws-mcp-server/size?color=%2344cc11&tag=latest&label=image+size&trim=)](https://github.com/alexei-led/aws-mcp-server/pkgs/container/aws-mcp-server)\n\nA lightweight service that enables AI assistants to execute AWS CLI commands through the Model Context Protocol (MCP).\n\n## Overview\n\nThe AWS MCP Server provides a bridge between MCP-aware AI assistants (like Claude Desktop, Cursor, Windsurf) and the AWS CLI. It enables these assistants to:\n\n1. **Retrieve AWS CLI documentation** (`aws_cli_help`) - Get detailed help on AWS services and commands\n2. **Execute AWS CLI commands** (`aws_cli_pipeline`) - Run commands with Unix pipes and receive formatted results optimized for AI consumption\n\n```mermaid\nflowchart LR\n    AI[AI Assistant] <-->|MCP Protocol| Server[AWS MCP Server]\n    Server <-->|Subprocess| AWS[AWS CLI]\n    AWS <-->|API| Cloud[AWS Cloud]\n```\n\n## Demo\n\n[Demo](https://private-user-images.githubusercontent.com/1898375/424996801-b51ddc8e-5df5-40c4-8509-84c1a7800d62.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDI0NzY5OTUsIm5iZiI6MTc0MjQ3NjY5NSwicGF0aCI6Ii8xODk4Mzc1LzQyNDk5NjgwMS1iNTFkZGM4ZS01ZGY1LTQwYzQtODUwOS04NGMxYTc4MDBkNjIubXA0P1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDMyMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTAzMjBUMTMxODE1WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9NjgwNTM4MDVjN2U4YjQzN2Y2N2Y5MGVkMThiZTgxYWEyNzBhZTlhMTRjZDY3ZDJmMzJkNmViM2U4M2U4MTEzNSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.tIb7uSkDpSaspIluzCliHS8ATmlzkvEnF3CiClD-UGQ)\n\nThe video demonstrates using Claude Desktop with AWS MCP Server to create a new AWS EC2 instance with AWS SSM agent installed.\n\n## Features\n\n- **Command Documentation** - Detailed help information for AWS CLI commands\n- **Command Execution** - Execute AWS CLI commands and return human-readable results\n- **Unix Pipe Support** - Filter and transform AWS CLI output using standard Unix pipes and utilities\n- **AWS Resources Context** - Access to AWS profiles, regions, account information, and environment details via MCP Resources\n- **Prompt Templates** - Pre-defined prompt templates for common AWS tasks following best practices\n- **Docker Integration** - Simple deployment through containerization with multi-architecture support (AMD64/x86_64 and ARM64)\n- **AWS Authentication** - Leverages existing AWS credentials on the host machine\n\n## Requirements\n\n- Docker (default) or Python 3.13+ (and AWS CLI installed locally)\n- AWS credentials configured\n\n## Getting Started\n\n**Note:** For security and reliability, running the server inside a Docker container is the **strongly recommended** method. Please review the [Security Considerations](#security-considerations) section for important considerations.\n\n### Run Server Option 1: Using Docker (Recommended)\n\n```bash\n# Clone repository\ngit clone https://github.com/alexei-led/aws-mcp-server.git\ncd aws-mcp-server\n\n# Build and run Docker container\ndocker compose -f deploy/docker/docker-compose.yml up -d\n```\n\nThe Docker image supports both AMD64/x86_64 (Intel/AMD) and ARM64 (Apple Silicon M1-M4, AWS Graviton) architectures.\n\n> **Note**: The official image from GitHub Packages is multi-architecture and will automatically use the appropriate version for your system.\n>\n> ```bash\n> # Use the latest stable version\n> docker pull ghcr.io/alexei-led/aws-mcp-server:latest\n> \n> # Or pin to a specific version (recommended for production)\n> docker pull ghcr.io/alexei-led/aws-mcp-server:1.0.0\n> ```\n>\n> **Docker Image Tags**:\n>\n> - `latest`: Latest stable release\n> - `x.y.z` (e.g., `1.0.0`): Specific version\n> - `sha-<commit-sha>`: Development builds, tagged with Git commit SHA (e.g., `sha-gb697684`)\n\n### Run Server Option 2: Using Python\n\n**Use with Caution:** Running natively requires careful environment setup and carries higher security risks compared to the recommended Docker deployment. Ensure you understand the implications outlined in the [Security Considerations](#security-considerations) section.\n\n```bash\n# Clone repository\ngit clone https://github.com/alexei-led/aws-mcp-server.git\ncd aws-mcp-server\n\n# Set up virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install in development mode\npip install -e .\n\n# Run the server\npython -m aws_mcp_server\n```\n\n## Configuration\n\nThe AWS MCP Server can be configured using environment variables:\n\n| Environment Variable      | Description                                  | Default   |\n|--------------------------|----------------------------------------------|-----------|\n| `AWS_MCP_TIMEOUT`        | Command execution timeout in seconds         | 300       |\n| `AWS_MCP_MAX_OUTPUT`     | Maximum output size in characters            | 100000    |\n| `AWS_MCP_TRANSPORT`      | Transport protocol to use (\"stdio\" or \"sse\") | stdio     |\n| `AWS_PROFILE`            | AWS profile to use                           | default   |\n| `AWS_REGION`             | AWS region to use                            | us-east-1 |\n| `AWS_MCP_SECURITY_MODE`  | Security mode (\"strict\" or \"permissive\")     | strict    |\n| `AWS_MCP_SECURITY_CONFIG`| Path to custom security configuration file   | \"\"        |\n\n**Important:** Securely manage the AWS credentials provided to the server, whether via mounted `~/.aws` files or environment variables. Ensure the credentials follow the principle of least privilege as detailed in the [Security Considerations](#security-considerations) section. When running via Docker, ensure these variables are passed correctly to the container environment (e.g., using `docker run -e VAR=value ...`).\n\n## Security Considerations\n\nSecurity is paramount when executing commands against your AWS environment. While AWS MCP Server provides functionality, **you are responsible** for configuring and running it securely. Please adhere strictly to the following:\n\n**1. Recommended Deployment: Docker Container**\n\n*   **Isolation:** Running the server inside a Docker container is the **strongly recommended and default** deployment method. Containerization provides crucial filesystem and process isolation. Potentially destructive Unix commands (like `rm`, `mv`) executed via pipes, even if misused, will be contained within the ephemeral Docker environment and will **not** affect your host machine's filesystem. The container can be easily stopped and recreated.\n*   **Controlled Environment:** Docker ensures a consistent environment with necessary dependencies, reducing unexpected behavior.\n\n**2. AWS Credentials and IAM Least Privilege (Critical)**\n\n*   **User Responsibility:** You provide the AWS credentials to the server (via mounted `~/.aws` or environment variables).\n*   **Least Privilege is Essential:** The server executes AWS CLI commands *using the credentials you provide*. It is **absolutely critical** that these credentials belong to an IAM principal (User or Role) configured with the **minimum necessary permissions** (least privilege) for *only* the AWS actions you intend to perform through this tool.\n    *   **Do Not Use Root Credentials:** Never use AWS account root user credentials.\n    *   **Regularly Review Permissions:** Periodically audit the IAM permissions associated with the credentials.\n*   **Impact Limitation:** Properly configured IAM permissions are the **primary mechanism** for limiting the potential impact of *any* command executed via the server, whether intended or unintended. Even if a command were manipulated, it could only perform actions allowed by the specific IAM policy.\n\n**3. Trusted User Model**\n\n*   The server assumes the end-user interacting with the MCP client (e.g., Claude Desktop, Cursor) is the **same trusted individual** who configured the server and provided the least-privilege AWS credentials. Do not expose the server or connected client to untrusted users.\n\n**4. Understanding Execution Risks (Current Implementation)**\n\n*   **Command Execution:** The current implementation uses shell features (`shell=True` in subprocess calls) to execute AWS commands and handle Unix pipes. While convenient, this approach carries inherent risks if the input command string were manipulated (command injection).\n*   **Mitigation via Operational Controls:** In the context of the **trusted user model** and **Docker deployment**, these risks are mitigated operationally:\n    *   The trusted user is assumed not to provide intentionally malicious commands against their own environment.\n    *   Docker contains filesystem side-effects.\n    *   **Crucially, IAM least privilege limits the scope of *any* AWS action that could be executed.**\n*   **Credential Exfiltration Risk:** Despite containerization and IAM, a sophisticated command injection could potentially attempt to read the mounted credentials (`~/.aws`) or environment variables within the container and exfiltrate them (e.g., via `curl`). **Strict IAM policies remain the most vital defense** to limit the value of potentially exfiltrated credentials.\n\n**5. Network Exposure (SSE Transport)**\n\n*   If using the `sse` transport (which implies a network listener), ensure you bind the server only to trusted network interfaces (e.g., `localhost`) or implement appropriate network security controls (firewalls, authentication proxies) if exposing it more broadly. The default `stdio` transport does not open network ports.\n\n**6. Shared Responsibility Summary**\n\n*   **AWS MCP Server provides the tool.**\n*   **You, the user, are responsible for:**\n    *   Running it within the recommended secure Docker environment.\n    *   Providing and securely managing **least-privilege** AWS credentials.\n    *   Ensuring only trusted users interact with the server/client.\n    *   Securing the network environment if applicable.\n\nBy strictly adhering to Docker deployment and meticulous IAM least-privilege configuration, you establish the necessary operational controls for using the AWS MCP Server securely with its current implementation.\n\n## Integrating with Claude Desktop\n\n### Configuration\n\nTo manually integrate AWS MCP Server with Claude Desktop:\n\n1. **Locate the Claude Desktop configuration file**:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. **Edit the configuration file** to include the AWS MCP Server:\n   ```json\n   {\n     \"mcpServers\": {\n       \"aws-mcp-server\": {\n         \"command\": \"docker\",\n         \"args\": [\n           \"run\",\n           \"-i\",\n           \"--rm\",\n           \"-v\",\n           \"/Users/YOUR_USER_NAME/.aws:/home/appuser/.aws:ro\",\n           \"ghcr.io/alexei-led/aws-mcp-server:latest\"\n         ]\n       }\n     }\n   }\n   ```\n   \n3. **Restart Claude Desktop** to apply the changes\n   - After restarting, you should see a hammer 🔨 icon in the bottom right corner of the input box\n   - This indicates that the AWS MCP Server is available for use\n\n```mermaid\nflowchart TD\n    subgraph \"User Device\"\n        config[Edit claude_desktop_config.json]\n        claude[Claude Desktop]\n        docker[Docker Container]\n        aws_creds[AWS Credentials]\n    end\n    \n    subgraph \"AWS Cloud\"\n        services[AWS Services]\n    end\n    \n    subgraph \"MCP Server Components\"\n        tools[AWS CLI Tools]\n        resources[AWS Resources]\n        templates[Prompt Templates]\n    end\n    \n    config -->|Add MCP Server Config| claude\n    claude -->|Docker Run Command| docker\n    docker --- tools\n    docker --- resources\n    docker --- templates\n    aws_creds -->|Mount Read-only| docker\n    resources -.->|Read| aws_creds\n    tools -->|API Calls| services\n```\n\n### Example Interactions\n\n**Getting AWS CLI Documentation**:\n```\nUser: What are the available options for the AWS S3 cp command?\n\nClaude: Let me get that information for you.\n\nThe AWS S3 cp command has the following options:\n\nNAME\n    cp - Copies a local file or S3 object to another location locally or in S3.\n\nSYNOPSIS\n    cp <LocalPath> <S3Uri> or <S3Uri> <LocalPath> or <S3Uri> <S3Uri> [--acl <value>] [--cache-control <value>] ...\n```\n\n**Executing AWS CLI Commands**:\n```\nUser: List my S3 buckets\n\nClaude: I'll list your S3 buckets for you.\n\n2023-10-15 14:30:45 my-bucket-1\n2023-11-20 09:15:32 my-bucket-2\n2024-01-05 11:22:18 my-backup-bucket\n```\n\n**Using Command Pipes**:\n```\nUser: List my S3 buckets that have \"backup\" in their name and show them in alphabetical order\n\nClaude: Let me find that for you.\n\n2024-01-05 11:22:18 my-backup-bucket\n2024-03-01 09:44:12 weekly-backup-bucket\n2024-03-15 13:10:57 database-backup-bucket\n```\n\n**Accessing AWS Resources**:\n```\nUser: What AWS regions are available for me to use?\n\nClaude: Let me check what AWS regions are available for you.\n\nAvailable regions:\n- us-east-1 (US East, N. Virginia) - Currently selected\n- us-east-2 (US East, Ohio)\n- us-west-1 (US West, N. California)\n- us-west-2 (US West, Oregon)\n- eu-west-1 (EU West, Ireland)\n- eu-central-1 (EU Central, Frankfurt)\n- ap-northeast-1 (Asia Pacific, Tokyo)\n- ap-southeast-1 (Asia Pacific, Singapore)\n- ap-southeast-2 (Asia Pacific, Sydney)\n\nYou're currently using the us-east-1 region.\n```\n\n**Using Prompt Templates**:\n```\nUser: I need to perform a security audit of my S3 buckets\n\nClaude: I'll help you audit the security of your S3 buckets.\n\nHere are AWS CLI commands to perform a comprehensive security audit:\n\n# List all buckets with public access settings\naws s3api list-buckets --query 'Buckets[*].Name' --output text | xargs -I {} aws s3api get-public-access-block --bucket {}\n\n# Check bucket policies for public access\naws s3api list-buckets --query 'Buckets[*].Name' --output text | xargs -I {} aws s3api get-bucket-policy --bucket {} 2>/dev/null\n\n# Identify buckets without encryption\naws s3api list-buckets --query 'Buckets[*].Name' --output text | xargs -I {} aws s3api get-bucket-encryption --bucket {} 2>/dev/null\n\n# Check for buckets without logging enabled\naws s3api list-buckets --query 'Buckets[*].Name' --output text | xargs -I {} aws s3api get-bucket-logging --bucket {} 2>/dev/null\n\n# Verify bucket versioning status\naws s3api list-buckets --query 'Buckets[*].Name' --output text | xargs -I {} aws s3api get-bucket-versioning --bucket {}\n```\n\n## Available Prompt Templates\n\nThe AWS MCP Server includes the following pre-defined prompt templates:\n\n### Core Operations\n\n| Prompt                 | Description                                                   | Parameters                                          |\n|------------------------|---------------------------------------------------------------|-----------------------------------------------------|\n| `create_resource`      | Generate commands to create AWS resources with best practices | `resource_type`, `resource_name`                    |\n| `resource_inventory`   | Create comprehensive inventory of resources                   | `service`, `region` (optional)                      |\n| `troubleshoot_service` | Generate commands to troubleshoot service issues              | `service`, `resource_id`                            |\n| `resource_cleanup`     | Identify and safely clean up resources                        | `service`, `criteria` (optional)                    |\n\n### Security & Compliance\n\n| Prompt                     | Description                                                | Parameters                                          |\n|----------------------------|------------------------------------------------------------|-----------------------------------------------------|\n| `security_audit`           | Audit security settings for a specific AWS service         | `service`                                           |\n| `security_posture_assessment` | Comprehensive security assessment across your AWS environment | None                                          |\n| `iam_policy_generator`     | Create least-privilege IAM policies                        | `service`, `actions`, `resource_pattern` (optional) |\n| `compliance_check`         | Check compliance with standards                            | `compliance_standard`, `service` (optional)         |\n\n### Cost & Performance\n\n| Prompt               | Description                                             | Parameters                                         |\n|----------------------|---------------------------------------------------------|----------------------------------------------------|\n| `cost_optimization`  | Find cost optimization opportunities for a service      | `service`                                          |\n| `performance_tuning` | Optimize and tune performance of AWS resources          | `service`, `resource_id`                           |\n\n### Infrastructure & Architecture\n\n| Prompt                      | Description                                              | Parameters                                           |\n|-----------------------------|----------------------------------------------------------|------------------------------------------------------|\n| `serverless_deployment`     | Deploy serverless applications with best practices       | `application_name`, `runtime` (optional)             |\n| `container_orchestration`   | Set up container environments (ECS/EKS)                  | `cluster_name`, `service_type` (optional)            |\n| `vpc_network_design`        | Design and implement secure VPC networking               | `vpc_name`, `cidr_block` (optional)                  |\n| `infrastructure_automation` | Automate infrastructure management                       | `resource_type`, `automation_scope` (optional)       |\n| `multi_account_governance`  | Implement secure multi-account strategies                | `account_type` (optional)                            |\n\n### Reliability & Monitoring\n\n| Prompt               | Description                                           | Parameters                                          |\n|----------------------|-------------------------------------------------------|-----------------------------------------------------|\n| `service_monitoring` | Set up comprehensive monitoring                       | `service`, `metric_type` (optional)                 |\n| `disaster_recovery`  | Implement enterprise-grade DR solutions               | `service`, `recovery_point_objective` (optional)    |\n\n## Security\n\nThe AWS MCP Server implements a comprehensive multi-layered approach to command validation and security:\n\n### Command Validation System\n\nThe server validates all AWS CLI commands through a three-layer system:\n\n1. **Basic Command Structure**: \n   - Verifies commands start with 'aws' prefix and contain a valid service\n   - Ensures proper command syntax\n\n2. **Security-Focused Command Filtering**:\n   - **Dangerous Commands**: Blocks commands that could compromise security\n   - **Safe Patterns**: Explicitly allows read-only operations needed for normal use\n   - **Regex Pattern Matching**: Prevents complex security risks with pattern matching\n\n3. **Pipe Command Security**:\n   - Validates Unix commands used in pipes\n   - Restricts commands to a safe allowlist\n   - Prevents filesystem manipulation and arbitrary command execution\n\n### Default Security Configuration\n\nThe default security configuration focuses on preventing the following attack vectors:\n\n#### 1. Identity and Access Management (IAM) Risks\n\n| Blocked Command | Security Risk |\n|-----------------|---------------|\n| `aws iam create-user` | Creates potential backdoor accounts with persistent access |\n| `aws iam create-access-key` | Creates long-term credentials that can be stolen or misused |\n| `aws iam attach-*-policy` | Potential privilege escalation via policy attachments |\n| `aws iam put-user-policy` | Inline policies can grant excessive permissions |\n| `aws iam create-policy` | Creating new policies with potentially dangerous permissions |\n| `aws iam create-login-profile` | Creates console passwords for existing users |\n| `aws iam deactivate-mfa-device` | Disables multi-factor authentication, weakening security |\n| `aws iam update-assume-role-policy` | Modifies trust relationships, enabling privilege escalation |\n\n#### 2. Audit and Logging Tampering\n\n| Blocked Command | Security Risk |\n|-----------------|---------------|\n| `aws cloudtrail delete-trail` | Removes audit trail of AWS activity |\n| `aws cloudtrail stop-logging` | Stops collecting activity logs, creating blind spots |\n| `aws cloudtrail update-trail` | Can redirect or modify logging configuration |\n| `aws config delete-configuration-recorder` | Disables AWS Config recording of resource changes |\n| `aws guardduty delete-detector` | Disables threat detection capabilities |\n\n#### 3. Sensitive Data Access and Protection\n\n| Blocked Command | Security Risk |\n|-----------------|---------------|\n| `aws secretsmanager put-secret-value` | Modifies sensitive credentials |\n| `aws secretsmanager delete-secret` | Removes sensitive credentials |\n| `aws kms schedule-key-deletion` | Schedules deletion of encryption keys, risking data loss |\n| `aws kms disable-key` | Disables encryption keys, potentially exposing data |\n| `aws s3api put-bucket-policy` | Can create public S3 buckets, exposing data |\n| `aws s3api delete-bucket-policy` | Removes protective policies from buckets |\n\n#### 4. Network Security Risks\n\n| Blocked Command | Security Risk |\n|-----------------|---------------|\n| `aws ec2 authorize-security-group-ingress` | Opens inbound network access, potential exposure |\n| `aws ec2 authorize-security-group-egress` | Opens outbound network access, potential data exfiltration |\n| `aws ec2 modify-instance-attribute` | Can alter security properties of instances |\n\nMany read-only operations that match these patterns are explicitly allowed via safe patterns:\n\n- All `get-`, `list-`, and `describe-` commands\n- All help commands (`--help`, `help`)\n- Simulation and testing commands (e.g., `aws iam simulate-custom-policy`)\n\n### Configuration Options\n\n- **Security Modes**:\n  - `strict` (default): Enforces all security validations\n  - `permissive`: Logs warnings but allows execution (use with caution)\n\n- **Custom Configuration**:\n  - Override default security rules via YAML configuration file\n  - Configure service-specific dangerous commands\n  - Define custom safe patterns and regex rules\n  - Environment variable: `AWS_MCP_SECURITY_CONFIG`\n\n- **Execution Controls**:\n  - Timeouts prevent long-running commands (default: 300 seconds)\n  - Output size limits prevent memory issues\n  - Environment variables: `AWS_MCP_TIMEOUT`, `AWS_MCP_MAX_OUTPUT`\n\n### Custom Security Rules Example\n\nYou can create custom security rules by defining a YAML configuration file:\n\n```yaml\n# Example custom security configuration\n# Save to a file and set AWS_MCP_SECURITY_CONFIG environment variable\n\n# Dangerous commands to block\ndangerous_commands:\n  iam:\n    # Only block specific IAM operations for your environment\n    - \"aws iam create-user\"\n    - \"aws iam attach-user-policy\"\n  \n  # Custom service restrictions for your organization\n  lambda:\n    - \"aws lambda delete-function\"\n    - \"aws lambda remove-permission\"\n  \n  # Prevent accidental DynamoDB table deletion\n  dynamodb:\n    - \"aws dynamodb delete-table\"\n\n# Safe patterns to explicitly allow\nsafe_patterns:\n  # Global safe patterns\n  general:\n    - \"--help\"\n    - \"--dry-run\"\n  \n  # Allow read operations on IAM\n  iam:\n    - \"aws iam get-\"\n    - \"aws iam list-\"\n  \n  # Allow specific Lambda operations\n  lambda:\n    - \"aws lambda list-functions\"\n    - \"aws lambda get-function\"\n\n# Complex regex rules for security validation\nregex_rules:\n  general:\n    # Prevent use of root credentials\n    - pattern: \"aws .* --profile\\\\s+root\"\n      description: \"Prevent use of root profile\"\n      error_message: \"Using the root profile is not allowed for security reasons\"\n  \n  iam:\n    # Block creation of admin users\n    - pattern: \"aws iam create-user.*--user-name\\\\s+.*admin.*\"\n      description: \"Prevent creation of admin users\"\n      error_message: \"Creating users with 'admin' in the name is restricted\"\n    \n    # Prevent wildcards in IAM policies\n    - pattern: \"aws iam create-policy.*\\\"Effect\\\":\\\\s*\\\"Allow\\\".*\\\"Action\\\":\\\\s*\\\"\\\\*\\\".*\\\"Resource\\\":\\\\s*\\\"\\\\*\\\"\"\n      description: \"Prevent wildcards in policies\"\n      error_message: \"Creating policies with '*' wildcards for both Action and Resource is not allowed\"\n  \n  s3:\n    # Prevent public bucket policies\n    - pattern: \"aws s3api put-bucket-policy.*\\\"Effect\\\":\\\\s*\\\"Allow\\\".*\\\"Principal\\\":\\\\s*\\\"\\\\*\\\"\"\n      description: \"Prevent public bucket policies\"\n      error_message: \"Creating bucket policies with public access is restricted\"\n```\n\n### Security Examples\n\nThe system follows IAM best practices, focusing on preventing escalation of privilege:\n\n```bash\n# This command would be blocked (creates user)\naws iam create-user --user-name new-user\n> Error: This command (aws iam create-user) is restricted for security reasons.\n\n# This command would be blocked (attaches admin policy)\naws iam attach-user-policy --user-name any-user --policy-arn arn:aws:iam::aws:policy/AdministratorAccess\n> Error: Attaching Administrator policies is restricted for security reasons.\n\n# This command would be blocked (opens SSH port globally)\naws ec2 authorize-security-group-ingress --group-id sg-12345 --protocol tcp --port 22 --cidr 0.0.0.0/0\n> Error: Opening non-web ports to the entire internet (0.0.0.0/0) is restricted.\n\n# These commands are allowed (read-only operations)\naws iam list-users\naws s3 ls\naws ec2 describe-instances\n```\n\n### Security Best Practices\n\n- Always use the default `strict` security mode in production\n- Follow the deployment recommendations in [Security Considerations](#security-considerations)\n- Run with least-privilege AWS credentials\n- For custom configurations, focus on your security requirements\n\n## Development\n\n### Setting Up the Development Environment\n\n```bash\n# Install only runtime dependencies using pip\npip install -e .\n\n# Install all development dependencies using pip\npip install -e \".[dev]\"\n\n# Or use uv for faster dependency management\nmake uv-install       # Install runtime dependencies\nmake uv-dev-install   # Install development dependencies\n```\n\n### Makefile Commands\n\nThe project includes a Makefile with various targets for common tasks:\n\n```bash\n# Test commands\nmake test             # Run tests excluding integration tests\nmake test-unit        # Run unit tests only (all tests except integration tests)\nmake test-integration # Run integration tests only (requires AWS credentials)\nmake test-all         # Run all tests including integration tests\n\n# Test coverage commands\nmake test-coverage    # Run tests with coverage report (excluding integration tests)\nmake test-coverage-all # Run all tests with coverage report (including integration tests)\n\n# Linting and formatting\nmake lint             # Run linters (ruff check and format --check)\nmake lint-fix         # Run linters and auto-fix issues where possible\nmake format           # Format code with ruff\n```\n\nFor a complete list of available commands, run `make help`.\n\n### Code Coverage\n\nThe project includes configuration for [Codecov](https://codecov.io) to track code coverage metrics. The configuration is in the `codecov.yml` file, which:\n\n- Sets a target coverage threshold of 80%\n- Excludes test files, setup files, and documentation from coverage reports\n- Configures PR comments and status checks\n\nCoverage reports are automatically generated during CI/CD runs and uploaded to Codecov.\n\n### Integration Testing\n\nIntegration tests verify AWS MCP Server works correctly with actual AWS resources. To run them:\n\n1. **Set up AWS resources**:\n   - Create an S3 bucket for testing\n   - Set the environment variable: `export AWS_TEST_BUCKET=your-test-bucket-name`\n   - Ensure your AWS credentials are configured\n\n2. **Run integration tests**:\n   ```bash\n   # Run all tests including integration tests\n   make test-all\n   \n   # Run only integration tests\n   make test-integration\n   ```\n\nOr you can run the pytest commands directly:\n```bash\n# Run all tests including integration tests\npytest --run-integration\n\n# Run only integration tests\npytest --run-integration -m integration\n```\n\n## Troubleshooting\n\n- **Authentication Issues**: Ensure your AWS credentials are properly configured\n- **Connection Errors**: Verify the server is running and AI assistant connection settings are correct\n- **Permission Errors**: Check that your AWS credentials have the necessary permissions\n- **Timeout Errors**: For long-running commands, increase the `AWS_MCP_TIMEOUT` environment variable\n\n## Why Deploy with Docker\n\nDeploying AWS MCP Server via Docker is the recommended approach, offering significant security and reliability advantages that form the core of the tool's secure usage pattern:\n\n### Security Benefits\n\n- **Isolation (Primary Mitigation):** The Docker container provides essential filesystem and process isolation. AWS CLI commands and piped Unix utilities run in a contained environment. Accidental or misused commands affecting the filesystem are limited to the container, **protecting your host machine**.\n- **Controlled Credential Access:** When mounting credentials, using the `:ro` (read-only) flag limits the container's ability to modify your AWS configuration files.\n- **No Local Installation:** Avoids installing the AWS CLI and its dependencies directly on your host system.\n- **Clean Environment:** Each container run starts with a known, clean state.\n\n### Reliability Advantages\n\n- **Consistent Configuration**: All required tools (AWS CLI, SSM plugin, jq) are pre-installed and properly configured\n- **Dependency Management**: Avoid version conflicts between tools and dependencies\n- **Cross-Platform Consistency**: Works the same way across different operating systems\n- **Complete Environment**: Includes all necessary tools for command pipes, filtering, and formatting\n\n### Other Benefits\n\n- **Multi-Architecture Support**: Runs on both Intel/AMD (x86_64) and ARM (Apple Silicon, AWS Graviton) processors\n- **Simple Updates**: Update to new versions with a single pull command\n- **No Python Environment Conflicts**: Avoids potential conflicts with other Python applications on your system\n- **Version Pinning**: Easily pin to specific versions for stability in production environments\n\n## Versioning\n\nThis project uses [setuptools_scm](https://github.com/pypa/setuptools_scm) to automatically determine versions based on Git tags:\n\n- **Release versions**: When a Git tag exists (e.g., `1.2.3`), the version will be exactly that tag\n- **Development versions**: For commits without tags, a development version is generated in the format: \n  `<last-tag>.post<commits-since-tag>+g<commit-hash>.d<date>` (e.g., `1.2.3.post10+gb697684.d20250406`)\n\nThe version is automatically included in:\n- Package version information\n- Docker image labels\n- Continuous integration builds\n\n### Creating Releases\n\nTo create a new release version:\n\n```bash\n# Create and push a new tag\ngit tag -a 1.2.3 -m \"Release version 1.2.3\"\ngit push origin 1.2.3\n```\n\nThe CI/CD pipeline will automatically build and publish Docker images with appropriate version tags.\n\nFor more detailed information about the version management system, see [VERSION.md](docs/VERSION.md).\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
  "category": "AI Tools",
  "quality_score": 73,
  "archestra_config": {
    "client_config_permutations": {
      "alexei-led-aws-mcp-server-docker": {
        "command": "docker",
        "args": ["compose", "-f", "deploy/docker/docker-compose.yml", "up", "-d"],
        "env": {}
      },
      "aws_mcp_server": {
        "command": "python",
        "args": ["-m", "aws_mcp_server"],
        "env": {}
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "alexei-led",
    "repo": "aws-mcp-server",
    "url": "https://github.com/alexei-led/aws-mcp-server",
    "name": "alexei-led__aws-mcp-server",
    "path": null,
    "stars": 161,
    "contributors": 1,
    "issues": 0,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "df44aabef7291cc0cefd3e0e9fcc45421150b212"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:05:15.631Z",
  "evaluation_model": "gemini-2.5-pro",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": true,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "fastmcp",
      "importance": 10
    },
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "boto3",
      "importance": 9
    },
    {
      "name": "pyyaml",
      "importance": 5
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[build-system]\nrequires = [\"setuptools>=61.0\", \"setuptools_scm>=8.0.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"aws-mcp-server\"\ndynamic = [\"version\"]\ndescription = \"AWS Model Context Protocol Server\"\nreadme = \"README.md\"\nrequires-python = \">=3.13\"\nlicense = { text = \"MIT\" }\nauthors = [{ name = \"Alexei Ledenev\" }]\ndependencies = [\n    \"fastmcp>=0.4.1\",\n    \"mcp>=1.0.0\",\n    \"boto3>=1.34.0\",\n    \"pyyaml>=6.0.0\"\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest>=7.0.0\",\n    \"pytest-cov>=4.0.0\",\n    \"pytest-asyncio>=0.23.0\",\n    \"ruff>=0.2.0\",\n    \"moto>=4.0.0\",\n    \"setuptools_scm>=7.0.0\",\n]\n# Production dependencies, optimized for Docker\nprod = [\n    \"fastmcp>=0.4.1\",\n    \"mcp>=1.0.0\",\n    \"boto3>=1.34.0\",\n    \"pyyaml>=6.0.0\",\n]\n\n[tool.setuptools]\npackages = [\"aws_mcp_server\"]\npackage-dir = { \"\" = \"src\" }\n\n[tool.ruff]\nline-length = 160\ntarget-version = \"py313\"\nexclude = [\"src/aws_mcp_server/_version.py\"]\n\n[tool.ruff.lint]\nselect = [\"E\", \"F\", \"I\", \"B\"]\n\n[tool.ruff.format]\nquote-style = \"double\"\nindent-style = \"space\"\nline-ending = \"auto\"\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"aws_mcp_server\"]\n\n# Using VSCode + Pylance static typing instead of mypy\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = \"test_*.py\"\nmarkers = [\n    \"integration: marks tests that require AWS CLI and AWS credentials\",\n    \"asyncio: mark test as requiring asyncio\",\n]\nasyncio_mode = \"strict\"\nasyncio_default_fixture_loop_scope = \"function\"\nfilterwarnings = [\n    \"ignore::RuntimeWarning:unittest.mock:\",\n    \"ignore::RuntimeWarning:weakref:\"\n]\n\n[tool.coverage.run]\nsource = [\"src/aws_mcp_server\"]\nomit = [\n    \"*/tests/*\",\n    \"*/setup.py\",\n    \"*/conftest.py\",\n    \"src/aws_mcp_server/__main__.py\",\n]\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"if self.debug\",\n    \"raise NotImplementedError\",\n    \"if __name__ == .__main__.:\",\n    \"pass\",\n    \"raise ImportError\",\n]\n\n[tool.setuptools_scm]\nfallback_version=\"0.0.0-dev0\""
}
