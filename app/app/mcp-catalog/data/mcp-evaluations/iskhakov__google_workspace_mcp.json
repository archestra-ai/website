{
  "dxt_version": "0.1.0",
  "name": "iskhakov__google_workspace_mcp",
  "display_name": "google_workspace_mcp",
  "version": "1.0.0",
  "description": "Control Gmail, Google Calendar, Docs, Sheets, Slides, Chat, Forms, Tasks, Search & Drive with AI - Comprehensive Google Workspace / G Suite MCP Server",
  "author": {
    "name": "iskhakov"
  },
  "server": {
    "command": "uvx",
    "args": ["--from", "git+https://github.com/iskhakov/google_workspace_mcp", "workspace-mcp"],
    "env": {}
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "<div align=\"center\">\n\n# <span style=\"color:#cad8d9\">Google Workspace MCP Server</span> <img src=\"https://github.com/user-attachments/assets/b89524e4-6e6e-49e6-ba77-00d6df0c6e5c\" width=\"80\" align=\"right\" />\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python 3.10+](https://img.shields.io/badge/Python-3.10%2B-blue.svg)](https://www.python.org/downloads/)\n[![PyPI](https://img.shields.io/pypi/v/workspace-mcp.svg)](https://pypi.org/project/workspace-mcp/)\n[![PyPI Downloads](https://static.pepy.tech/badge/workspace-mcp/month)](https://pepy.tech/projects/workspace-mcp)\n[![Website](https://img.shields.io/badge/Website-workspacemcp.com-green.svg)](https://workspacemcp.com)\n\n*Full natural language control over Google Calendar, Drive, Gmail, Docs, Sheets, Slides, Forms, Tasks, and Chat through all MCP clients, AI assistants and developer tools.*\n\n**The most feature-complete Google Workspace MCP server**, now with Remote OAuth2.1 multi-user support and 1-click Claude installation.\n\n\n###### Support for all free Google accounts (Gmail, Docs, Drive etc) & Google Workspace plans (Starter, Standard, Plus, Enterprise, Non Profit) with expanded app options like Chat & Spaces. <br/> Interested in a private cloud instance? [That can be arranged.](https://workspacemcp.com/workspace-mcp-cloud)\n\n\n</div>\n\n<div align=\"center\">\n<a href=\"https://glama.ai/mcp/servers/@taylorwilsdon/google_workspace_mcp\">\n  <img width=\"195\" src=\"https://glama.ai/mcp/servers/@taylorwilsdon/google_workspace_mcp/badge\" alt=\"Google Workspace Server MCP server\" align=\"center\"/>\n</a>\n<a href=\"https://www.pulsemcp.com/servers/taylorwilsdon-google-workspace\">\n<img width=\"456\" src=\"https://github.com/user-attachments/assets/0794ef1a-dc1c-447d-9661-9c704d7acc9d\" align=\"center\"/>\n</a>\n</div>\n\n---\n\n\n**See it in action:**\n<div align=\"center\">\n  <video width=\"400\" src=\"https://github.com/user-attachments/assets/a342ebb4-1319-4060-a974-39d202329710\"></video>\n</div>\n\n---\n\n### A quick plug for AI-Enhanced Docs\n<details>\n<summary>◆ <b>But why?</b></summary>\n\n**This README was written with AI assistance, and here's why that matters**\n>\n> As a solo dev building open source tools, comprehensive documentation often wouldn't happen without AI help. Using agentic dev tools like **Roo** & **Claude Code** that understand the entire codebase, AI doesn't just regurgitate generic content - it extracts real implementation details and creates accurate, specific documentation.\n>\n> In this case, Sonnet 4 took a pass & a human (me) verified them 8/16/25.\n</details>\n\n## <span style=\"color:#adbcbc\">Overview</span>\n\nA production-ready MCP server that integrates all major Google Workspace services with AI assistants. It supports both single-user operation and multi-user authentication via OAuth 2.1, making it a powerful backend for custom applications. Built with FastMCP for optimal performance, featuring advanced authentication handling, service caching, and streamlined development patterns.\n\n**Simplified Setup**: Now uses Google Desktop OAuth clients - no redirect URIs or port configuration needed!\n\n## <span style=\"color:#adbcbc\">Features</span>\n\n<table align=\"center\" style=\"width: 100%; max-width: 100%;\">\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n**<span style=\"color:#72898f\">@</span> Gmail** • **<span style=\"color:#72898f\">≡</span> Drive** • **<span style=\"color:#72898f\">⧖</span> Calendar** **<span style=\"color:#72898f\">≡</span> Docs**\n- Complete Gmail management, end to end coverage\n- Full calendar management with advanced features\n- File operations with Office format support\n- Document creation, editing & comments\n- Deep, exhaustive support for fine grained editing\n\n---\n\n**<span style=\"color:#72898f\">≡</span> Forms** • **<span style=\"color:#72898f\">@</span> Chat** • **<span style=\"color:#72898f\">≡</span> Sheets** • **<span style=\"color:#72898f\">≡</span> Slides**\n- Form creation, publish settings & response management\n- Space management & messaging capabilities\n- Spreadsheet operations with flexible cell management\n- Presentation creation, updates & content manipulation\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n**<span style=\"color:#72898f\">⊠</span> Authentication & Security**\n- Advanced OAuth 2.0 & OAuth 2.1 support\n- Automatic token refresh & session management\n- Transport-aware callback handling\n- Multi-user bearer token authentication\n- Innovative CORS proxy architecture\n\n---\n\n**<span style=\"color:#72898f\">✓</span> Tasks** • **<span style=\"color:#72898f\">◆</span> Custom Search** • **<span style=\"color:#72898f\">↻</span> Transport Support**\n- Full support for all MCP Transports\n- OpenAPI compatibility via `mcpo`\n- Task & task list management with hierarchy\n- Programmable Search Engine (PSE) integration\n\n</td>\n</tr>\n</table>\n\n---\n\n## ▶ Quick Start\n\n<details>\n<summary>≡ <b>Quick Reference Card</b> <sub><sup>← Essential commands & configs at a glance</sup></sub></summary>\n\n<table>\n<tr><td width=\"33%\" valign=\"top\">\n\n**⊠ Credentials**\n```bash\nexport GOOGLE_OAUTH_CLIENT_ID=\"...\"\nexport GOOGLE_OAUTH_CLIENT_SECRET=\"...\"\n```\n[Full setup →](#-credential-configuration)\n\n</td><td width=\"33%\" valign=\"top\">\n\n**▶ Launch Commands**\n```bash\nuvx workspace-mcp --tool-tier core\nuv run main.py --tools gmail drive\n```\n[More options →](#start-the-server)\n\n</td><td width=\"34%\" valign=\"top\">\n\n**★ Tool Tiers**\n- ● `core` - Essential tools\n- ◐ `extended` - Core + extras\n- ○ `complete` - Everything\n[Details →](#tool-tiers)\n\n</td></tr>\n</table>\n\n</details>\n\n### 1. One-Click Claude Desktop Install (Recommended)\n\n1. **Download:** Grab the latest `google_workspace_mcp.dxt` from the “Releases” page\n2. **Install:** Double-click the file – Claude Desktop opens and prompts you to **Install**\n3. **Configure:** In Claude Desktop → **Settings → Extensions → Google Workspace MCP**, paste your Google OAuth credentials\n4. **Use it:** Start a new Claude chat and call any Google Workspace tool\n\n>\n**Why DXT?**\n> Desktop Extensions (`.dxt`) bundle the server, dependencies, and manifest so users go from download → working MCP in **one click** – no terminal, no JSON editing, no version conflicts.\n\n#### Required Configuration\n<details>\n<summary>◆ <b>Environment Variables</b> <sub><sup>← Click to configure in Claude Desktop</sup></sub></summary>\n\n<table>\n<tr><td width=\"50%\" valign=\"top\">\n\n**Required**\n| Variable | Purpose |\n|----------|---------|\n| `GOOGLE_OAUTH_CLIENT_ID` | OAuth client ID from Google Cloud |\n| `GOOGLE_OAUTH_CLIENT_SECRET` | OAuth client secret |\n| `OAUTHLIB_INSECURE_TRANSPORT=1` | Development only (allows `http://` redirect) |\n\n</td><td width=\"50%\" valign=\"top\">\n\n**Optional**\n| Variable | Purpose |\n|----------|---------|\n| `USER_GOOGLE_EMAIL` | Default email for single-user auth |\n| `GOOGLE_PSE_API_KEY` | API key for Custom Search |\n| `GOOGLE_PSE_ENGINE_ID` | Search Engine ID for Custom Search |\n| `MCP_ENABLE_OAUTH21` | Set to `true` for OAuth 2.1 support |\n| `WORKSPACE_MCP_STATELESS_MODE` | Set to `true` for stateless operation (requires OAuth 2.1) |\n\n</td></tr>\n</table>\n\nClaude Desktop stores these securely in the OS keychain; set them once in the extension pane.\n</details>\n\n---\n\n<div align=\"center\">\n  <video width=\"832\" src=\"https://github.com/user-attachments/assets/83cca4b3-5e94-448b-acb3-6e3a27341d3a\"></video>\n</div>\n\n---\n\n### Prerequisites\n\n- **Python 3.10+**\n- **[uvx](https://github.com/astral-sh/uv)** (for instant installation) or [uv](https://github.com/astral-sh/uv) (for development)\n- **Google Cloud Project** with OAuth 2.0 credentials\n\n### Configuration\n\n<details open>\n<summary>◆ <b>Google Cloud Setup</b> <sub><sup>← OAuth 2.0 credentials & API enablement</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**1. Create Project**\n```text\nconsole.cloud.google.com\n\n→ Create new project\n→ Note project name\n```\n<sub>[Open Console →](https://console.cloud.google.com/)</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**2. OAuth Credentials**\n```text\nAPIs & Services → Credentials\n→ Create Credentials\n→ OAuth Client ID\n→ Desktop Application\n```\n<sub>Download & save credentials</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**3. Enable APIs**\n```text\nAPIs & Services → Library\n\nSearch & enable:\nCalendar, Drive, Gmail,\nDocs, Sheets, Slides,\nForms, Tasks, Chat, Search\n```\n<sub>See quick links below</sub>\n\n</td>\n</tr>\n<tr>\n<td colspan=\"3\">\n\n<details>\n<summary>≡ <b>OAuth Credential Setup Guide</b> <sub><sup>← Step-by-step instructions</sup></sub></summary>\n\n**Complete Setup Process:**\n\n1. **Create OAuth 2.0 Credentials** - Visit [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project (or use existing)\n   - Navigate to **APIs & Services → Credentials**\n   - Click **Create Credentials → OAuth Client ID**\n   - Choose **Desktop Application** as the application type (no redirect URIs needed!)\n   - Download credentials and note the Client ID and Client Secret\n\n2. **Enable Required APIs** - In **APIs & Services → Library**\n   - Search for and enable each required API\n   - Or use the quick links below for one-click enabling\n\n3. **Configure Environment** - Set your credentials:\n   ```bash\n   export GOOGLE_OAUTH_CLIENT_ID=\"your-client-id\"\n   export GOOGLE_OAUTH_CLIENT_SECRET=\"your-secret\"\n   ```\n\n≡ [Full Documentation →](https://developers.google.com/workspace/guides/auth-overview)\n\n</details>\n\n</td>\n</tr>\n</table>\n\n<details>\n  <summary>⊥ <b>Quick API Enable Links</b> <sub><sup>← One-click enable each Google API</sup></sub></summary>\n  You can enable each one by clicking the links below (make sure you're logged into the Google Cloud Console and have the correct project selected):\n\n* [Enable Google Calendar API](https://console.cloud.google.com/flows/enableapi?apiid=calendar-json.googleapis.com)\n* [Enable Google Drive API](https://console.cloud.google.com/flows/enableapi?apiid=drive.googleapis.com)\n* [Enable Gmail API](https://console.cloud.google.com/flows/enableapi?apiid=gmail.googleapis.com)\n* [Enable Google Docs API](https://console.cloud.google.com/flows/enableapi?apiid=docs.googleapis.com)\n* [Enable Google Sheets API](https://console.cloud.google.com/flows/enableapi?apiid=sheets.googleapis.com)\n* [Enable Google Slides API](https://console.cloud.google.com/flows/enableapi?apiid=slides.googleapis.com)\n* [Enable Google Forms API](https://console.cloud.google.com/flows/enableapi?apiid=forms.googleapis.com)\n* [Enable Google Tasks API](https://console.cloud.google.com/flows/enableapi?apiid=tasks.googleapis.com)\n* [Enable Google Chat API](https://console.cloud.google.com/flows/enableapi?apiid=chat.googleapis.com)\n* [Enable Google Custom Search API](https://console.cloud.google.com/flows/enableapi?apiid=customsearch.googleapis.com)\n\n</details>\n\n</details>\n\n1.1. **Credentials**: See [Credential Configuration](#credential-configuration) for detailed setup options\n\n2. **Environment Configuration**:\n\n<details open>\n<summary>◆ <b>Environment Variables</b> <sub><sup>← Configure your runtime environment</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**◆ Development Mode**\n```bash\nexport OAUTHLIB_INSECURE_TRANSPORT=1\n```\n<sub>Allows HTTP redirect URIs</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**@ Default User**\n```bash\nexport USER_GOOGLE_EMAIL=\\\n  your.email@gmail.com\n```\n<sub>Single-user authentication</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**◆ Custom Search**\n```bash\nexport GOOGLE_PSE_API_KEY=xxx\nexport GOOGLE_PSE_ENGINE_ID=yyy\n```\n<sub>Optional: Search API setup</sub>\n\n</td>\n</tr>\n</table>\n\n</details>\n\n3. **Server Configuration**:\n\n<details open>\n<summary>◆ <b>Server Settings</b> <sub><sup>← Customize ports, URIs & proxies</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**◆ Base Configuration**\n```bash\nexport WORKSPACE_MCP_BASE_URI=\n  http://localhost\nexport WORKSPACE_MCP_PORT=8000\n```\n<sub>Server URL & port settings</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**↻ Proxy Support**\n```bash\nexport MCP_ENABLE_OAUTH21=\n  true\n```\n<sub>Leverage multi-user OAuth2.1 clients</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**@ Default Email**\n```bash\nexport USER_GOOGLE_EMAIL=\\\n  your.email@gmail.com\n```\n<sub>Skip email in auth flows in single user mode</sub>\n\n</td>\n</tr>\n</table>\n\n<details>\n<summary>≡ <b>Configuration Details</b> <sub><sup>← Learn more about each setting</sup></sub></summary>\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `WORKSPACE_MCP_BASE_URI` | Base server URI (no port) | `http://localhost` |\n| `WORKSPACE_MCP_PORT` | Server listening port | `8000` |\n| `WORKSPACE_EXTERNAL_URL` | External URL for reverse proxy setups | None |\n| `GOOGLE_OAUTH_REDIRECT_URI` | Override OAuth callback URL | Auto-constructed |\n| `USER_GOOGLE_EMAIL` | Default auth email | None |\n\n</details>\n\n</details>\n\n### Google Custom Search Setup\n\n<details>\n<summary>◆ <b>Custom Search Configuration</b> <sub><sup>← Enable web search capabilities</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**1. Create Search Engine**\n```text\nprogrammablesearchengine.google.com\n/controlpanel/create\n\n→ Configure sites or entire web\n→ Note your Engine ID (cx)\n```\n<sub>[Open Control Panel →](https://programmablesearchengine.google.com/controlpanel/create)</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**2. Get API Key**\n```text\ndevelopers.google.com\n/custom-search/v1/overview\n\n→ Create/select project\n→ Enable Custom Search API\n→ Create credentials (API Key)\n```\n<sub>[Get API Key →](https://developers.google.com/custom-search/v1/overview)</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**3. Set Variables**\n```bash\nexport GOOGLE_PSE_API_KEY=\\\n  \"your-api-key\"\nexport GOOGLE_PSE_ENGINE_ID=\\\n  \"your-engine-id\"\n```\n<sub>Configure in environment</sub>\n\n</td>\n</tr>\n<tr>\n<td colspan=\"3\">\n\n<details>\n<summary>≡ <b>Quick Setup Guide</b> <sub><sup>← Step-by-step instructions</sup></sub></summary>\n\n**Complete Setup Process:**\n\n1. **Create Search Engine** - Visit the [Control Panel](https://programmablesearchengine.google.com/controlpanel/create)\n   - Choose \"Search the entire web\" or specify sites\n   - Copy the Search Engine ID (looks like: `017643444788157684527:6ivsjbpxpqw`)\n\n2. **Enable API & Get Key** - Visit [Google Developers Console](https://console.cloud.google.com/)\n   - Enable \"Custom Search API\" in your project\n   - Create credentials → API Key\n   - Restrict key to Custom Search API (recommended)\n\n3. **Configure Environment** - Add to your shell or `.env`:\n   ```bash\n   export GOOGLE_PSE_API_KEY=\"AIzaSy...\"\n   export GOOGLE_PSE_ENGINE_ID=\"01764344478...\"\n   ```\n\n≡ [Full Documentation →](https://developers.google.com/custom-search/v1/overview)\n\n</details>\n\n</td>\n</tr>\n</table>\n\n</details>\n\n### Start the Server\n\n<details open>\n<summary>▶ <b>Launch Commands</b> <sub><sup>← Choose your startup mode</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**▶ Quick Start**\n```bash\nuv run main.py\n```\n<sub>Default stdio mode</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**◆ HTTP Mode**\n```bash\nuv run main.py \\\n  --transport streamable-http\n```\n<sub>Web interfaces & debugging</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**@ Single User**\n```bash\nuv run main.py \\\n  --single-user\n```\n<sub>Simplified authentication</sub>\n\n</td>\n</tr>\n<tr>\n<td colspan=\"3\">\n\n<details>\n<summary>◆ <b>Advanced Options</b> <sub><sup>← Tool selection, tiers & Docker</sup></sub></summary>\n\n**▶ Selective Tool Loading**\n```bash\n# Load specific services only\nuv run main.py --tools gmail drive calendar\nuv run main.py --tools sheets docs\n\n# Combine with other flags\nuv run main.py --single-user --tools gmail\n```\n\n**★ Tool Tiers**\n```bash\nuv run main.py --tool-tier core      # ● Essential tools only\nuv run main.py --tool-tier extended  # ◐ Core + additional\nuv run main.py --tool-tier complete  # ○ All available tools\n```\n\n**◆ Docker Deployment**\n```bash\ndocker build -t workspace-mcp .\ndocker run -p 8000:8000 -v $(pwd):/app \\\n  workspace-mcp --transport streamable-http\n\n# With tool selection via environment variables\ndocker run -e TOOL_TIER=core workspace-mcp\ndocker run -e TOOLS=\"gmail drive calendar\" workspace-mcp\n```\n\n**Available Services**: `gmail` • `drive` • `calendar` • `docs` • `sheets` • `forms` • `tasks` • `chat` • `search`\n\n</details>\n\n</td>\n</tr>\n</table>\n\n</details>\n\n### Tool Tiers\n\nThe server organizes tools into **three progressive tiers** for simplified deployment. Choose a tier that matches your usage needs and API quota requirements.\n\n<table>\n<tr>\n<td width=\"65%\" valign=\"top\">\n\n#### <span style=\"color:#72898f\">Available Tiers</span>\n\n**<span style=\"color:#2d5b69\">●</span> Core** (`--tool-tier core`)\nEssential tools for everyday tasks. Perfect for light usage with minimal API quotas. Includes search, read, create, and basic modify operations across all services.\n\n**<span style=\"color:#72898f\">●</span> Extended** (`--tool-tier extended`)\nCore functionality plus management tools. Adds labels, folders, batch operations, and advanced search. Ideal for regular usage with moderate API needs.\n\n**<span style=\"color:#adbcbc\">●</span> Complete** (`--tool-tier complete`)\nFull API access including comments, headers/footers, publishing settings, and administrative functions. For power users needing maximum functionality.\n\n</td>\n<td width=\"35%\" valign=\"top\">\n\n#### <span style=\"color:#72898f\">Important Notes</span>\n\n<span style=\"color:#72898f\">▶</span> **Start with `core`** and upgrade as needed\n<span style=\"color:#72898f\">▶</span> **Tiers are cumulative** – each includes all previous\n<span style=\"color:#72898f\">▶</span> **Mix and match** with `--tools` for specific services\n<span style=\"color:#72898f\">▶</span> **Configuration** in `core/tool_tiers.yaml`\n<span style=\"color:#72898f\">▶</span> **Authentication** included in all tiers\n\n</td>\n</tr>\n</table>\n\n#### <span style=\"color:#72898f\">Usage Examples</span>\n\n```bash\n# Basic tier selection\nuv run main.py --tool-tier core                            # Start with essential tools only\nuv run main.py --tool-tier extended                        # Expand to include management features\nuv run main.py --tool-tier complete                        # Enable all available functionality\n\n# Selective service loading with tiers\nuv run main.py --tools gmail drive --tool-tier core        # Core tools for specific services\nuv run main.py --tools gmail --tool-tier extended          # Extended Gmail functionality only\nuv run main.py --tools docs sheets --tool-tier complete    # Full access to Docs and Sheets\n```\n\n## 📋 Credential Configuration\n\n<details open>\n<summary>🔑 <b>OAuth Credentials Setup</b> <sub><sup>← Essential for all installations</sup></sub></summary>\n\n<table>\n<tr>\n<td width=\"33%\" align=\"center\">\n\n**🚀 Environment Variables**\n```bash\nexport GOOGLE_OAUTH_CLIENT_ID=\\\n  \"your-client-id\"\nexport GOOGLE_OAUTH_CLIENT_SECRET=\\\n  \"your-secret\"\n```\n<sub>Best for production</sub>\n\n</td>\n<td width=\"33%\" align=\"center\">\n\n**📁 File-based**\n```bash\n# Download & place in project root\nclient_secret.json\n\n# Or specify custom path\nexport GOOGLE_CLIENT_SECRET_PATH=\\\n  /path/to/secret.json\n```\n<sub>Traditional method</sub>\n\n</td>\n<td width=\"34%\" align=\"center\">\n\n**⚡ .env File**\n```bash\ncp .env.oauth21 .env\n# Edit .env with credentials\n```\n<sub>Best for development</sub>\n\n</td>\n</tr>\n<tr>\n<td colspan=\"3\">\n\n<details>\n<summary>📖 <b>Credential Loading Details</b> <sub><sup>← Understanding priority & best practices</sup></sub></summary>\n\n**Loading Priority**\n1. Environment variables (`export VAR=value`)\n2. `.env` file in project root\n3. `client_secret.json` via `GOOGLE_CLIENT_SECRET_PATH`\n4. Default `client_secret.json` in project root\n\n**Why Environment Variables?**\n- ✅ **Docker/K8s ready** - Native container support\n- ✅ **Cloud platforms** - Heroku, Railway, Vercel\n- ✅ **CI/CD pipelines** - GitHub Actions, Jenkins\n- ✅ **No secrets in git** - Keep credentials secure\n- ✅ **Easy rotation** - Update without code changes\n\n</details>\n\n</td>\n</tr>\n</table>\n\n</details>\n\n---\n\n## 🧰 Available Tools\n\n> **Note**: All tools support automatic authentication via `@require_google_service()` decorators with 30-minute service caching.\n\n<table width=\"100%\">\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n### 📅 **Google Calendar** <sub>[`calendar_tools.py`](gcalendar/calendar_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `list_calendars` | **Core** | List accessible calendars |\n| `get_events` | **Core** | Retrieve events with time range filtering |\n| `create_event` | **Core** | Create events with attachments & reminders |\n| `modify_event` | **Core** | Update existing events |\n| `delete_event` | Extended | Remove events |\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n### 📁 **Google Drive** <sub>[`drive_tools.py`](gdrive/drive_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `search_drive_files` | **Core** | Search files with query syntax |\n| `get_drive_file_content` | **Core** | Read file content (Office formats) |\n| `list_drive_items` | Extended | List folder contents |\n| `create_drive_file` | **Core** | Create files or fetch from URLs |\n\n</td>\n</tr>\n<tr>\n\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n### 📧 **Gmail** <sub>[`gmail_tools.py`](gmail/gmail_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `search_gmail_messages` | **Core** | Search with Gmail operators |\n| `get_gmail_message_content` | **Core** | Retrieve message content |\n| `get_gmail_messages_content_batch` | **Core** | Batch retrieve message content |\n| `send_gmail_message` | **Core** | Send emails |\n| `get_gmail_thread_content` | Extended | Get full thread content |\n| `modify_gmail_message_labels` | Extended | Modify message labels |\n| `list_gmail_labels` | Extended | List available labels |\n| `manage_gmail_label` | Extended | Create/update/delete labels |\n| `draft_gmail_message` | Extended | Create drafts |\n| `get_gmail_threads_content_batch` | Complete | Batch retrieve thread content |\n| `batch_modify_gmail_message_labels` | Complete | Batch modify labels |\n| `start_google_auth` | Complete | Initialize authentication |\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n### 📝 **Google Docs** <sub>[`docs_tools.py`](gdocs/docs_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `get_doc_content` | **Core** | Extract document text |\n| `create_doc` | **Core** | Create new documents |\n| `modify_doc_text` | **Core** | Modify document text |\n| `search_docs` | Extended | Find documents by name |\n| `find_and_replace_doc` | Extended | Find and replace text |\n| `list_docs_in_folder` | Extended | List docs in folder |\n| `insert_doc_elements` | Extended | Add tables, lists, page breaks |\n| `insert_doc_image` | Complete | Insert images from Drive/URLs |\n| `update_doc_headers_footers` | Complete | Modify headers and footers |\n| `batch_update_doc` | Complete | Execute multiple operations |\n| `inspect_doc_structure` | Complete | Analyze document structure |\n| `create_table_with_data` | Complete | Create data tables |\n| `debug_table_structure` | Complete | Debug table issues |\n| `*_document_comments` | Complete | Read, Reply, Create, Resolve |\n\n</td>\n</tr>\n\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n### 📊 **Google Sheets** <sub>[`sheets_tools.py`](gsheets/sheets_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `read_sheet_values` | **Core** | Read cell ranges |\n| `modify_sheet_values` | **Core** | Write/update/clear cells |\n| `create_spreadsheet` | **Core** | Create new spreadsheets |\n| `list_spreadsheets` | Extended | List accessible spreadsheets |\n| `get_spreadsheet_info` | Extended | Get spreadsheet metadata |\n| `create_sheet` | Complete | Add sheets to existing files |\n| `*_sheet_comment` | Complete | Read/create/reply/resolve comments |\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n### 🖼️ **Google Slides** <sub>[`slides_tools.py`](gslides/slides_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `create_presentation` | **Core** | Create new presentations |\n| `get_presentation` | **Core** | Retrieve presentation details |\n| `batch_update_presentation` | Extended | Apply multiple updates |\n| `get_page` | Extended | Get specific slide information |\n| `get_page_thumbnail` | Extended | Generate slide thumbnails |\n| `*_presentation_comment` | Complete | Read/create/reply/resolve comments |\n\n</td>\n</tr>\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n### 📝 **Google Forms** <sub>[`forms_tools.py`](gforms/forms_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `create_form` | **Core** | Create new forms |\n| `get_form` | **Core** | Retrieve form details & URLs |\n| `set_publish_settings` | Complete | Configure form settings |\n| `get_form_response` | Complete | Get individual responses |\n| `list_form_responses` | Extended | List all responses with pagination |\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n### ✓ **Google Tasks** <sub>[`tasks_tools.py`](gtasks/tasks_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `list_tasks` | **Core** | List tasks with filtering |\n| `get_task` | **Core** | Retrieve task details |\n| `create_task` | **Core** | Create tasks with hierarchy |\n| `update_task` | **Core** | Modify task properties |\n| `delete_task` | Extended | Remove tasks |\n| `move_task` | Complete | Reposition tasks |\n| `clear_completed_tasks` | Complete | Hide completed tasks |\n| `*_task_list` | Complete | List/get/create/update/delete task lists |\n\n</td>\n</tr>\n<tr>\n<td width=\"50%\" valign=\"top\">\n\n### 💬 **Google Chat** <sub>[`chat_tools.py`](gchat/chat_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `list_spaces` | Extended | List chat spaces/rooms |\n| `get_messages` | **Core** | Retrieve space messages |\n| `send_message` | **Core** | Send messages to spaces |\n| `search_messages` | **Core** | Search across chat history |\n\n</td>\n<td width=\"50%\" valign=\"top\">\n\n### 🔍 **Google Custom Search** <sub>[`search_tools.py`](gsearch/search_tools.py)</sub>\n\n| Tool | Tier | Description |\n|------|------|-------------|\n| `search_custom` | **Core** | Perform web searches |\n| `get_search_engine_info` | Complete | Retrieve search engine metadata |\n| `search_custom_siterestrict` | Extended | Search within specific domains |\n\n</td>\n</tr>\n</table>\n\n\n**Tool Tier Legend:**\n- <span style=\"color:#2d5b69\">•</span> **Core**: Essential tools for basic functionality • Minimal API usage • Getting started\n- <span style=\"color:#72898f\">•</span> **Extended**: Core tools + additional features • Regular usage • Expanded capabilities\n- <span style=\"color:#adbcbc\">•</span> **Complete**: All available tools including advanced features • Power users • Full API access\n\n---\n\n### Connect to Claude Desktop\n\nThe server supports two transport modes:\n\n#### Stdio Mode (Default - Recommended for Claude Desktop)\n\nIn general, you should use the one-click DXT installer package for Claude Desktop.\nIf you are unable to for some reason, you can configure it manually via `claude_desktop_config.json`\n\n**Manual Claude Configuration (Alternative)**\n\n<details>\n<summary>📝 <b>Claude Desktop JSON Config</b> <sub><sup>← Click for manual setup instructions</sup></sub></summary>\n\n1. Open Claude Desktop Settings → Developer → Edit Config\n   - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the server configuration:\n```json\n{\n  \"mcpServers\": {\n    \"google_workspace\": {\n      \"command\": \"uvx\",\n      \"args\": [\"workspace-mcp\"],\n      \"env\": {\n        \"GOOGLE_OAUTH_CLIENT_ID\": \"your-client-id\",\n        \"GOOGLE_OAUTH_CLIENT_SECRET\": \"your-secret\",\n        \"OAUTHLIB_INSECURE_TRANSPORT\": \"1\"\n      }\n    }\n  }\n}\n```\n</details>\n\n### 2. Advanced / Cross-Platform Installation\n\nIf you’re developing, deploying to servers, or using another MCP-capable client, keep reading.\n\n#### Instant CLI (uvx)\n\n<details open>\n<summary>⚡ <b>Quick Start with uvx</b> <sub><sup>← No installation required!</sup></sub></summary>\n\n```bash\n# Requires Python 3.10+ and uvx\n# First, set credentials (see Credential Configuration above)\nuvx workspace-mcp --tool-tier core  # or --tools gmail drive calendar\n```\n\n> **Note**: Configure [OAuth credentials](#credential-configuration) before running. Supports environment variables, `.env` file, or `client_secret.json`.\n\n</details>\n\n### OAuth 2.1 Support (Multi-User Bearer Token Authentication)\n\nThe server includes OAuth 2.1 support for bearer token authentication, enabling multi-user session management. **OAuth 2.1 automatically reuses your existing `GOOGLE_OAUTH_CLIENT_ID` and `GOOGLE_OAUTH_CLIENT_SECRET` credentials** - no additional configuration needed!\n\n**When to use OAuth 2.1:**\n- Multiple users accessing the same MCP server instance\n- Need for bearer token authentication instead of passing user emails\n- Building web applications or APIs on top of the MCP server\n- Production environments requiring secure session management\n- Browser-based clients requiring CORS support\n\n**Enabling OAuth 2.1:**\nTo enable OAuth 2.1, set the `MCP_ENABLE_OAUTH21` environment variable to `true`.\n\n```bash\n# OAuth 2.1 requires HTTP transport mode\nexport MCP_ENABLE_OAUTH21=true\nuv run main.py --transport streamable-http\n```\n\nIf `MCP_ENABLE_OAUTH21` is not set to `true`, the server will use legacy authentication, which is suitable for clients that do not support OAuth 2.1.\n\n<details>\n<summary>🔐 <b>Innovative CORS Proxy Architecture</b> <sub><sup>← Advanced OAuth 2.1 details</sup></sub></summary>\n\nThis implementation solves two critical challenges when using Google OAuth in browser environments:\n\n1.  **Dynamic Client Registration**: Google doesn't support OAuth 2.1 dynamic client registration. Our server provides a clever proxy that accepts any client registration request and returns the pre-configured Google OAuth credentials, allowing standards-compliant clients to work seamlessly.\n\n2.  **CORS Issues**: Google's OAuth endpoints don't include CORS headers, blocking browser-based clients. We implement intelligent proxy endpoints that:\n   - Proxy authorization server discovery requests through `/auth/discovery/authorization-server/{server}`\n   - Proxy token exchange requests through `/oauth2/token`\n   - Add proper CORS headers to all responses\n   - Maintain security by only proxying to known Google OAuth endpoints\n\nThis architecture enables any OAuth 2.1 compliant client to authenticate users through Google, even from browser environments, without requiring changes to the client implementation.\n\n</details>\n\n### Stateless Mode (Container-Friendly)\n\nThe server supports a stateless mode designed for containerized environments where file system writes should be avoided:\n\n**Enabling Stateless Mode:**\n```bash\n# Stateless mode requires OAuth 2.1 to be enabled\nexport MCP_ENABLE_OAUTH21=true\nexport WORKSPACE_MCP_STATELESS_MODE=true\nuv run main.py --transport streamable-http\n```\n\n**Key Features:**\n- **No file system writes**: Credentials are never written to disk\n- **No debug logs**: File-based logging is completely disabled\n- **Memory-only sessions**: All tokens stored in memory via OAuth 2.1 session store\n- **Container-ready**: Perfect for Docker, Kubernetes, and serverless deployments\n- **Token per request**: Each request must include a valid Bearer token\n\n**Requirements:**\n- Must be used with `MCP_ENABLE_OAUTH21=true`\n- Incompatible with single-user mode\n- Clients must handle OAuth flow and send valid tokens with each request\n\nThis mode is ideal for:\n- Cloud deployments where persistent storage is unavailable\n- Multi-tenant environments requiring strict isolation\n- Containerized applications with read-only filesystems\n- Serverless functions and ephemeral compute environments\n\n**MCP Inspector**: No additional configuration needed with desktop OAuth client.\n\n**Claude Code Inspector**: No additional configuration needed with desktop OAuth client.\n\n### VS Code MCP Client Support\n\n<details>\n<summary>🆚 <b>VS Code Configuration</b> <sub><sup>← Setup for VS Code MCP extension</sup></sub></summary>\n\n```json\n{\n    \"servers\": {\n        \"google-workspace\": {\n            \"url\": \"http://localhost:8000/mcp/\",\n            \"type\": \"http\"\n        }\n    }\n}\n```\n</details>\n\n\n#### Reverse Proxy Setup\n\nIf you're running the MCP server behind a reverse proxy (nginx, Apache, Cloudflare, etc.), you have two configuration options:\n\n**Problem**: When behind a reverse proxy, the server constructs OAuth URLs using internal ports (e.g., `http://localhost:8000`) but external clients need the public URL (e.g., `https://your-domain.com`).\n\n**Solution 1**: Set `WORKSPACE_EXTERNAL_URL` for all OAuth endpoints:\n```bash\n# This configures all OAuth endpoints to use your external URL\nexport WORKSPACE_EXTERNAL_URL=\"https://your-domain.com\"\n```\n\n**Solution 2**: Set `GOOGLE_OAUTH_REDIRECT_URI` for just the callback:\n```bash\n# This only overrides the OAuth callback URL\nexport GOOGLE_OAUTH_REDIRECT_URI=\"https://your-domain.com/oauth2callback\"\n```\n\nYou also have options for:\n| `OAUTH_CUSTOM_REDIRECT_URIS` *(optional)* | Comma-separated list of additional redirect URIs |\n| `OAUTH_ALLOWED_ORIGINS` *(optional)* | Comma-separated list of additional CORS origins |\n\n**Important**:\n- Use `WORKSPACE_EXTERNAL_URL` when all OAuth endpoints should use the external URL (recommended for reverse proxy setups)\n- Use `GOOGLE_OAUTH_REDIRECT_URI` when you only need to override the callback URL\n- The redirect URI must exactly match what's configured in your Google Cloud Console\n- Your reverse proxy must forward OAuth-related requests (`/oauth2callback`, `/oauth2/*`, `/.well-known/*`) to the MCP server\n\n<details>\n<summary>🚀 <b>Advanced uvx Commands</b> <sub><sup>← More startup options</sup></sub></summary>\n\n```bash\n# Configure credentials first (see Credential Configuration section)\n\n# Start with specific tools only\nuvx workspace-mcp --tools gmail drive calendar tasks\n\n# Start with tool tiers (recommended for most users)\nuvx workspace-mcp --tool-tier core      # Essential tools\nuvx workspace-mcp --tool-tier extended  # Core + additional features\nuvx workspace-mcp --tool-tier complete  # All tools\n\n# Start in HTTP mode for debugging\nuvx workspace-mcp --transport streamable-http\n```\n</details>\n\n*Requires Python 3.10+ and [uvx](https://github.com/astral-sh/uv). The package is available on [PyPI](https://pypi.org/project/workspace-mcp).*\n\n### Development Installation\n\nFor development or customization:\n\n```bash\ngit clone https://github.com/taylorwilsdon/google_workspace_mcp.git\ncd google_workspace_mcp\nuv run main.py\n```\n\n**Development Installation (For Contributors)**:\n\n<details>\n<summary>🔧 <b>Developer Setup JSON</b> <sub><sup>← For contributors & customization</sup></sub></summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"google_workspace\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/path/to/repo/google_workspace_mcp\",\n        \"main.py\"\n      ],\n      \"env\": {\n        \"GOOGLE_OAUTH_CLIENT_ID\": \"your-client-id\",\n        \"GOOGLE_OAUTH_CLIENT_SECRET\": \"your-secret\",\n        \"OAUTHLIB_INSECURE_TRANSPORT\": \"1\"\n      }\n    }\n  }\n}\n```\n</details>\n\n#### HTTP Mode (For debugging or web interfaces)\nIf you need to use HTTP mode with Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"google_workspace\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-remote\", \"http://localhost:8000/mcp\"]\n    }\n  }\n}\n```\n\n*Note: Make sure to start the server with `--transport streamable-http` when using HTTP mode.*\n\n### First-Time Authentication\n\nThe server uses **Google Desktop OAuth** for simplified authentication:\n\n- **No redirect URIs needed**: Desktop OAuth clients handle authentication without complex callback URLs\n- **Automatic flow**: The server manages the entire OAuth process transparently\n- **Transport-agnostic**: Works seamlessly in both stdio and HTTP modes\n\nWhen calling a tool:\n1. Server returns authorization URL\n2. Open URL in browser and authorize\n3. Google provides an authorization code\n4. Paste the code when prompted (or it's handled automatically)\n5. Server completes authentication and retries your request\n\n---\n\n## <span style=\"color:#adbcbc\">◆ Development</span>\n\n### <span style=\"color:#72898f\">Project Structure</span>\n\n```\ngoogle_workspace_mcp/\n├── auth/              # Authentication system with decorators\n├── core/              # MCP server and utilities\n├── g{service}/        # Service-specific tools\n├── main.py            # Server entry point\n├── client_secret.json # OAuth credentials (not committed)\n└── pyproject.toml     # Dependencies\n```\n\n### Adding New Tools\n\n```python\nfrom auth.service_decorator import require_google_service\n\n@require_google_service(\"drive\", \"drive_read\")  # Service + scope group\nasync def your_new_tool(service, param1: str, param2: int = 10):\n    \"\"\"Tool description\"\"\"\n    # service is automatically injected and cached\n    result = service.files().list().execute()\n    return result  # Return native Python objects\n```\n\n### Architecture Highlights\n\n- **Service Caching**: 30-minute TTL reduces authentication overhead\n- **Scope Management**: Centralized in `SCOPE_GROUPS` for easy maintenance\n- **Error Handling**: Native exceptions instead of manual error construction\n- **Multi-Service Support**: `@require_multiple_services()` for complex tools\n\n### Credential Store System\n\nThe server includes an abstract credential store API and a default backend for managing Google OAuth\ncredentials with support for multiple storage backends:\n\n**Features:**\n- **Abstract Interface**: `CredentialStore` base class defines standard operations (get, store, delete, list users)\n- **Local File Storage**: `LocalDirectoryCredentialStore` implementation stores credentials as JSON files\n- **Configurable Storage**: Environment variable `GOOGLE_MCP_CREDENTIALS_DIR` sets storage location\n- **Multi-User Support**: Store and manage credentials for multiple Google accounts\n- **Automatic Directory Creation**: Storage directory is created automatically if it doesn't exist\n\n**Configuration:**\n```bash\n# Optional: Set custom credentials directory\nexport GOOGLE_MCP_CREDENTIALS_DIR=\"/path/to/credentials\"\n\n# Default locations (if GOOGLE_MCP_CREDENTIALS_DIR not set):\n# - ~/.google_workspace_mcp/credentials (if home directory accessible)\n# - ./.credentials (fallback)\n```\n\n**Usage Example:**\n```python\nfrom auth.credential_store import get_credential_store\n\n# Get the global credential store instance\nstore = get_credential_store()\n\n# Store credentials for a user\nstore.store_credential(\"user@example.com\", credentials)\n\n# Retrieve credentials\ncreds = store.get_credential(\"user@example.com\")\n\n# List all users with stored credentials\nusers = store.list_users()\n```\n\nThe credential store automatically handles credential serialization, expiry parsing, and provides error handling for storage operations.\n\n---\n\n## <span style=\"color:#adbcbc\">⊠ Security</span>\n\n- **Credentials**: Never commit `.env`, `client_secret.json` or the `.credentials/` directory to source control!\n- **OAuth Callback**: Uses `http://localhost:8000/oauth2callback` for development (requires `OAUTHLIB_INSECURE_TRANSPORT=1`)\n- **Transport-Aware Callbacks**: Stdio mode starts a minimal HTTP server only for OAuth, ensuring callbacks work in all modes\n- **Production**: Use HTTPS & OAuth 2.1 and configure accordingly\n- **Network Exposure**: Consider authentication when using `mcpo` over networks\n- **Scope Minimization**: Tools request only necessary permissions\n\n---\n\n## <span style=\"color:#adbcbc\">◆ Integration with Open WebUI</span>\n\n<details open>\n<summary>◆ <b>Open WebUI Integration</b> <sub><sup>← Connect to Open WebUI as tool provider</sup></sub></summary>\n\n<table>\n<tr><td width=\"50%\" valign=\"top\">\n\n### ▶ Instant Start (No Config)\n```bash\n# Set credentials & launch in one command\nGOOGLE_OAUTH_CLIENT_ID=\"your_id\" \\\nGOOGLE_OAUTH_CLIENT_SECRET=\"your_secret\" \\\nuvx mcpo --port 8000 --api-key \"secret\" \\\n-- uvx workspace-mcp\n```\n\n</td><td width=\"50%\" valign=\"top\">\n\n### ◆ Manual Configuration\n1. Create `config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"google_workspace\": {\n      \"type\": \"streamablehttp\",\n      \"url\": \"http://localhost:8000/mcp\"\n    }\n  }\n}\n```\n\n2. Start MCPO:\n```bash\nmcpo --port 8001 --config config.json\n```\n\n</td></tr>\n</table>\n\n### ≡ Configure Open WebUI\n1. Navigate to **Settings** → **Connections** → **Tools**\n2. Click **Add Tool** and enter:\n   - **Server URL**: `http://localhost:8001/google_workspace`\n   - **API Key**: Your mcpo `--api-key` (if set)\n3. Save - Google Workspace tools are now available!\n\n</details>\n\n---\n\n## <span style=\"color:#adbcbc\">≡ License</span>\n\nMIT License - see `LICENSE` file for details.\n\n---\n\nValidations:\n[![MCP Badge](https://lobehub.com/badge/mcp/taylorwilsdon-google_workspace_mcp)](https://lobehub.com/mcp/taylorwilsdon-google_workspace_mcp)\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/eebbc4a6-0f8c-41b2-ace8-038e5516dba0)\n\n\n<div align=\"center\">\n<img width=\"842\" alt=\"Batch Emails\" src=\"https://github.com/user-attachments/assets/0876c789-7bcc-4414-a144-6c3f0aaffc06\" />\n</div>\n",
  "category": "Development",
  "quality_score": 71,
  "archestra_config": {
    "client_config_permutations": {
      "workspace-mcp": {
        "command": "uvx",
        "args": ["workspace-mcp"],
        "env": {
          "GOOGLE_OAUTH_CLIENT_ID": "<YOUR_CLIENT_ID_HERE>",
          "GOOGLE_OAUTH_CLIENT_SECRET": "<YOUR_CLIENT_SECRET_HERE>",
          "USER_GOOGLE_EMAIL": "<YOUR_GOOGLE_EMAIL_HERE>",
          "GOOGLE_PSE_API_KEY": "<YOUR_API_KEY_HERE>",
          "GOOGLE_PSE_ENGINE_ID": "<YOUR_ENGINE_ID_HERE>",
          "OAUTHLIB_INSECURE_TRANSPORT": "1"
        }
      }
    },
    "oauth": {
      "provider": "google",
      "required": true
    }
  },
  "github_info": {
    "owner": "iskhakov",
    "repo": "google_workspace_mcp",
    "url": "https://github.com/iskhakov/google_workspace_mcp",
    "name": "google_workspace_mcp",
    "path": null,
    "stars": 390,
    "contributors": 16,
    "issues": 17,
    "releases": true,
    "ci_cd": false,
    "latest_commit_hash": "6cb5b05da1c5469db3c34ab1bf0b83d4f950d3ba"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:42.931Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": true,
    "implementing_oauth2": true
  },
  "dependencies": [
    {
      "name": "fastapi",
      "importance": 10
    },
    {
      "name": "fastmcp",
      "importance": 10
    },
    {
      "name": "google-api-python-client",
      "importance": 9
    },
    {
      "name": "google-auth-httplib2",
      "importance": 9
    },
    {
      "name": "google-auth-oauthlib",
      "importance": 9
    },
    {
      "name": "httpx",
      "importance": 7
    },
    {
      "name": "pyjwt",
      "importance": 7
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[build-system]\nrequires = [ \"setuptools>=61.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"workspace-mcp\"\nversion = \"1.1.17\"\ndescription = \"Comprehensive, highly performant Google Workspace Streamable HTTP & SSE MCP Server for Calendar, Gmail, Docs, Sheets, Slides & Drive\"\nreadme = \"README.md\"\nkeywords = [ \"mcp\", \"google\", \"workspace\", \"llm\", \"ai\", \"claude\", \"model\", \"context\", \"protocol\", \"server\"]\nrequires-python = \">=3.10\"\ndependencies = [\n \"fastapi>=0.115.12\",\n \"fastmcp>=2.10.6\",\n \"google-api-python-client>=2.168.0\",\n \"google-auth-httplib2>=0.2.0\",\n \"google-auth-oauthlib>=1.2.2\",\n \"httpx>=0.28.1\",\n \"pyjwt>=2.10.1\",\n \"ruff>=0.12.4\",\n \"tomlkit\",\n]\nclassifiers = [\n    \"Development Status :: 4 - Beta\",\n    \"Environment :: Console\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Natural Language :: English\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n    \"Topic :: Internet :: WWW/HTTP :: HTTP Servers\",\n    \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n    \"Topic :: Communications :: Chat\",\n    \"Topic :: Office/Business\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    \"Typing :: Typed\"\n]\n\n[[project.authors]]\nname = \"Taylor Wilsdon\"\nemail = \"taylor@iskhakov.com\"\n\n[project.license]\ntext = \"MIT\"\n\n[project.urls]\nHomepage = \"https://workspacemcp.com\"\nRepository = \"https://github.com/iskhakov/google_workspace_mcp\"\nDocumentation = \"https://github.com/iskhakov/google_workspace_mcp#readme\"\nIssues = \"https://github.com/iskhakov/google_workspace_mcp/issues\"\nChangelog = \"https://github.com/iskhakov/google_workspace_mcp/releases\"\n\n[project.scripts]\nworkspace-mcp = \"main:main\"\n\n[tool.setuptools]\npackages = [ \"auth\", \"gcalendar\", \"core\", \"gdocs\", \"gdrive\", \"gmail\", \"gchat\", \"gsheets\", \"gforms\", \"gslides\", \"gtasks\", \"gsearch\"]\npy-modules = [ \"main\"]\n"
}
