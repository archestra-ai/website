{
  "name": "secretiveshell__mcp-wolfram-alpha",
  "display_name": "MCP-wolfram-alpha",
  "description": "Connect your chat repl to wolfram alpha computational intelligence",
  "author": {
    "name": "SecretiveShell"
  },
  "server": {
    "command": "uv",
    "args": ["--directory", "${__dirname}", "run", "MCP-wolfram-alpha"],
    "env": {
      "WOLFRAM_API_KEY": "${user_config.wolfram_api_key}"
    },
    "type": "local"
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {
    "wolfram_api_key": {
      "type": "string",
      "title": "Wolfram Alpha API Key",
      "description": "Your API key for Wolfram Alpha. Get an API key from Wolfram Alpha (https://products.wolframalpha.com/api).",
      "sensitive": true,
      "required": true
    }
  },
  "readme": "# MCP-wolfram-alpha\r\n\r\nA MCP server to connect to wolfram alpha API.\r\n\r\n<a href=\"https://glama.ai/mcp/servers/q5fud9cttp\">\r\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/q5fud9cttp/badge\" />\r\n</a>\r\n\r\n## Components\r\n\r\n### Prompts\r\n\r\nThis is analogous to the `!wa` bang in duckduckgo search.\r\n\r\n```python\r\ndef wa(query: str) -> f\"Use wolfram alpha to answer the following question: {query}\"\r\n```\r\n\r\n### Tools\r\n\r\nQuery Wolfram Alpha api.\r\n\r\n```python\r\ndef query_wolfram_alpha(query: str) -> str\r\n```\r\n\r\n## Configuration\r\n\r\nYou **must** set the `WOLFRAM_API_KEY` environment variable. Get an api ket from [Wolfram Alpha](https://products.wolframalpha.com/api).\r\n\r\nThis was tested with the full results API, but it might not be required.\r\n\r\n```json\r\n{\r\n    \"mcpServers\": {\r\n        \"MCP-wolfram-alpha\": {\r\n            \"command\": \"uv\",\r\n            \"args\": [\r\n                \"--directory\",\r\n                \"C:\\\\Users\\\\root\\\\Documents\\\\MCP-wolfram-alpha\",\r\n                \"run\",\r\n                \"MCP-wolfram-alpha\"\r\n            ],\r\n            \"env\": {\r\n                \"WOLFRAM_API_KEY\": \"your-app-id\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Development\r\n\r\n### Debugging\r\n\r\nSince the official MCP inspector does not have good environment support, I reccommend using wong2's [mcp-cli-inspector](https://github.com/wong2/mcp-cli).\r\n\r\nCreate a config.json file in the same style as claude desktop.\r\n\r\n```json\r\n{\r\n    \"mcpServers\": {\r\n        \"MCP-wolfram-alpha\": {\r\n            \"command\": \"uv\",\r\n            \"args\": [\r\n                \"--directory\",\r\n                \"/full/path/to/MCP-wolfram-alpha\",\r\n                \"run\",\r\n                \"MCP-wolfram-alpha\"\r\n            ],\r\n            \"env\": {\r\n                \"WOLFRAM_API_KEY\": \"your-app-id\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThen run:\r\n\r\n```bash\r\nnpx @wong2/mcp-cli -c .\\config.json\r\n```\r\n",
  "category": "Knowledge",
  "quality_score": 49,
  "archestra_config": {
    "client_config_permutations": {
      "MCP-wolfram-alpha-configured": {
        "command": "uv",
        "args": ["--directory", "C:\\Users\\root\\Documents\\MCP-wolfram-alpha", "run", "MCP-wolfram-alpha"],
        "env": {
          "WOLFRAM_API_KEY": "your-app-id"
        }
      },
      "MCP-wolfram-alpha-development": {
        "command": "uv",
        "args": ["--directory", "/full/path/to/MCP-wolfram-alpha", "run", "MCP-wolfram-alpha"],
        "env": {
          "WOLFRAM_API_KEY": "your-app-id"
        }
      }
    },
    "oauth": {
      "provider": null,
      "required": false
    },
    "works_in_archestra": false
  },
  "github_info": {
    "owner": "SecretiveShell",
    "repo": "MCP-wolfram-alpha",
    "url": "https://github.com/SecretiveShell/MCP-wolfram-alpha",
    "name": "MCP-wolfram-alpha",
    "path": null,
    "stars": 53,
    "contributors": 3,
    "issues": 3,
    "releases": false,
    "ci_cd": false,
    "latest_commit_hash": "a92556e5a3543dbf93948ee415e5129ecdf617c6"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-09-09T13:06:51.886Z",
  "evaluation_model": "gemini-2.5-flash",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": true,
    "implementing_resources": false,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": true,
    "implementing_streamable_http": false,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "httpx",
      "importance": 6
    },
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "wolframalpha",
      "importance": 8
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"mcp-wolfram-alpha\"\nversion = \"0.2.1\"\ndescription = \"A MCP server to connect to wolfram alpha API.\"\nreadme = \"README.md\"\nrequires-python = \">=3.12\"\ndependencies = [\n \"httpx>=0.28.1\",\n \"mcp>=1.2.0\",\n \"wolframalpha>=5.1.3\",\n]\n[[project.authors]]\nname = \"TerminalMan\"\nemail = \"84923604+SecretiveShell@users.noreply.github.com\"\n\n[build-system]\nrequires = [ \"hatchling\",]\nbuild-backend = \"hatchling.build\"\n\n[project.scripts]\nmcp-wolfram-alpha = \"mcp_wolfram_alpha:main\"\n"
}
