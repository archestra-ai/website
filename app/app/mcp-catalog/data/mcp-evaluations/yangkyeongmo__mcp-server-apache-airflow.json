{
  "dxt_version": "0.1.0",
  "name": "yangkyeongmo__mcp-server-apache-airflow",
  "display_name": "mcp-server-apache-airflow",
  "version": "1.0.0",
  "description": "MCP server from yangkyeongmo/mcp-server-apache-airflow",
  "author": {
    "name": "yangkyeongmo"
  },
  "server": {
    "type": "python",
    "entry_point": "index.js",
    "mcp_config": {
      "command": "unknown",
      "args": [],
      "env": {}
    }
  },
  "tools": [],
  "prompts": [],
  "keywords": [],
  "user_config": {},
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/yangkyeongmo-mcp-server-apache-airflow-badge.png)](https://mseep.ai/app/yangkyeongmo-mcp-server-apache-airflow)\n\n# mcp-server-apache-airflow\n\n[![smithery badge](https://smithery.ai/badge/@yangkyeongmo/mcp-server-apache-airflow)](https://smithery.ai/server/@yangkyeongmo/mcp-server-apache-airflow)\n\nA Model Context Protocol (MCP) server implementation for Apache Airflow, enabling seamless integration with MCP clients. This project provides a standardized way to interact with Apache Airflow through the Model Context Protocol.\n\n<a href=\"https://glama.ai/mcp/servers/e99b6vx9lw\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/e99b6vx9lw/badge\" alt=\"Server for Apache Airflow MCP server\" />\n</a>\n\n## About\n\nThis project implements a [Model Context Protocol](https://modelcontextprotocol.io/introduction) server that wraps Apache Airflow's REST API, allowing MCP clients to interact with Airflow in a standardized way. It uses the official Apache Airflow client library to ensure compatibility and maintainability.\n\n## Feature Implementation Status\n\n| Feature                          | API Path                                                                                      | Status |\n| -------------------------------- | --------------------------------------------------------------------------------------------- | ------ |\n| **DAG Management**         |                                                                                               |        |\n| List DAGs                        | `/api/v1/dags`                                                                              | ✅     |\n| Get DAG Details                  | `/api/v1/dags/{dag_id}`                                                                     | ✅     |\n| Pause DAG                        | `/api/v1/dags/{dag_id}`                                                                     | ✅     |\n| Unpause DAG                      | `/api/v1/dags/{dag_id}`                                                                     | ✅     |\n| Update DAG                       | `/api/v1/dags/{dag_id}`                                                                     | ✅     |\n| Delete DAG                       | `/api/v1/dags/{dag_id}`                                                                     | ✅     |\n| Get DAG Source                   | `/api/v1/dagSources/{file_token}`                                                           | ✅     |\n| Patch Multiple DAGs              | `/api/v1/dags`                                                                              | ✅     |\n| Reparse DAG File                 | `/api/v1/dagSources/{file_token}/reparse`                                                   | ✅     |\n| **DAG Runs**               |                                                                                               |        |\n| List DAG Runs                    | `/api/v1/dags/{dag_id}/dagRuns`                                                             | ✅     |\n| Create DAG Run                   | `/api/v1/dags/{dag_id}/dagRuns`                                                             | ✅     |\n| Get DAG Run Details              | `/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}`                                                | ✅     |\n| Update DAG Run                   | `/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}`                                                | ✅     |\n| Delete DAG Run                   | `/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}`                                                | ✅     |\n| Get DAG Runs Batch               | `/api/v1/dags/~/dagRuns/list`                                                               | ✅     |\n| Clear DAG Run                    | `/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}/clear`                                          | ✅     |\n| Set DAG Run Note                 | `/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}/setNote`                                        | ✅     |\n| Get Upstream Dataset Events      | `/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}/upstreamDatasetEvents`                          | ✅     |\n| **Tasks**                  |                                                                                               |        |\n| List DAG Tasks                   | `/api/v1/dags/{dag_id}/tasks`                                                               | ✅     |\n| Get Task Details                 | `/api/v1/dags/{dag_id}/tasks/{task_id}`                                                     | ✅     |\n| Get Task Instance                | `/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}`                        | ✅     |\n| List Task Instances              | `/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances`                                  | ✅     |\n| Update Task Instance             | `/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}`                        | ✅     |\n| Clear Task Instances             | `/api/v1/dags/{dag_id}/clearTaskInstances`                                                  | ✅     |\n| Set Task Instances State         | `/api/v1/dags/{dag_id}/updateTaskInstancesState`                                            | ✅     |\n| **Variables**              |                                                                                               |        |\n| List Variables                   | `/api/v1/variables`                                                                         | ✅     |\n| Create Variable                  | `/api/v1/variables`                                                                         | ✅     |\n| Get Variable                     | `/api/v1/variables/{variable_key}`                                                          | ✅     |\n| Update Variable                  | `/api/v1/variables/{variable_key}`                                                          | ✅     |\n| Delete Variable                  | `/api/v1/variables/{variable_key}`                                                          | ✅     |\n| **Connections**            |                                                                                               |        |\n| List Connections                 | `/api/v1/connections`                                                                       | ✅     |\n| Create Connection                | `/api/v1/connections`                                                                       | ✅     |\n| Get Connection                   | `/api/v1/connections/{connection_id}`                                                       | ✅     |\n| Update Connection                | `/api/v1/connections/{connection_id}`                                                       | ✅     |\n| Delete Connection                | `/api/v1/connections/{connection_id}`                                                       | ✅     |\n| Test Connection                  | `/api/v1/connections/test`                                                                  | ✅     |\n| **Pools**                  |                                                                                               |        |\n| List Pools                       | `/api/v1/pools`                                                                             | ✅     |\n| Create Pool                      | `/api/v1/pools`                                                                             | ✅     |\n| Get Pool                         | `/api/v1/pools/{pool_name}`                                                                 | ✅     |\n| Update Pool                      | `/api/v1/pools/{pool_name}`                                                                 | ✅     |\n| Delete Pool                      | `/api/v1/pools/{pool_name}`                                                                 | ✅     |\n| **XComs**                  |                                                                                               |        |\n| List XComs                       | `/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries`            | ✅     |\n| Get XCom Entry                   | `/api/v1/dags/{dag_id}/dagRuns/{dag_run_id}/taskInstances/{task_id}/xcomEntries/{xcom_key}` | ✅     |\n| **Datasets**               |                                                                                               |        |\n| List Datasets                    | `/api/v1/datasets`                                                                          | ✅     |\n| Get Dataset                      | `/api/v1/datasets/{uri}`                                                                    | ✅     |\n| Get Dataset Events               | `/api/v1/datasetEvents`                                                                     | ✅     |\n| Create Dataset Event             | `/api/v1/datasetEvents`                                                                     | ✅     |\n| Get DAG Dataset Queued Event     | `/api/v1/dags/{dag_id}/dagRuns/queued/datasetEvents/{uri}`                                  | ✅     |\n| Get DAG Dataset Queued Events    | `/api/v1/dags/{dag_id}/dagRuns/queued/datasetEvents`                                        | ✅     |\n| Delete DAG Dataset Queued Event  | `/api/v1/dags/{dag_id}/dagRuns/queued/datasetEvents/{uri}`                                  | ✅     |\n| Delete DAG Dataset Queued Events | `/api/v1/dags/{dag_id}/dagRuns/queued/datasetEvents`                                        | ✅     |\n| Get Dataset Queued Events        | `/api/v1/datasets/{uri}/dagRuns/queued/datasetEvents`                                       | ✅     |\n| Delete Dataset Queued Events     | `/api/v1/datasets/{uri}/dagRuns/queued/datasetEvents`                                       | ✅     |\n| **Monitoring**             |                                                                                               |        |\n| Get Health                       | `/api/v1/health`                                                                            | ✅     |\n| **DAG Stats**              |                                                                                               |        |\n| Get DAG Stats                    | `/api/v1/dags/statistics`                                                                   | ✅     |\n| **Config**                 |                                                                                               |        |\n| Get Config                       | `/api/v1/config`                                                                            | ✅     |\n| **Plugins**                |                                                                                               |        |\n| Get Plugins                      | `/api/v1/plugins`                                                                           | ✅     |\n| **Providers**              |                                                                                               |        |\n| List Providers                   | `/api/v1/providers`                                                                         | ✅     |\n| **Event Logs**             |                                                                                               |        |\n| List Event Logs                  | `/api/v1/eventLogs`                                                                         | ✅     |\n| Get Event Log                    | `/api/v1/eventLogs/{event_log_id}`                                                          | ✅     |\n| **System**                 |                                                                                               |        |\n| Get Import Errors                | `/api/v1/importErrors`                                                                      | ✅     |\n| Get Import Error Details         | `/api/v1/importErrors/{import_error_id}`                                                    | ✅     |\n| Get Health Status                | `/api/v1/health`                                                                            | ✅     |\n| Get Version                      | `/api/v1/version`                                                                           | ✅     |\n\n## Setup\n\n### Dependencies\n\nThis project depends on the official Apache Airflow client library (`apache-airflow-client`). It will be automatically installed when you install this package.\n\n### Environment Variables\n\nSet the following environment variables:\n\n```\nAIRFLOW_HOST=<your-airflow-host>        # Optional, defaults to http://localhost:8080\nAIRFLOW_USERNAME=<your-airflow-username>\nAIRFLOW_PASSWORD=<your-airflow-password>\nAIRFLOW_API_VERSION=v1                  # Optional, defaults to v1\n```\n\n### Usage with Claude Desktop\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-apache-airflow\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-apache-airflow\"],\n      \"env\": {\n        \"AIRFLOW_HOST\": \"https://your-airflow-host\",\n        \"AIRFLOW_USERNAME\": \"your-username\",\n        \"AIRFLOW_PASSWORD\": \"your-password\"\n      }\n    }\n  }\n}\n```\n\nFor read-only mode (recommended for safety):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-apache-airflow\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-apache-airflow\", \"--read-only\"],\n      \"env\": {\n        \"AIRFLOW_HOST\": \"https://your-airflow-host\",\n        \"AIRFLOW_USERNAME\": \"your-username\",\n        \"AIRFLOW_PASSWORD\": \"your-password\"\n      }\n    }\n  }\n}\n```\n\nAlternative configuration using `uv`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-apache-airflow\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/mcp-server-apache-airflow\",\n        \"run\",\n        \"mcp-server-apache-airflow\"\n      ],\n      \"env\": {\n        \"AIRFLOW_HOST\": \"https://your-airflow-host\",\n        \"AIRFLOW_USERNAME\": \"your-username\",\n        \"AIRFLOW_PASSWORD\": \"your-password\"\n      }\n    }\n  }\n}\n```\n\nReplace `/path/to/mcp-server-apache-airflow` with the actual path where you've cloned the repository.\n\n### Selecting the API groups\n\nYou can select the API groups you want to use by setting the `--apis` flag.\n\n```bash\nuv run mcp-server-apache-airflow --apis \"dag,dagrun\"\n```\n\nThe default is to use all APIs.\n\nAllowed values are:\n\n- config\n- connections\n- dag\n- dagrun\n- dagstats\n- dataset\n- eventlog\n- importerror\n- monitoring\n- plugin\n- pool\n- provider\n- taskinstance\n- variable\n- xcom\n\n### Read-Only Mode\n\nYou can run the server in read-only mode by using the `--read-only` flag. This will only expose tools that perform read operations (GET requests) and exclude any tools that create, update, or delete resources.\n\n```bash\nuv run mcp-server-apache-airflow --read-only\n```\n\nIn read-only mode, the server will only expose tools like:\n- Listing DAGs, DAG runs, tasks, variables, connections, etc.\n- Getting details of specific resources\n- Reading configurations and monitoring information\n- Testing connections (non-destructive)\n\nWrite operations like creating, updating, deleting DAGs, variables, connections, triggering DAG runs, etc. will not be available in read-only mode.\n\nYou can combine read-only mode with API group selection:\n\n```bash\nuv run mcp-server-apache-airflow --read-only --apis \"dag,variable\"\n```\n\n### Manual Execution\n\nYou can also run the server manually:\n\n```bash\nmake run\n```\n\n`make run` accepts following options:\n\nOptions:\n\n- `--port`: Port to listen on for SSE (default: 8000)\n- `--transport`: Transport type (stdio/sse, default: stdio)\n\nOr, you could run the sse server directly, which accepts same parameters:\n\n```bash\nmake run-sse\n```\n\n### Installing via Smithery\n\nTo install Apache Airflow MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@yangkyeongmo/mcp-server-apache-airflow):\n\n```bash\nnpx -y @smithery/cli install @yangkyeongmo/mcp-server-apache-airflow --client claude\n```\n\n## Development\n\n### Setting up Development Environment\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yangkyeongmo/mcp-server-apache-airflow.git\ncd mcp-server-apache-airflow\n```\n\n2. Install development dependencies:\n```bash\nuv sync --dev\n```\n\n3. Create a `.env` file for environment variables (optional for development):\n```bash\ntouch .env\n```\n\n> **Note**: No environment variables are required for running tests. The `AIRFLOW_HOST` defaults to `http://localhost:8080` for development and testing purposes.\n\n### Running Tests\n\nThe project uses pytest for testing with the following commands available:\n\n```bash\n# Run all tests\nmake test\n```\n\n### Code Quality\n\n```bash\n# Run linting\nmake lint\n\n# Run code formatting\nmake format\n```\n\n### Continuous Integration\n\nThe project includes a GitHub Actions workflow (`.github/workflows/test.yml`) that automatically:\n\n- Runs tests on Python 3.10, 3.11, and 3.12\n- Executes linting checks using ruff\n- Runs on every push and pull request to `main` branch\n\nThe CI pipeline ensures code quality and compatibility across supported Python versions before any changes are merged.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\nThe package is deployed automatically to PyPI when project.version is updated in `pyproject.toml`.\nFollow semver for versioning.\n\nPlease include version update in the PR in order to apply the changes to core logic.\n\n## License\n\n[MIT License](LICENSE)\n",
  "category": "Data",
  "quality_score": 66,
  "archestra_config": {
    "client_config_permutations": {
      "mcpServers": {}
    },
    "oauth": {
      "provider": null,
      "required": false
    }
  },
  "github_info": {
    "owner": "yangkyeongmo",
    "repo": "mcp-server-apache-airflow",
    "url": "https://github.com/yangkyeongmo/mcp-server-apache-airflow",
    "name": "mcp-server-apache-airflow",
    "path": null,
    "stars": 73,
    "contributors": 6,
    "issues": 13,
    "releases": true,
    "ci_cd": true,
    "latest_commit_hash": "7dde9706cb099e05df1a9bc2505200f993c57883"
  },
  "programming_language": "Python",
  "framework": null,
  "last_scraped_at": "2025-08-04T09:36:31.093Z",
  "evaluation_model": "gemini-2.5-pro",
  "protocol_features": {
    "implementing_tools": true,
    "implementing_prompts": false,
    "implementing_resources": true,
    "implementing_sampling": false,
    "implementing_roots": false,
    "implementing_logging": false,
    "implementing_stdio": false,
    "implementing_streamable_http": true,
    "implementing_oauth2": false
  },
  "dependencies": [
    {
      "name": "httpx",
      "importance": 8
    },
    {
      "name": "click",
      "importance": 7
    },
    {
      "name": "mcp",
      "importance": 10
    },
    {
      "name": "apache-airflow-client",
      "importance": 9
    }
  ],
  "raw_dependencies": "=== pyproject.toml ===\n[project]\nname = \"mcp-server-apache-airflow\"\nversion = \"0.2.5\"\ndescription = \"Model Context Protocol (MCP) server for Apache Airflow\"\nauthors = [\n    { name = \"Gyeongmo Yang\", email = \"me@gmyang.dev\" }\n]\ndependencies = [\n    \"httpx>=0.24.1\",\n    \"click>=8.1.7\",\n    \"mcp>=0.1.0\",\n    \"apache-airflow-client>=2.7.0,<3\",\n]\nrequires-python = \">=3.10\"\nreadme = \"README.md\"\nlicense = { text = \"MIT\" }\nclassifiers = [\n    \"Development Status :: 3 - Alpha\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n]\nkeywords = [\"mcp\", \"airflow\", \"apache-airflow\", \"model-context-protocol\"]\n\n[project.optional-dependencies]\ndev = [\n    \"build>=1.2.2.post1\",\n    \"twine>=6.1.0\",\n]\n\n[project.urls]\nHomepage = \"https://github.com/yangkyeongmo/mcp-server-apache-airflow\"\nRepository = \"https://github.com/yangkyeongmo/mcp-server-apache-airflow.git\"\n\"Bug Tracker\" = \"https://github.com/yangkyeongmo/mcp-server-apache-airflow/issues\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project.scripts]\nmcp-server-apache-airflow = \"src.main:main\"\n\n[tool.hatch.build.targets.wheel]\npackages = [\"src\"]\n\n[tool.hatch.build]\ninclude = [\n    \"src/**/*.py\",\n    \"README.md\",\n    \"LICENSE\",\n]\n\n[tool.ruff]\nselect = [\"E\", \"W\", \"F\", \"B\", \"I\"]\nline-length = 120\n\n[dependency-groups]\ndev = [\n    \"ruff>=0.11.0\",\n    \"pytest>=7.0.0\",\n    \"pytest-cov>=4.0.0\",\n    \"pytest-asyncio>=0.21.0\",\n]\n"
}